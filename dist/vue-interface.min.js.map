{"version":3,"file":"vue-interface.min.js","sources":["../src/Helpers/Functions/extend.js","../src/Helpers/Functions/isNull.js","../src/Helpers/Functions/isArray.js","../src/Helpers/Functions/isObject.js","../src/Helpers/Functions/deepExtend.js","../src/Helpers/Functions/isNumber.js","../src/Helpers/Functions/isNumeric.js","../src/Helpers/Functions/key.js","../src/Helpers/Functions/each.js","../src/Helpers/Functions/first.js","../src/Helpers/Functions/matches.js","../src/Helpers/Functions/isString.js","../src/Helpers/Functions/get.js","../src/Helpers/Functions/property.js","../src/Helpers/Functions/isFunction.js","../src/Helpers/Functions/matchesProperty.js","../src/Helpers/Functions/predicate.js","../src/Helpers/Functions/find.js","../src/Helpers/Functions/findIndex.js","../src/Helpers/Functions/isBoolean.js","../src/Helpers/Functions/isUndefined.js","../src/Helpers/Functions/isEmpty.js","../src/Helpers/Functions/kebabCase.js","../src/Helpers/Functions/mapKeys.js","../src/Helpers/Functions/pickBy.js","../src/Helpers/Functions/remove.js","../src/Helpers/Unit/Unit.js","../node_modules/vue-runtime-helpers/normalize-component.js","../src/Helpers/Prefix/Prefix.js","../src/Helpers/Transition/Transition.js","../src/Mixins/FormControl/FormControl.js","../src/Helpers/Uuid/Uuid.js","../src/Helpers/Hash/Hash.js","../src/Helpers/ReadFile/ReadFile.js","../src/Directives/Autogrow/Autogrow.js","../src/Directives/Collapse/Collapse.js","../src/Helpers/Instantiate/Instantiate.js","../src/Plugins/Modal/Modal.js","../src/Plugins/Overlay/Overlay.js","../src/Plugins/Popover/Popover.js","../src/Components/ActivityIndicator/Types/BaseType.vue","../src/Components/ActivityIndicator/ActivityIndicator.vue","../src/Components/Alert/AlertClose.vue","../src/Components/Alert/AlertHeading.vue","../src/Mixins/Variant/Variant.js","../src/Mixins/MergeClasses/MergeClasses.js","../src/Components/ProgressBar/ProgressBar.vue","../src/Components/Alert/Alert.vue","../src/Components/Alert/AlertLink.vue","../src/Components/Badge/Badge.vue","../src/Support/BaseClass.js","../src/Http/Request/Response.js","../src/Http/Request/Request.js","../src/Http/Model/Model.js","../src/Components/BaseForm/BaseForm.vue","../src/Components/Breadcrumb/BreadcrumbItem.vue","../src/Components/Breadcrumb/Breadcrumb.vue","../src/Mixins/Sizeable/Sizeable.js","../src/Mixins/Colorable/Colorable.js","../src/Components/Btn/Btn.vue","../src/Components/BtnActivity/BtnActivity.vue","../src/Mixins/Screenreaders/Screenreaders.js","../src/Components/HelpText/HelpText.vue","../src/Components/FormGroup/FormGroup.vue","../src/Components/FormLabel/FormLabel.vue","../src/Components/FormFeedback/FormFeedback.vue","../src/Components/FormControl/FormControl.vue","../src/Components/InputField/InputField.vue","../src/Components/FileField/FileField.vue","../src/Components/BtnFile/BtnFile.vue","../src/Components/BtnGroup/BtnGroup.vue","../src/Components/BtnGroup/BtnGroupToggle.vue","../src/Components/BtnGroup/BtnToolbar.vue","../src/Mixins/Proxy/Proxy.js","../src/Components/DropdownMenu/DropdownMenuItem.vue","../src/Components/DropdownMenu/DropdownMenuHeader.vue","../src/Components/DropdownMenu/DropdownMenuDivider.vue","../src/Components/DropdownMenu/DropdownMenu.vue","../src/Components/BtnDropdown/BtnDropdown.vue","../src/Mixins/HasSlots/HasSlots.js","../src/Components/Card/Card.vue","../src/Components/Card/CardBtnGroup.vue","../src/Components/Card/CardDeck.vue","../src/Components/Card/CardHeader.vue","../src/Components/Card/CardImg.vue","../src/Components/Card/CardLink.vue","../src/Components/Card/CardSubtitle.vue","../src/Components/Card/CardTitle.vue","../src/Components/RadioField/RadioField.vue","../src/Components/CheckboxField/CheckboxField.vue","../src/Components/Container/Container.vue","../src/Components/Dropzone/Dropzone.vue","../src/Components/FilePreview/FilePreview.vue","../src/Components/InfiniteScrolling/InfiniteScrolling.vue","../src/Components/InputGroup/InputGroupText.vue","../src/Components/InputGroup/InputGroupAppend.vue","../src/Components/InputGroup/InputGroupPrepend.vue","../src/Components/InputGroup/InputGroup.vue","../src/Components/LightSwitchField/LightSwitchField.vue","../src/Components/ListGroup/ListGroupItem.vue","../src/Components/ListGroup/ListGroup.vue","../src/Components/Modal/ModalBody.vue","../src/Components/Modal/ModalDialog.vue","../src/Components/Modal/ModalTitle.vue","../src/Components/Modal/ModalHeader.vue","../src/Components/Modal/ModalFooter.vue","../src/Components/Modal/ModalContent.vue","../src/Components/Modal/ModalBackdrop.vue","../src/Mixins/Triggerable/Triggerable.js","../src/Components/Modal/Modal.vue","../src/Components/Navbar/NavbarBrand.vue","../src/Components/Navbar/NavbarCollapse.vue","../src/Components/Navbar/NavbarText.vue","../src/Components/Navbar/NavbarTogglerIcon.vue","../src/Components/Navbar/NavbarToggler.vue","../src/Components/Navbar/Navbar.vue","../src/Components/Navigation/NavigationError.vue","../src/Components/Navigation/NavigationLink.vue","../src/Components/Navigation/NavigationItem.vue","../src/Components/Navigation/Navigation.vue","../src/Components/Navigation/NavigationDropdown.vue","../src/Components/Navbar/NavbarNav.vue","../src/Components/Overlay/OverlayBody.vue","../src/Components/Overlay/OverlayContent.vue","../src/Components/Pagination/Pagination.vue","../src/Components/Popover/Popover.vue","../src/Components/Popover/PopoverBody.vue","../src/Components/Popover/PopoverHeader.vue","../src/Components/SelectField/SelectField.vue","../src/Components/SlideDeck/SlideDeckControls.vue","../src/Components/TableView/TableViewHeader.vue","../src/Components/TableView/Table.vue","../src/Http/Transformer/Transformer.js","../src/Http/TableViewTransformer/TableViewTransformer.js","../src/Components/TableView/TableView.vue","../src/Components/TextareaField/TextareaField.vue","../src/Components/ThumbnailList/ThumbnailListItem.vue","../src/Components/ThumbnailList/ThumbnailList.vue","../src/Components/UploadField/UploadField.vue","../src/Components/Wizard/WizardButtons.vue","../src/Components/Wizard/WizardError.vue","../src/Components/Wizard/WizardHeader.vue","../src/Components/Wizard/WizardProgress.vue","../src/Components/Wizard/WizardSuccess.vue","../src/Components/Wizard/Wizard.vue","../src/Directives/Slug/Slug.js","../src/install.js"],"sourcesContent":["export default function extend(...args) {\n    return Object.assign(...args);\n}\n","export default function isNull(value) {\n    return value === null;\n}\n","export default function isArray(value) {\n    return Array.isArray(value);\n}\n","import isNull from './isNull';\nimport isArray from './isArray';\n\nexport default function isObject(value) {\n    return (typeof value === 'object') && !isNull(value) && !isArray(value);\n}\n","import extend from './extend';\nimport isObject from './isObject';\n\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n*/\nexport default function deepExtend(target, ...sources) {\n    if(!sources.length) return target;\n\n    const source = sources.shift();\n\n    if(isObject(target) && isObject(source)) {\n        for(const key in source) {\n            if(isObject(source[key])) {\n                if(!target[key]) extend(target, { [key]: {} });\n                deepExtend(target[key], source[key]);\n            }\n            else {\n                extend(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return deepExtend(target, ...sources);\n}\n","export default function isNumber(value) {\n    return (typeof value === 'number') || (\n        value ? value.toString() === '[object Number]' : false\n    );\n}\n","import isArray from './isArray';\nimport isNumber from './isNumber';\n\nexport default function isNumeric(value) {\n    return isNumber(value) || (\n        !!value && !isArray(value) && !!value.toString().match(/^-?[\\d.,]+$/)\n    );\n}\n","import isNumeric from './isNumeric';\n\nexport default function key(value) {\n    return isNumeric(value) ? parseFloat(value) : value;\n}\n","import key from './key';\n\nexport default function each(subject, fn) {\n    for(const i in subject) {\n        fn(subject[i], key(i));\n    }\n}\n","export default function first(array) {\n    return (array && array.length) ? array[0] : undefined;\n}\n","import isObject from './isObject';\n\nexport default function matches(properties) {\n    return subject => {\n        for(const i in properties) {\n            if(isObject(properties[i])) {\n                return subject[i] ? matches(properties[i])(subject[i]) : false;\n            }\n            else if(!subject || subject[i] !== properties[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n}\n","export default function isString(value) {\n    return typeof value === 'string';\n}\n","import isArray from './isArray';\nimport isString from './isString';\n\nexport default function get(object, path) {\n    return (isString(path) ? path.split('.') : (!isArray(path) ? [path] : path)).reduce((a, b) => a[b], object);\n}\n","import get from './get';\n\nexport default function property(path) {\n    return object => {\n        return get(object, path);\n    };\n}\n","export default function isFunction(value) {\n    return value instanceof Function;\n}\n","import get from './get';\n\nexport default function matchesProperty(path, value) {\n    return subject => {\n        return get(subject, path) === value;\n    };\n}\n","import isArray from './isArray';\nimport matches from './matches';\nimport isObject from './isObject';\nimport property from './property';\nimport isFunction from './isFunction';\nimport matchesProperty from './matchesProperty';\n\nexport default function predicate(value) {\n    if(isObject(value)) {\n        value = matches(value);\n    }\n    else if(isArray(value)) {\n        value = matchesProperty(value[0], value[1]);\n    }\n    else if(!isFunction(value)) {\n        value = property(value);\n    }\n\n    return value;\n}\n","import first from './first';\nimport predicate from './predicate';\n\nexport default function find(subject, value) {\n    return first(subject.filter(object => predicate(value)(object)));\n}\n","import key from './key';\nimport predicate from './predicate';\n\nexport default function findIndex(subject, value) {\n    for(const i in subject) {\n        if(predicate(value)(subject[i])) {\n            return key(i);\n        }\n    }\n\n    return -1;\n}\n","export default function isBoolean(value) {\n    return value === true || value === false;\n}\n","export default function isUndefined(value) {\n    return typeof value === 'undefined';\n}\n","import isNull from './isNull';\nimport isArray from './isArray';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default function isEmpty(value) {\n    if(isArray(value)) {\n        return value.length === 0;\n    }\n    else if(isObject(value)) {\n        return Object.keys(value).length === 0;\n    }\n\n    return value === '' || isNull(value) || isUndefined(value);\n}\n","export default function kebabCase(str) {\n    return str.replace(/([a-z])([A-Z])/g, '$1-$2')\n        .replace(/\\s+/g, '-')\n        .replace(/_/g, '-')\n        .toLowerCase();\n}\n","import each from './each';\n\nexport default function mapKeys(object, fn) {\n    const mapped = {};\n\n    each(object, (value, key) => {\n        mapped[fn(value, key)] = value;\n    });\n\n    return mapped;\n}\n","import each from './each';\nimport predicate from './predicate';\n\nexport default function pickBy(object, match) {\n    const subject = {};\n\n    each(object, (value, key) => {\n        if(predicate(match)(value)) {\n            subject[key] = value;\n        }\n    });\n\n    return subject;\n}\n","import key from './key';\nimport predicate from './predicate';\n\nexport default function remove(array, match) {\n    const indexes = [];\n\n    for(const i in array) {\n        if(predicate(match)(array[i])) {\n            indexes.push(key(i));\n        }\n    }\n\n    return array.filter((value, i) => {\n        return indexes.indexOf(i) !== -1;\n    });\n}\n","export default function(height) {\n    return isFinite(height) ? height + 'px' : height;\n}\n","export default function normalizeComponent(compiledTemplate, injectStyle, defaultExport, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, isShadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\n    if (typeof isShadowMode === 'function') {\n        createInjectorSSR = createInjector;\n        createInjector = isShadowMode;\n        isShadowMode = false;\n    }\n    // Vue.extend constructor export interop\n    const options = typeof defaultExport === 'function' ? defaultExport.options : defaultExport;\n    // render functions\n    if (compiledTemplate && compiledTemplate.render) {\n        options.render = compiledTemplate.render;\n        options.staticRenderFns = compiledTemplate.staticRenderFns;\n        options._compiled = true;\n        // functional template\n        if (isFunctionalTemplate) {\n            options.functional = true;\n        }\n    }\n    // scopedId\n    if (scopeId) {\n        options._scopeId = scopeId;\n    }\n    let hook;\n    if (moduleIdentifier) {\n        // server build\n        hook = function (context) {\n            // 2.3 injection\n            context =\n                context || // cached call\n                    (this.$vnode && this.$vnode.ssrContext) || // stateful\n                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional\n            // 2.2 with runInNewContext: true\n            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n                context = __VUE_SSR_CONTEXT__;\n            }\n            // inject component styles\n            if (injectStyle) {\n                injectStyle.call(this, createInjectorSSR(context));\n            }\n            // register component module identifier for async chunk inference\n            if (context && context._registeredComponents) {\n                context._registeredComponents.add(moduleIdentifier);\n            }\n        };\n        // used by ssr in case component is cached and beforeCreate\n        // never gets called\n        options._ssrRegister = hook;\n    }\n    else if (injectStyle) {\n        hook = isShadowMode\n            ? function () {\n                injectStyle.call(this, createInjectorShadow(this.$root.$options.shadowRoot));\n            }\n            : function (context) {\n                injectStyle.call(this, createInjector(context));\n            };\n    }\n    if (hook) {\n        if (options.functional) {\n            // register for functional component in vue file\n            const originalRender = options.render;\n            options.render = function renderWithStyleInjection(h, context) {\n                hook.call(context);\n                return originalRender(h, context);\n            };\n        }\n        else {\n            // inject component registration as beforeCreate hook\n            const existing = options.beforeCreate;\n            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n        }\n    }\n    return defaultExport;\n}\n","import {\n    mapKeys,\n    isObject,\n    isBoolean\n} from '../Functions';\n\nexport default function prefix(subject, prefix, delimeter = '-') {\n    const prefixer = (value, key) => {\n        const string = (key || value)\n            .replace(new RegExp(`^${prefix}${delimeter}?`), '');\n\n        return [prefix, string].filter(value => !!value).join(delimeter);\n    };\n\n    if(isBoolean(subject)) {\n        return subject;\n    }\n\n    if(isObject(subject)) {\n        return mapKeys(subject, prefixer);\n    }\n\n    return prefixer(subject);\n}\n","function duration(el) {\n    const duration = getComputedStyle(el).transitionDuration;\n    const numeric = parseFloat(duration, 10) || 0;\n    const unit = duration.match(/m?s/);\n\n    switch (unit[0]) {\n    case 's':\n        return numeric * 1000;\n    case 'ms':\n        return numeric;\n    }\n}\n\nexport default function transition(el) {\n    return new Promise((resolve, reject) => {\n        try {\n            const delay = duration(el);\n\n            setTimeout(() => {\n                resolve(delay);\n            }, delay);\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n}\n","import prefix from '../../Helpers/Prefix';\nimport Colorable from '../../Mixins/Colorable';\nimport MergeClasses from '../../Mixins/MergeClasses';\nimport { each, isArray, isEmpty, isObject } from '../../Helpers/Functions';\n\nconst emptyClass = 'is-empty';\nconst focusClass = 'has-focus';\nconst changedClass = 'has-changed';\nconst customPrefix = 'custom';\n\nfunction addClass(el, vnode, css) {\n    // el.classList.add(css);\n    vnode.context.$el.classList.add(css);\n}\n\nfunction removeClass(el, vnode, css) {\n    // el.classList.remove(css);\n    vnode.context.$el.classList.remove(css);\n}\n\nfunction addEmptyClass(el, vnode) {\n    if(isEmpty(el.value) || (el.tagName === 'SELECT' && el.selectedIndex === -1)) {\n        addClass(el, vnode, emptyClass);\n    }\n}\n\nexport default {\n\n    inheritAttrs: false,\n\n    mixins: [\n        Colorable,\n        MergeClasses\n    ],\n\n    props: {\n\n        /**\n         * Show type activity indicator.\n         *\n         * @property Boolean\n         */\n        activity: {\n            type: Boolean,\n            default: false\n        },\n\n        /**\n         * Is the form control a custom styled component.\n         *\n         * @property Boolean\n         */\n        custom: {\n            type: Boolean,\n            default: false\n        },\n\n        /**\n         * The value of label element. If no value, no label will appear.\n         *\n         * @property String\n         */\n        label: [Number, String],\n\n        /**\n         * The field id attribute value.\n         *\n         * @property String\n         */\n        value: {\n            default: null\n        },\n\n        /**\n         * Add form-group wrapper to input\n         *\n         * @property String\n         */\n        group: {\n            type: Boolean,\n            value: true\n        },\n\n        /**\n         * An inline field validation error.\n         *\n         * @property String|Boolean\n         */\n        error: String,\n\n        /**\n         * An inline field validation errors passed as object with key/value\n         * pairs. If errors passed as an object, the form name will be used for\n         * the key.\n         *\n         * @property Object|Boolean\n         */\n        errors: {\n            type: Object,\n            default() {\n                return {};\n            }\n        },\n\n        /**\n         * Some feedback to add to the field once the field is successfully\n         * valid.\n         *\n         * @property String\n         */\n        feedback: [String, Array],\n\n        /**\n         * An array of event names that correlate with callback functions\n         *\n         * @property Function\n         */\n        bindEvents: {\n            type: Array,\n            default() {\n                return ['focus', 'blur', 'change', 'click', 'keyup', 'keydown', 'progress', 'paste'];\n            }\n        },\n\n        /**\n         * The default class name assigned to the control element\n         *\n         * @property String\n         */\n        defaultControlClass: {\n            type: String,\n            default: 'form-control'\n        },\n\n        /**\n         * Hide the label for browsers, but leave it for screen readers.\n         *\n         * @property String\n         */\n        hideLabel: Boolean,\n\n        /**\n         * The invalid property\n         *\n         * @property String\n         */\n        invalid: Boolean,\n\n        /**\n         * The valid property\n         *\n         * @property String\n         */\n        valid: Boolean,\n\n        /**\n         * Additional margin/padding classes for fine control of spacing\n         *\n         * @property String\n         */\n        spacing: String,\n\n        /**\n         * The size of the form control\n         *\n         * @property String\n         */\n        size: {\n            type: String,\n            default: 'md',\n            validate: value => ['sm', 'md', 'lg'].indexOf(value) !== -1\n        },\n\n        /**\n         * Display the form field inline\n         *\n         * @property String\n         */\n        inline: Boolean,\n\n        /**\n         * Some instructions to appear under the field label\n         *\n         * @property String\n         */\n        helpText: [Number, String],\n\n        /**\n         * The maxlength attribute\n         *\n         * @property String\n         */\n        maxlength: [Number, String]\n\n    },\n\n    directives: {\n        bindEvents: {\n            bind(el, binding, vnode) {\n                // Add/remove the has-focus class from the form control\n                el.addEventListener('focus', event => {\n                    addClass(el, vnode, focusClass);\n                });\n\n                el.addEventListener('blur', event => {\n                    if(el.classList.contains(emptyClass)) {\n                        removeClass(el, vnode, changedClass);\n                    }\n\n                    removeClass(el, vnode, focusClass);\n                });\n\n                el.addEventListener('input', e => {\n                    addClass(el, vnode, changedClass);\n\n                    if(!isEmpty(el.value) || (el.tagName === 'SELECT' && el.selectedIndex > -1)) {\n                        removeClass(el, vnode, emptyClass);\n                    }\n                    else {\n                        addClass(el, vnode, emptyClass);\n                    }\n                });\n\n                // Bubble the native events up to the vue component.\n                each(vnode.context.bindEvents, name => {\n                    el.addEventListener(name, event => {\n                        vnode.context.$emit(name, event);\n                    });\n                });\n            },\n            inserted(el, binding, vnode) {\n                addEmptyClass(el, vnode);\n            },\n            update(el, binding, vnode) {\n                addEmptyClass(el, vnode);\n            }\n        }\n    },\n\n    methods: {\n\n        blur() {\n            if(this.getInputField()) {\n                this.getInputField().blur();\n            }\n        },\n\n        focus() {\n            if(this.getInputField()) {\n                this.getInputField().focus();\n            }\n        },\n\n        getInputField() {\n            return this.$el.querySelector(\n                '.form-control, input, select, textarea'\n            );\n        },\n\n        getFieldErrors() {\n            let errors = this.error || this.errors;\n\n            if(isObject(this.errors)) {\n                errors = this.errors[this.$attrs.name || this.$attrs.id];\n            }\n\n            return !errors || isArray(errors) || isObject(errors) ? errors : [errors];\n        }\n\n    },\n\n    computed: {\n\n        controlAttributes() {\n            return Object.keys(this.$attrs)\n                .concat([['class', this.controlClasses]])\n                .reduce((carry, key) => {\n                    if(isArray(key)) {\n                        carry[key[0]] = key[1];\n                    }\n                    else {\n                        carry[key] = this[key] || this.$attrs[key];\n                    }\n\n                    return carry;\n                }, {});\n        },\n\n        controlClass() {\n            return this.custom ? this.customControlClass : (\n                this.defaultControlClass + (this.plaintext ? '-plaintext' : '')\n            );\n        },\n\n        controlSizeClass() {\n            return prefix(this.size, this.controlClass);\n        },\n\n        customControlClass() {\n            return 'custom-control';\n        },\n\n        formGroupClasses() {\n            const name = prefix(this.$options.name, this.custom ? customPrefix : '');\n\n            return this.mergeClasses(name, prefix(this.size, name), {\n                'has-activity': this.activity,\n                'is-valid': !!(this.valid || this.validFeedback),\n                'is-invalid': !!(this.invalid || this.invalidFeedback)\n            });\n        },\n\n        controlClasses() {\n            return this.mergeClasses(\n                this.controlClass,\n                this.colorableClasses,\n                this.controlSizeClass,\n                (this.spacing || ''),\n                ((this.valid || this.validFeedback) ? 'is-valid' : ''),\n                ((this.invalid || this.invalidFeedback) ? 'is-invalid' : '')\n            );\n        },\n\n        hasDefaultSlot() {\n            return !!this.$slots.default;\n        },\n\n        invalidFeedback() {\n            const errors = this.getFieldErrors();\n\n            return this.error || (\n                isArray(errors) ? errors.join('<br>') : errors\n            );\n        },\n\n        validFeedback() {\n            return isArray(this.feedback) ? this.feedback.join('<br>') : this.feedback;\n        }\n\n    }\n\n};\n","export default function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n        const r = Math.random() * 16 | 0;\n        const v = c === 'x' ? r : (r & (0x3) | (0x8));\n        return v.toString(16);\n    });\n}\n","export default function hash(str) {\n    let hash = 0;\n    for(let i = 0; i < str.length; i++) {\n        hash += Math.pow(str.charCodeAt(i) * 31, str.length - i);\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash;\n}\n","import { isFunction } from '../Functions';\n\nexport default function readFile(file, progress) {\n    if(!(file instanceof File)) {\n        throw new Error('The first argument be an instance of File object.');\n    }\n\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        if(isFunction(progress)) {\n            reader.onprogress = e => progress(e, reader);\n        }\n\n        reader.onload = e => resolve(e);\n        reader.onerror = e => reject(e);\n        reader.onabort = e => reject(e);\n        reader.readAsDataURL(file);\n    });\n}\n","const STYLE_ATTRIBUTES = [\n    'font',\n    'fontFamily',\n    'fontKerning',\n    'fontSize',\n    'fontStretch',\n    'fontStyle',\n    'fontVariant',\n    'fontVariantLigatures',\n    'fontVariantCaps',\n    'fontVariantNumeric',\n    'fontVariantEastAsian',\n    'fontWeight',\n    'lineHeight',\n    'letterSpacing',\n    'padding',\n    'margin',\n    'textAlign',\n    'textAlignLast',\n    'textDecoration',\n    'textDecorationLine',\n    'textDecorationStyle',\n    'textDecorationColor',\n    'textDecorationSkipInk',\n    'textDecorationPosition',\n    'textIndent',\n    'textRendering',\n    'textShadow',\n    'textSizeAdjust',\n    'textOverflow',\n    'textTransform',\n    'width',\n    'wordBreak',\n    'wordSpacing',\n    'wordWrap'\n];\n\nfunction int(str) {\n    if(typeof str === 'number') {\n        return str;\n    }\n    else if(!str || !str.replace) {\n        return 0;\n    }\n\n    return parseInt(str.replace(/[^\\d.]+/g, ''));\n}\n\nfunction input(div, el) {\n    div.innerHTML = el.value.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n}\n\nfunction height(el) {\n    return int(el.getBoundingClientRect().height);\n}\n\nfunction style(el, attr) {\n    return window.getComputedStyle(el)[attr];\n}\n\nfunction resize(target, div, minHeight, maxHeight) {\n    const dynamicHeight = Math.max(height(div) + int(style(div, 'lineHeight')), minHeight);\n    target.style.height = ((!maxHeight || dynamicHeight < maxHeight) ? dynamicHeight : maxHeight) + 'px';\n}\n\n/*\nfunction setMinHeight(div, el) {\n    div.style.minHeight = height(el) + 'px';\n}\n*/\n\nfunction mimic(el) {\n    const div = document.createElement('div');\n    const styles = window.getComputedStyle(el);\n\n    for(let i in STYLE_ATTRIBUTES) {\n        const key = STYLE_ATTRIBUTES[i];\n\n        div.style[key] = styles[key];\n    }\n\n    div.style.position = 'absolute';\n    div.style.bottom = '100%';\n    div.style.zIndex = -1;\n    div.style.visibility = 'hidden';\n\n    return div;\n}\n\nfunction init(el, maxHeight) {\n    const div = mimic(el);\n    const minHeight = height(el);\n\n    el.addEventListener('input', event => {\n        input(div, event.target);\n        resize(el, div, minHeight, maxHeight);\n    });\n\n    document.body.appendChild(div);\n\n    input(div, el);\n    resize(el, div, minHeight, maxHeight);\n}\n\nexport default {\n\n    inserted(el, binding, vnode) {\n        if(el.tagName !== 'TEXTAREA') {\n            el = el.querySelector('textarea');\n        }\n\n        if(!el) {\n            throw new Error('A textarea is required for the v-autogrow directive.');\n        }\n\n        init(el, binding.value);\n    }\n\n};\n","import { isUndefined } from '../../Helpers/Functions';\nimport transition from '../../Helpers/Transition';\n\nfunction show(el, target, vnode) {\n    target.classList.remove('collapse');\n    target.classList.add('show');\n    target.$collapsedHeight = getComputedStyle(target).height;\n    target.classList.add('collapsing');\n\n    vnode.context.$nextTick(() => {\n        target.style.height = target.$collapsedHeight;\n    });\n\n    transition(target).then(delay => {\n        target.style.height = null;\n        target.classList.add('collapse');\n        target.classList.remove('collapsing');\n        el.classList.remove('collapsed');\n    });\n}\n\nfunction hide(el, target, vnode) {\n    target.style.height = target.$collapsedHeight;\n    target.classList.add('collapsing');\n    target.classList.remove('collapse');\n\n    vnode.context.$nextTick(() => {\n        target.style.height = 0;\n    });\n\n    transition(target).then(delay => {\n        target.style.height = null;\n        target.classList.add('collapse');\n        target.classList.remove('show', 'collapsing');\n        el.classList.add('collapsed');\n    });\n}\n\nexport default {\n\n    inserted(el, binding, vnode) {\n        if(isUndefined(binding.value) || binding.value === true) {\n            el.classList.add('collapsed');\n            el.setAttribute('data-toggle', 'collapse');\n\n            const target = el.getAttribute('data-target') || el.getAttribute('href');\n            const elements = document.querySelectorAll(target);\n\n            el.addEventListener('click', event => {\n                elements.forEach(element => {\n                    if(!element.classList.contains('show')) {\n                        show(el, element, vnode);\n                    }\n                    else {\n                        hide(el, element, vnode);\n                    }\n                });\n\n                event.preventDefault();\n            });\n\n            elements.forEach(element => {\n                /*\n                if(!element.$collapsedHeight) {\n                    element.$collapsedHeight = getComputedStyle(element).height;\n                }\n                */\n\n                if(!element.classList.contains('collapse')) {\n                    element.classList.add('collapse');\n                }\n            });\n        }\n    }\n\n};\n","import { isObject, isString } from '../Functions';\n\nexport default function instantiate(Vue, Component, options) {\n    if(Component instanceof Vue) {\n        return Component;\n    }\n\n    if(isObject(Component)) {\n        Component = Vue.extend(Component);\n    }\n    else if(isString(Component)) {\n        const text = Component;\n\n        Component = Vue.extend({\n\n            functional: true,\n\n            render(h, context) {\n                return this._v(text);\n            }\n\n        });\n    }\n\n    return new Component(options);\n}\n","import Modal from '../../Components/Modal';\nimport instantiate from '../../Helpers/Instantiate';\nimport { isObject, isFunction, deepExtend } from '../../Helpers/Functions';\n\nexport default function(Vue, options) {\n    Vue.prototype.$modal = function(Component, options) {\n        if(!isObject(options)) {\n            options = {};\n        }\n\n        const instance = instantiate(Vue, Modal, options.modal);\n\n        instance.$content = instantiate(Vue, Component, options.content);\n        instance.$slots.default = [instance.$content.$mount()._vnode];\n        instance.$mount(\n            document.body.appendChild(document.createElement('div'))\n        );\n\n        return instance;\n    };\n\n    Vue.prototype.$alert = function(title, Component, options) {\n        return new Promise((resolve, reject) => {\n            const modal = this.$modal(Component, deepExtend(options, {\n                modal: {\n                    propsData: {\n                        title: title,\n                        type: 'alert'\n                    }\n                }\n            }));\n\n            modal.$on('confirm', event => {\n                modal.close();\n            });\n\n            modal.$on('close', event => {\n                resolve(modal);\n            });\n        });\n    };\n\n    Vue.prototype.$confirm = function(title, Component, options) {\n        return new Promise((resolve, reject) => {\n            const modal = this.$modal(Component || title, deepExtend(options, {\n                modal: {\n                    propsData: {\n                        title: Component ? title : null,\n                        type: 'confirm'\n                    }\n                }\n            }));\n\n            modal.$on('cancel', event => {\n                reject(modal);\n            });\n\n            modal.$on('confirm', event => {\n                resolve(modal.close());\n            });\n        });\n    };\n\n    Vue.prototype.$prompt = function(title, Component, options, predicate) {\n        return new Promise((resolve, reject) => {\n            if(isFunction(options)) {\n                predicate = options;\n                options = {};\n            }\n            else if(isObject(options) && isFunction(options.predicate)) {\n                predicate = options.predicate;\n            }\n            else if(!isFunction(predicate)) {\n                predicate = () => true;\n            }\n\n            const modal = this.$modal(Component, deepExtend(options, {\n                modal: {\n                    propsData: {\n                        title: title,\n                        type: 'prompt'\n                    }\n                }\n            }));\n\n            modal.$on('cancel', event => {\n                reject(modal);\n            });\n\n            modal.$on('confirm', event => {\n                const succeed = () => resolve(modal.close());\n                const fail = () => reject(modal.close());\n\n                if(predicate(modal, succeed, fail) === true) {\n                    succeed();\n                }\n            });\n        });\n    };\n}\n","import { isObject, deepExtend } from '../../Helpers/Functions';\nimport instantiate from '../../Helpers/Instantiate';\nimport Overlay from '../../Components/Overlay';\n\nexport default function(Vue, options) {\n    Vue.prototype.$overlay = function(target, Component, options) {\n        if(!isObject(options)) {\n            options = {};\n        }\n\n        if(!target.$overlay) {\n            target.$overlay = instantiate(Vue, Overlay, deepExtend(options.overlay, {\n                propsData: {\n                    target: target\n                }\n            }));\n\n            target.$overlay.$mount(\n                document.body.appendChild(document.createElement('div'))\n            );\n\n            target.$overlay.$content = instantiate(Vue, Component, options.content);\n            target.$overlay.$slots.default = [target.$overlay.$content.$mount()._vnode];\n            target.$overlay.$nextTick(() => {\n                target.$overlay.open();\n            });\n        }\n\n        return target.$overlay;\n    };\n}\n","import instantiate from '../../Helpers/Instantiate';\nimport Popover from '../../Components/Popover';\nimport { isObject, deepExtend } from '../../Helpers/Functions';\n\nexport default function(Vue, options) {\n    Vue.prototype.$popover = function(target, Component, options) {\n        if(!isObject(options)) {\n            options = {};\n        }\n\n        if(!target.$popover) {\n            target.$popover = instantiate(Vue, Popover, deepExtend(options.popover, {\n                propsData: {\n                    target: target\n                }\n            }));\n\n            target.$popover.$mount(\n                document.body.appendChild(document.createElement('div'))\n            );\n\n            const content = instantiate(Vue, Component, options.content);\n\n            target.$popover.$slots.default = [content.$mount()._vnode];\n            target.$popover.$nextTick(() => {\n                target.$popover.open();\n            });\n        }\n\n        return target.$popover;\n    };\n}\n","<template>\n    <div class=\"activity-indicator\" :class=\"classes\">\n        <div v-for=\"i in nodes\"></div>\n    </div>\n</template>\n\n<script>\nexport default {\n\n    props: {\n        nodes: {\n            type: Number,\n            default: 3\n        },\n        size: {\n            type: String,\n            default: ''\n        },\n        prefix: {\n            type: String,\n            default: 'activity-indicator-'\n        }\n    },\n\n    computed: {\n        classes: function() {\n            const classes = {};\n\n            classes[this.$options.name] = !!this.$options.name;\n            classes[this.prefix + this.size.replace(this.prefix, '')] = !!this.size;\n\n            return classes;\n        }\n    }\n\n};\n</script>\n","<template>\n    <div v-if=\"center\" class=\"center-wrapper\" :class=\"{'position-relative': relative, 'position-fixed': fixed}\" :style=\"style\">\n        <div class=\"center-content d-flex flex-column align-items-center\">\n            <component :is=\"component\" :size=\"size\" :prefix=\"prefix\"/>\n            <div v-if=\"label\" v-html=\"label\" class=\"activity-indicator-label\"/>\n        </div>\n    </div>\n    <div v-else class=\"d-flex flex-column justify-content-center align-items-center\" :style=\"style\">\n        <component :is=\"component\" :size=\"size\" :prefix=\"prefix\"/>\n        <div v-if=\"label\" v-html=\"label\" class=\"activity-indicator-label\"/>\n    </div>\n</template>\n\n<script>\nimport unit from '../../Helpers/Unit';\nimport BaseType from './Types/BaseType';\nimport ActivityIndicatorDots from './Types/Dots';\nimport { kebabCase } from '../../Helpers/Functions';\nimport ActivityIndicatorSpinner from './Types/Spinner';\n\nexport default {\n\n    name: 'activity-indicator',\n\n    extends: BaseType,\n\n    props: {\n\n        center: Boolean,\n\n        fixed: Boolean,\n\n        label: String,\n\n        relative: Boolean,\n\n        type: {\n            type: String,\n            default: 'dots'\n        },\n\n        height: [String, Number],\n\n        maxHeight: [String, Number],\n\n        minHeight: [String, Number],\n\n        width: [String, Number],\n\n        maxWidth: [String, Number],\n\n        minWidth: [String, Number]\n\n    },\n\n    components: {\n        ActivityIndicatorDots,\n        ActivityIndicatorSpinner\n    },\n\n    computed: {\n\n        style() {\n            return {\n                width: unit(this.width),\n                maxWidth: unit(this.maxWidth),\n                minWidth: unit(this.minWidth),\n                height: unit(this.height),\n                maxHeight: unit(this.maxHeight),\n                minHeight: unit(this.minHeight)\n            };\n        },\n\n        component() {\n            return kebabCase(this.prefix + this.type.replace(this.prefix, ''));\n        }\n    }\n\n};\n</script>\n","<template>\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" @click=\"onClick\">\n        <span aria-hidden=\"true\">&times;</span>\n    </button>\n</template>\n\n<script>\nexport default {\n\n    name: 'alert-close',\n\n    methods: {\n\n        onClick(event) {\n            this.$emit('click', event);\n        }\n\n    }\n\n};\n</script>\n","<template>\n    <h4 class=\"alert-heading\"><slot/></h4>\n</template>\n\n<script>\nexport default {\n\n    name: 'alert-heading'\n\n};\n</script>\n","import prefix from '../../Helpers/Prefix/Prefix';\n\nexport default {\n\n    props: {\n\n        /**\n         * The variant attribute\n         *\n         * @property String\n         */\n        variant: {\n            type: String,\n            default: 'primary'\n        }\n\n    },\n\n    computed: {\n\n        variantClassPrefix() {\n            return this.$options.name;\n        },\n\n        variantClass() {\n            return prefix(this.variant, this.variantClassPrefix);\n        }\n\n    }\n\n};\n","import { each, extend, isArray, isObject } from '../../Helpers/Functions';\n\nexport default {\n\n    methods: {\n\n        mergeClasses() {\n            let classes = {};\n\n            each([].slice.call(arguments), arg => {\n                if(isObject(arg)) {\n                    extend(classes, arg);\n                }\n                else if(isArray(arg)) {\n                    classes = classes.concat(arg);\n                }\n                else if(arg) {\n                    classes[arg] = true;\n                }\n            });\n\n            return classes;\n        }\n\n    }\n\n};\n","<template>\n    <div class=\"progress\" :style=\"{'height': formattedHeight}\">\n        <div class=\"progress-bar\" role=\"progressbar\" :style=\"styles\" :class=\"mergeClasses(progressClasses, variantClass)\" :aria-valuenow=\"offsetValue\" :aria-valuemin=\"min\" :aria-valuemax=\"max\">\n            <span v-if=\"!!label\"><template v-if=\"label !== true\">{{label}}</template> {{offsetValue}}%</span>\n            <span v-else><slot/></span>\n        </div>\n    </div>\n</template>\n\n<script>\nimport unit from '../../Helpers/Unit';\nimport Variant from '../../Mixins/Variant';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'progress-bar',\n\n    mixins: [\n        Variant,\n        MergeClasses\n    ],\n\n    props: {\n\n        /**\n         * A custom color to be applied inline in the styles vs a contextual\n         * variant.\n         *\n         * @property String\n         */\n        color: String,\n\n        /**\n         * The progress bar percentage value\n         *\n         * @property String\n         */\n        value: {\n            type: Number,\n            required: true\n        },\n\n        /**\n         * The height of the progress bar\n         *\n         * @property String\n         */\n        height: [Number, String],\n\n        /**\n         * Show the progress bar value as a label inside the bar\n         *\n         * @property String\n         */\n        label: [String, Boolean],\n\n        /**\n         * Should the progress bar appear with stripes\n         *\n         * @property String\n         */\n        striped: Boolean,\n\n        /**\n         * Should the progress bar appear with animated stripes\n         *\n         * @property String\n         */\n        animated: Boolean,\n\n        /**\n         * The minimum value\n         *\n         * @property String\n         */\n        min: {\n            type: Number,\n            default: 0\n        },\n\n        /**\n         * The max value\n         *\n         * @property String\n         */\n        max: {\n            type: Number,\n            default: 100\n        }\n\n    },\n\n    computed: {\n\n        variantClassPrefix() {\n            return 'bg';\n        },\n\n        offsetValue() {\n            return this.value / this.max * 100;\n        },\n\n        formattedHeight() {\n            return this.height ? unit(this.height) : null;\n        },\n\n        progressClasses() {\n            return {\n                'progress-bar-striped': this.striped,\n                'progress-bar-animated': this.animated\n            };\n        },\n\n        styles() {\n            return {\n                width: `${this.offsetValue}%`,\n                background: `${this.color} !important`\n            };\n        }\n\n    }\n\n};\n</script>\n","<template>\n    <div class=\"alert\" :class=\"mergeClasses(variantClass, {show: isVisible, fade: fade})\" role=\"alert\">\n        <alert-heading v-if=\"title || heading\">{{ title || heading }}</alert-heading>\n        <slot/>\n        <alert-close v-if=\"dismissible\" @click=\"dismiss()\"/>\n        <progress-bar v-if=\"typeof show === 'number'\" :variant=\"variant\" :height=\"5\" :value=\"dismissCount\" :max=\"show\" class=\"my-3\"/>\n    </div>\n</template>\n\n<script>\nimport AlertClose from './AlertClose';\nimport AlertHeading from './AlertHeading';\nimport ProgressBar from '../ProgressBar';\nimport Variant from '../../Mixins/Variant';\nimport transition from '../../Helpers/Transition';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'alert',\n\n    components: {\n        AlertClose,\n        AlertHeading,\n        ProgressBar\n    },\n\n    mixins: [\n        Variant,\n        MergeClasses\n    ],\n\n    props: {\n\n        /**\n         * Is the alert dismissible\n         *\n         * @property Boolean\n         */\n        dismissible: Boolean,\n\n        /**\n         * The alert's title/heading\n         *\n         * @property Boolean\n         */\n        heading: String,\n\n        /**\n         * The alert's title/heading\n         *\n         * @property Boolean\n         */\n        title: String,\n\n        /**\n         * Should the alert fade when hidden\n         *\n         * @property Boolean\n         */\n        fade: {\n            type: Boolean,\n            default: true\n        },\n\n        /**\n         * Should the alert be visible by default. If passed a number, alert\n         * will be shown for the number of seconds that are passed.\n         *\n         * @property Boolean\n         */\n        show: {\n            type: [Number, Boolean],\n            default: true\n        }\n\n    },\n\n    methods: {\n\n        dismiss() {\n            transition(this.$el).then(delay => {\n                this.$emit('dismissed');\n            });\n\n            this.$emit('update:visible', this.isVisible = false);\n        }\n\n    },\n\n    mounted() {\n        if(typeof this.show === 'number') {\n            const el = this.$el.querySelector('.progress-bar');\n\n            this.$emit('dismiss-countdown', this.dismissCount = this.show);\n\n            const interval = setInterval(() => {\n                this.$emit('dismiss-countdown', this.dismissCount -= 1);\n\n                if(!this.dismissCount) {\n                    clearInterval(interval);\n                    transition(el).then(delay => this.dismiss());\n                }\n            }, 1000);\n        }\n    },\n\n    data() {\n        return {\n            dismissCount: this.show,\n            isVisible: this.show\n        };\n    }\n\n};\n</script>\n","<template>\n    <a class=\"alert-link\"><slot/></a>\n</template>\n\n<script>\nexport default {\n\n    name: 'alert-link'\n\n};\n</script>\n","<template>\n    <a v-if=\"href\" :href=\"href\" class=\"badge\" :class=\"mergeClasses(classes, variantClass)\">\n        <slot>{{label}}</slot>\n        <span class=\"sr-only\" v-html=\"accessibility\"/>\n    </a>\n    <span v-else class=\"badge\" :class=\"mergeClasses(classes, variantClass)\">\n        <slot>{{label}}</slot>\n        <span class=\"sr-only\" v-html=\"accessibility\"/>\n    </span>\n</template>\n\n<script>\nimport prefix from '../../Helpers/Prefix';\nimport Variant from '../../Mixins/Variant';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'badge',\n\n    mixins: [\n        Variant,\n        MergeClasses\n    ],\n\n    props: {\n\n        /**\n         * The screen reader accessibility label.\n         *\n         * @property String\n         */\n        accessibility: String,\n\n        /**\n         * If an href attribute is passed, the badge becomes an anchor.\n         *\n         * @property String\n         */\n        href: String,\n\n        /**\n         * The badge appear as pill shaped.\n         *\n         * @property String\n         */\n        pill: Boolean,\n\n        /**\n         * The badge label.\n         *\n         * @property String\n         */\n        label: [Number, String],\n\n        /**\n         * The badge appear as secondary in size to the parent element.\n         *\n         * @property String\n         */\n        secondary: Boolean\n\n    },\n\n    computed: {\n\n        classes() {\n            return prefix({\n                'pill': this.pill,\n                'secondary': this.secondary\n            }, this.$options.name);\n        }\n    }\n};\n</script>\n","import { isObject } from '../Helpers/Functions';\n\nexport default class BaseClass {\n    constructor(attributes) {\n        this.setAttribute(attributes);\n    }\n\n    getAttribute(key) {\n        return this.hasOwnProperty(key) ? this[key] : null;\n    }\n\n    getAttributes() {\n        const attributes = {};\n\n        Object.getOwnPropertyNames(this).forEach(key => {\n            attributes[key] = this.getAttribute(key);\n        });\n\n        return attributes;\n    }\n\n    getPublicAttributes() {\n        return Object.keys(this.getAttributes())\n            .filter(key => {\n                return !key.match(/^\\$/);\n            })\n            .reduce((obj, key) => {\n                obj[key] = this.getAttribute(key);\n\n                return obj;\n            }, {});\n    }\n\n    setAttribute(key, value) {\n        if(isObject(key)) {\n            this.setAttributes(key);\n        }\n        else {\n            this[key] = value;\n        }\n    }\n\n    setAttributes(values) {\n        for(const i in values) {\n            this.setAttribute(i, values[i]);\n        }\n    }\n}\n","import BaseClass from '../../Support/BaseClass';\nimport { extend } from '../../Helpers/Functions';\n\nexport default class Response extends BaseClass {\n    constructor(data) {\n        super(extend({\n            date: new Date()\n        }, data));\n    }\n\n    get data() {\n        return this.$data;\n    }\n\n    set data(value) {\n        this.$data = value;\n    }\n\n    get error() {\n        return this.$error;\n    }\n\n    set error(value) {\n        this.$error = value;\n    }\n\n    get request() {\n        return this.$request;\n    }\n\n    set request(value) {\n        this.$request = value;\n    }\n\n    get date() {\n        return this.$date;\n    }\n\n    set date(value) {\n        this.$date = value;\n    }\n\n    get success() {\n        return this.status >= 200 && this.status < 300;\n    }\n\n    get failed() {\n        return !this.success;\n    }\n}\n","import axios from 'axios';\nimport Response from './Response';\nimport BaseClass from '../../Support/BaseClass';\nimport { extend, deepExtend, isObject } from '../../Helpers/Functions';\n\nconst DEFAULTS = {\n    transformRequest: [],\n    transformResponse: []\n};\n\nexport default class Request extends BaseClass {\n    constructor(method, url, attributes) {\n        super({\n            options: {},\n            data: {},\n            headers: {},\n            params: {},\n            url: url,\n            method: method\n        });\n\n        if(isObject(attributes)) {\n            this.setAttribute(attributes);\n        }\n    }\n\n    send(attributes) {\n        this.sentAt = new Date();\n        this.setAttributes(attributes);\n\n        return new Promise((resolve, reject) => {\n            axios(this.options).then(\n                response => resolve(this.response = new Response(response)),\n                error => reject(this.response = new Response(error.response))\n            );\n        });\n    }\n\n    set cancel(value) {\n        this.$cancel = value;\n    }\n\n    get cancel() {\n        return this.$cancel || (() => {\n            throw new Error('The request has not been sent yet.');\n        });\n    }\n\n    get options() {\n        return deepExtend({\n            cancelToken: new axios.CancelToken(cancel => {\n                this.cancel = cancel;\n\n                return cancel;\n            })\n        }, DEFAULTS, this.getPublicAttributes());\n    }\n\n    set options(attributes) {\n        this.setAttribute(attributes);\n    }\n\n    get response() {\n        return this.$response;\n    }\n\n    set response(value) {\n        this.$response = value;\n    }\n\n    get error() {\n        return this.$error;\n    }\n\n    set error(value) {\n        this.$error = value;\n    }\n\n    get passed() {\n        return !!this.response && !this.error;\n    }\n\n    get failed() {\n        return !!this.response && !!this.error;\n    }\n\n    static get transform() {\n        return {\n            request: this.transformRequest,\n            response: this.transformResponse\n        };\n    }\n\n    static get defaults() {\n        return DEFAULTS;\n    }\n\n    static set defaults(value) {\n        extend(DEFAULTS, value);\n    }\n\n    static transformRequest(fn) {\n        DEFAULTS.transformRequest.push(fn);\n    }\n\n    static transformResponse(fn) {\n        DEFAULTS.transformResponse.push(fn);\n    }\n\n    static get(url, attributes) {\n        return this.make('get', url).send(attributes);\n    }\n\n    static post(url, attributes) {\n        return this.make('post', url, attributes).send();\n    }\n\n    static put(url, attributes) {\n        return this.make('put', url, attributes).send();\n    }\n\n    static patch(url, data, attributes) {\n        return this.make('path', url, attributes).send();\n    }\n\n    static delete(url, attributes) {\n        return this.make('delete', url, attributes).send();\n    }\n\n    static make(method, url, attributes) {\n        return new this(method, url, attributes);\n    }\n}\n","import Request from '../Request';\nimport { each, isNull, pickBy, isArray, isObject, isUndefined } from '../../Helpers/Functions';\n\nexport default class Model {\n    /**\n     * Construct the model instance\n     *\n     * @param data object\n     * @return void\n     */\n    constructor(data = {}, params = {}) {\n        this.$request = null;\n        this.$key = this.key();\n        this.$files = this.files();\n        this.$properties = this.properties();\n\n        each(params, (value, key) => {\n            this[key] = value;\n        });\n\n        this.initialize(data);\n    }\n\n    /**\n     * Initialize the model with the given data without considering the data\n     * as \"changed\".\n     *\n     * @param data object\n     * @return this\n     */\n    initialize(data) {\n        this.$exists = false;\n        this.$changed = {};\n        this.$attributes = {};\n        this.fill(data);\n        this.$initialized = true;\n\n        return this;\n    }\n\n    /**\n     * Define the corresponding API endpoint slug\n     *\n     * @return string\n     */\n    endpoint() {\n        //\n    }\n\n    /**\n     * Define the corresponding uri schema.\n     *\n     * @return string\n     */\n    uri() {\n        return [\n            (this.endpoint() || ''),\n            (this.exists() ? this.id() : null)\n        ]\n            .filter(value => !!value)\n            .concat([].slice.call(arguments))\n            .join('/');\n    }\n\n    /**\n     * Return the primary key value for the model\n     *\n     * @return {Number}\n     */\n    id() {\n        return this.get(this.key());\n    }\n\n    /**\n     * Define a primary key. This is used to determine if the model exists and\n     * which endpoint to use.\n     *\n     * @return string\n     */\n    key() {\n        return 'id';\n    }\n\n    /**\n     * Return an array of properties that are sent to the API. If no properties\n     * are defined, then all the attributes will be included in the request.\n     *\n     * @return array\n     */\n    properties() {\n        return [];\n    }\n\n    /**\n     * Return an array of file properties that are sent to the API. If no fies\n     * are defined, then request will always be sent with JSON vs. multipart.\n     *\n     * @return array\n     */\n    files() {\n        return [];\n    }\n\n    /**\n     * Set the attributes in the model with the data given.\n     *\n     * @param data object\n     * @return this\n     */\n    fill(data) {\n        this.setAttributes(data);\n\n        return this;\n    }\n\n    /**\n     * Get one or more attributes from the model.\n     *\n     * @param data string|array\n     * @return array|mixed\n     */\n    get(key) {\n        if(isArray(key)) {\n            return this.getAttributes().filter((value, i) => {\n                return key.indexOf(i) !== -1;\n            });\n        }\n        else {\n            return this.getAttribute(key);\n        }\n    }\n\n    /**\n     * Alias for setAttributes() except this method returns `this`. This method\n     * also accepts an array of values or key/value pair.\n     *\n     * @return this\n     */\n    set(key, value = undefined) {\n        if(isArray(key) || isObject(key)) {\n            this.setAttributes(key);\n        }\n        else {\n            this.setAttribute(key, value);\n        }\n\n        return this;\n    }\n\n    /**\n     * Get all the defined attributes.\n     *\n     * @return array\n     */\n    getAttributes() {\n        return this.$attributes;\n    }\n\n    /**\n     * Get the changed attributes\n     *\n     * @return array\n     */\n    getChangedAttributes() {\n        return Object.keys(this.$changed);\n    }\n\n    /**\n     * Get the changed attributes\n     *\n     * @return array\n     */\n    getOriginalValue(key) {\n        return this.$changed[key] || this.$attributes[key];\n    }\n\n    /**\n     * Get the Request object.\n     *\n     * @return {mixed}\n     */\n    getRequest() {\n        return this.$request;\n    }\n\n    /**\n     * Get the unchanged attributes\n     *\n     * @return array\n     */\n    getUnchangedAttributes() {\n        return Object.keys(this.$attributes).filter(key => !(key in this.$changed));\n    }\n\n    /**\n     * Get an attribute with a given key. If no key is defined\n     *\n     * @param key string\n     * @param default undefined|mixed\n     * @return array\n     */\n    getAttribute(key, value = undefined) {\n        return this.$attributes[key] || value;\n    }\n\n    /**\n     * Set an array or object of data as attributes.\n     *\n     * @param attributes array|object\n     * @return void\n     */\n    setAttributes(data) {\n        if(isArray(data) || isObject(data)) {\n            each(data, (value, key) => {\n                this.setAttribute(key, value);\n            });\n        }\n    }\n\n    /**\n     * Set an attribute with a given key/value pair. This will track the changes\n     * in the model within the `this.$changed` property. If the primary key\n     * is set, it will also change the `this.$exists` property.\n     *\n     * @param key string\n     * @param value mixed\n     * @return void\n     */\n    setAttribute(key, value) {\n        if(this.getAttribute(key) !== value) {\n            this.handleAttributeChange(key, value);\n\n            if(isUndefined(value)) {\n                delete this.$attributes[key];\n            }\n            else {\n                this.$attributes[key] = value;\n            }\n        }\n    }\n\n    /**\n     * Revert the model to its original state.\n     *\n     * @return bool\n     */\n    revert() {\n        each(this.$changed, (value, key) => {\n            if(!isUndefined(value)) {\n                this.$attributes[key] = value;\n            }\n            else {\n                delete this.$attributes[key];\n            }\n        });\n\n        this.$changed = {};\n    }\n\n    /**\n     * Returns if the model has a primary key set.\n     *\n     * @return bool\n     */\n    exists() {\n        return !!this.$exists;\n    }\n\n    /**\n     * Returns the model been changed or not.\n     *\n     * @return bool\n     */\n    hasChanged(key) {\n        return !key ? this.getChangedAttributes().length > 0 : !isUndefined(this.$changed[key]);\n    }\n\n    /**\n     * Does the model have any File objects. If so, need to send as multipart.\n     *\n     * @return bool\n     */\n    hasFiles() {\n        function count(files, total = 0) {\n            return Object.keys(files).reduce((carry, key) => {\n                const value = files[key];\n\n                if(isArray(value)) {\n                    return carry + count(value, total);\n                }\n                else if(value instanceof File || value instanceof FileList) {\n                    return carry + 1;\n                }\n                else {\n                    return carry;\n                }\n            }, total);\n        }\n\n        return count(this.toJSON()) !== 0;\n    }\n\n    /**\n     * Handle settings the $changed attributes when an attribute value is set.\n     *\n     * @param key string\n     * @param value mixed\n     * @return void\n     */\n    handleAttributeChange(key, value) {\n        if(this.$initialized) {\n            if(this.$changed[key] === value) {\n                delete this.$changed[key];\n            }\n            else if(!(key in this.$changed)) {\n                this.$changed[key] = this.getAttribute(key);\n            }\n        }\n\n        this.handlePrimaryKeyChange(key, value);\n    }\n\n    /**\n     * Set an array or object of data as attributes.\n     *\n     * @param key string\n     * @param value mixed\n     * @return void\n     */\n    handlePrimaryKeyChange(key, value) {\n        if(this.$key === key) {\n            this.$exists = !isUndefined(value) && !isNull(value);\n        }\n    }\n\n    /**\n     * Save the model to the database\n     *\n     * @param data object\n     * @return bool\n     */\n    save(data = {}, config = {}) {\n        this.fill(data);\n\n        return new Promise((resolve, reject) => {\n            const data = !this.hasFiles() ? this.toJSON() : this.toFormData();\n            const uri = config.uri || this.uri();\n            const method = config.method || (\n                !this.exists() || this.hasFiles() ? 'post' : 'put'\n            );\n\n            this.$request = this.constructor.request(method, uri, config);\n            this.$request.send({\n                data: data\n            }).then(response => resolve(this.fill(response)), reject);\n        });\n    }\n\n    /**\n     * Delete an existing model\n     *\n     * @param  {object} config\n     * @return {bool}\n     */\n    delete(config = {}) {\n        return new Promise((resolve, reject) => {\n            if(!this.exists()) {\n                reject(new Error('The model must have a primary key before it can be delete.'));\n            }\n\n            this.$request = this.constructor.request('delete', config.uri || this.uri(), config);\n            this.$request.send().then(response => {\n                resolve(response);\n            }, reject);\n        });\n    }\n\n    /**\n     * Cancel the current HTTP request if one exists.\n     *\n     * @return {self}\n     */\n    cancel() {\n        if(this.$request) {\n            this.$request.cancel();\n        }\n\n        return this;\n    }\n\n    /**\n     * Convert the Model instance to a FormData instance\n     *\n     * @return Object\n     */\n    toFormData() {\n        const form = new FormData();\n\n        each(this.toJSON(), (value, key) => {\n            if(isArray(value)) {\n                each(value, item => {\n                    if(!(item instanceof File) && (isObject(item) || isArray(item))) {\n                        item = JSON.stringify(item);\n                    }\n\n                    form.append(key.replace(/(.+)(\\[.+\\]?)$/, '$1') + '[]', item);\n                });\n            }\n            else if(!(value instanceof File) && isObject(value)) {\n                form.append(key, JSON.stringify(value));\n            }\n            else if(!isNull(value)) {\n                form.append(key, value);\n            }\n        });\n\n        return form;\n    }\n\n    /**\n     * Convert the instance to JSON payload\n     *\n     * @return Object\n     */\n    toJSON() {\n        return pickBy(this.$attributes, (value, key) => {\n            return !this.$properties.length || (\n                key === this.key() || this.$properties.indexOf(key) !== -1\n            );\n        });\n    }\n\n    /**\n     * Convert the model to a string\n     *\n     * @return String\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n\n    /**\n     * Alias for toJSON\n     *\n     * @return Object\n     */\n    toJson() {\n        return this.toJSON();\n    }\n\n    /**\n     * Search for a collection of models\n     *\n     * @param data object\n     * @return bool\n     */\n    static search(params = {}, config = {}) {\n        const model = new this();\n\n        return new Promise((resolve, reject) => {\n            model.$request = this.request('get', (config.uri || model.uri()), config);\n            model.$request.send().then(response => {\n                resolve(response);\n            }, errors => {\n                reject(errors);\n            });\n        });\n    }\n\n    /**\n     * Find an existing model by id\n     *\n     * @param data object\n     * @return bool\n     */\n    static find(id, config = {}) {\n        return new Promise((resolve, reject) => {\n            const model = new this();\n            model.$request = this.request('get', (config.uri || model.uri(id)), config);\n            model.$request.send().then(response => {\n                resolve(model.initialize(response.data));\n            }, error => {\n                reject(error);\n            });\n        });\n    }\n\n    /**\n     * Create a request from the model data\n     *\n     * @param data object\n     * @return bool\n     */\n    static request(method, url, config = {}) {\n        return Request.make(method, url, config);\n    }\n}\n","<template>\n    <form @submit.prevent=\"onSubmit\" :class=\"{'form-inline': inline}\" :novalidate=\"novalidate\">\n        <slot></slot>\n    </form>\n</template>\n\n<script>\nimport Model from '../../Http/Model/Model';\nimport { isFunction } from '../../Helpers/Functions';\n\nexport default {\n\n    props: {\n\n        /**\n         * The Model method used to send the request.\n         *\n         * @property Boolean\n         */\n        method: {\n            type: String,\n            default: 'save',\n            validate(value) {\n                return this.model && isFunction(this.model[value]);\n            }\n        },\n\n        /**\n         * An object of form data\n         *\n         * @property Object\n         */\n        data: {\n            type: Object,\n            default: () => {\n                return {};\n            }\n        },\n\n        /**\n         * A JSON object of request headers\n         *\n         * @property Object\n         */\n        headers: Object,\n\n        /**\n         * Display the form fields inline\n         *\n         * @property Object\n         */\n        model: {\n            type: Object,\n            validate(value) {\n                return value instanceof Model;\n            }\n        },\n\n        /**\n         * Display the form fields inline\n         *\n         * @property Boolean\n         */\n        inline: Boolean,\n\n        /**\n         * A callback function for the `submit` event\n         *\n         * @property Boolean\n         */\n        novalidate: {\n            type: Boolean,\n            default: true\n        },\n\n        /**\n         * A JSON object of key/value pairs to build the query string.\n         *\n         * @property Object\n         */\n        query: Object,\n\n        /**\n         * A URI or URL used to redirect user after form submits successfully.\n         *\n         * @property Function|String\n         */\n        redirect: [Object, String, Function],\n\n        /**\n         * A callback function for the `submit` event\n         *\n         * @property Function\n         */\n        onSubmit: {\n            type: Function,\n            default(event) {\n                this.model && this.submit(event);\n            }\n        },\n\n        /**\n         * A callback function for the `submit:success` event\n         *\n         * @property Function\n         */\n        onSubmitSuccess: {\n            type: Function,\n            default(event, data) {\n                this.$emit('submit:success', event, data);\n                this.$emit('submit:complete', event, true, data);\n\n                if(this.redirect && isFunction(this.redirect)) {\n                    this.redirect(this);\n                }\n                else if(this.redirect && this.$router) {\n                    this.$router.push(this.redirect);\n                }\n            }\n        },\n\n        /**\n         * A callback function for the `submit:success` event\n         *\n         * @property Function\n         */\n        onSubmitFailed: {\n            type: Function,\n            default(event, errors) {\n                this.$emit('submit:failed', event, errors);\n                this.$emit('submit:complete', event, false, errors);\n            }\n        }\n\n    },\n\n    methods: {\n\n        submit(event) {\n            this.$emit('submit', event);\n\n            return this.model[this.method](this.data, {\n                query: this.query,\n                headers: this.headers,\n                onUploadProgress: event => {\n                    this.$emit('submit:progress', event);\n                }\n            }).then((data) => {\n                this.onSubmitSuccess(event, data);\n            }, (errors) => {\n                this.onSubmitFailed(event, errors);\n            });\n        }\n\n    },\n\n    data() {\n        return {\n            errors: {}\n        };\n    }\n\n};\n</script>\n","<template>\n    <li class=\"breadcrumb-item\" :class=\"{'active': active}\" :aria-current=\"active ? 'page' : false\">\n        <a v-if=\"!active && href\" :href=\"href\">\n            <slot>{{label}}</slot>\n        </a>\n        <router-link v-else-if=\"!active && to\" :to=\"to\">\n            <slot>{{label}}</slot>\n        </router-link>\n        <template v-else>\n            <slot>{{label}}</slot>\n        </template>\n    </li>\n</template>\n\n<script>\nexport default {\n\n    name: 'breadcrumb-item',\n\n    props: {\n\n        /**\n         * Is the item active?\n         *\n         * @prop {Boolean}\n         */\n        active: Boolean,\n\n        /**\n         * An href attribute\n         *\n         * @prop {String}\n         */\n        href: String,\n\n        /**\n         * An breadcrumb label\n         *\n         * @prop {String}\n         */\n        label: String,\n\n        /**\n         * The to attribute which is passed to the <router-link> component.\n         *\n         * @prop {Object}\n         */\n        to: [String, Object]\n\n    }\n\n};\n</script>\n","<template>\n    <nav aria-label=\"breadcrumb\">\n        <ol class=\"breadcrumb\">\n            <breadcrumb-item\n                v-if=\"items.length\"\n                v-for=\"(item, i) in items\"\n                v-bind=\"item\"\n                :key=\"i\"\n                :current=\"i === item.length - 1\"\n            />\n            <slot/>\n        </ol>\n    </nav>\n</template>\n\n<script>\nimport BreadcrumbItem from './BreadcrumbItem';\n\nexport default {\n\n    name: 'breadcrumb',\n\n    components: {\n        BreadcrumbItem\n    },\n\n    props: {\n\n        /**\n         * An array of breadcrumbs\n         *\n         * @prop {Array}\n         */\n        items: Array\n\n    }\n\n};\n</script>\n","import prefix from '../../Helpers/Prefix/Prefix';\n\nexport default {\n\n    props: {\n\n        /**\n         * The size of the form control\n         *\n         * @property String\n         */\n        size: {\n            type: String,\n            default: 'md',\n            validate: value => ['sm', 'md', 'lg'].indexOf(value) !== -1\n        }\n\n    },\n\n    computed: {\n\n        sizeableClassPrefix() {\n            return this.$options.name;\n        },\n\n        sizeableClass() {\n            return prefix(this.size, this.sizeableClassPrefix);\n        }\n\n    }\n\n};\n","export default {\n\n    computed: {\n\n        colorableClasses() {\n            const classes = {};\n\n            for(let i in this.$attrs) {\n                if(i.match(/^bg|text|border|bg-gradient-/)) {\n                    classes[i] = true;\n                }\n            }\n\n            return classes;\n        }\n\n    }\n\n};\n","<template>\n    <router-link v-if=\"to\" :to=\"to\" :disabled=\"disabled\" :class=\"classes\" @click=\"onClick\" role=\"button\">\n        <slot/>\n    </router-link>\n    <a v-else-if=\"href\" :href=\"href\" :disabled=\"disabled\" :class=\"classes\" @click=\"onClick\" role=\"button\">\n        <slot/>\n    </a>\n    <label v-else-if=\"label\" :disabled=\"disabled\" :class=\"classes\" @click=\"onClick\" role=\"button\">\n        <slot/>\n    </label>\n    <button v-else :type=\"type\" :disabled=\"disabled\" :class=\"classes\" @click=\"onClick\">\n        <slot/>\n    </button>\n</template>\n\n<script>\nimport Variant from '../../Mixins/Variant';\nimport Sizeable from '../../Mixins/Sizeable';\nimport Colorable from '../../Mixins/Colorable';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'btn',\n\n    mixins: [\n        Variant,\n        Sizeable,\n        Colorable,\n        MergeClasses\n    ],\n\n    props: {\n\n        /**\n         * Display button with active state\n         *\n         * @property String\n         */\n        active: Boolean,\n\n        /**\n         * Display button with blocked state\n         *\n         * @property String\n         */\n        block: Boolean,\n\n        /**\n         * Display button with disabled state\n         *\n         * @property String\n         */\n        disabled: Boolean,\n\n        /**\n         * If an href is passed, button is an router-link element\n         *\n         * @property Boolean\n         */\n        href: String,\n\n        /**\n         * Should use <label> as the element for the button. Used for inputs\n         * wrappers (toggles).\n         *\n         * @property Boolean\n         */\n        label: Boolean,\n\n        /**\n         * Display as an outline button\n         *\n         * @property String\n         */\n        outline: Boolean,\n\n        /**\n         * If an to is passed, button is an router-link element\n         *\n         * @property Boolean\n         */\n        to: [Object, String],\n\n        /**\n         * The type attribute for the button. Not applied if an anchor\n         *\n         * @property String\n         */\n        type: String\n\n    },\n\n    methods: {\n\n        onClick(event) {\n            this.$emit('click', event);\n        }\n\n    },\n\n    computed: {\n\n        variantClassPrefix() {\n            return this.$options.name + (this.outline ? '-outline' : '');\n        },\n\n        classes() {\n            return this.mergeClasses(\n                'btn',\n                this.variantClass,\n                this.sizeableClass,\n                this.colorableClasses,\n                this.block ? 'btn-block' : '',\n                this.active ? 'active' : ''\n            );\n        }\n\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n@import './node_modules/bootstrap/scss/mixins.scss';\n@import './node_modules/bootstrap/scss/functions.scss';\n@import './node_modules/bootstrap/scss/variables.scss';\n\n@mixin button-block($size) {\n    width: 100%;\n    display: block;\n}\n\n@include media-breakpoint-down(xs) {\n    .btn-xs-block {\n        @include button-block(xs);\n\n        + .btn-xs-block {\n            margin-top: $btn-block-spacing-y;\n        }\n    }\n}\n\n@include media-breakpoint-down(sm) {\n    .btn-sm-block {\n        @include button-block(sm);\n\n        + .btn-xs-block,\n        + .btn-sm-block {\n            margin-top: $btn-block-spacing-y;\n        }\n    }\n}\n\n@include media-breakpoint-down(md) {\n    .btn-md-block {\n        @include button-block(md);\n\n        + .btn-xs-block,\n        + .btn-sm-block,\n        + .btn-md-block {\n            margin-top: $btn-block-spacing-y;\n        }\n    }\n}\n\n@include media-breakpoint-down(lg) {\n    .btn-lg-block {\n        @include button-block(lg);\n\n        + .btn-xs-block,\n        + .btn-sm-block,\n        + .btn-md-block,\n        + .btn-lg-block {\n            margin-top: $btn-block-spacing-y;\n        }\n    }\n}\n\n@include media-breakpoint-down(xl) {\n    .btn-xl-block {\n        @include button-block(xl);\n\n        + .btn-xs-block,\n        + .btn-sm-block,\n        + .btn-md-block,\n        + .btn-lg-block,\n        + .btn-xl-block {\n            margin-top: $btn-block-spacing-y;\n        }\n    }\n}\n\n</style>\n","<template>\n    <button :type=\"type\" class=\"btn\" :class=\"classes\" @click=\"onClick\">\n        <i v-if=\"icon\" :class=\"icon\"/> {{label}}\n        <slot/>\n        <activity-indicator :type=\"indicator\" />\n    </button>\n</template>\n\n<script>\nimport ActivityIndicator from '../ActivityIndicator';\n\nconst convertAnimationDelayToInt = function(delay) {\n    const num = parseFloat(delay, 10);\n    const matches = delay.match(/m?s/);\n    const unit = matches ? matches[0] : false;\n\n    let milliseconds;\n\n    switch (unit) {\n    case 's': // seconds\n        milliseconds = num * 1000;\n        break;\n    case 'ms':\n    default:\n        milliseconds = num;\n        break;\n    }\n\n    return milliseconds || 0;\n};\n\nconst animated = function(el, callback) {\n    const defaultView = (el.ownerDocument || document).defaultView;\n\n    setTimeout(() => {\n        callback.apply();\n    }, convertAnimationDelayToInt(defaultView.getComputedStyle(el).animationDuration));\n};\n\nexport default {\n\n    name: 'activity-button',\n\n    components: {\n        ActivityIndicator\n    },\n\n    props: {\n\n        /**\n         * Make the button appear with the active state.\n         *\n         * @property {Boolea}n}\n         */\n        active: Boolean,\n\n        /**\n         * Show the activity indicator inside the button.\n         *\n         * @property {Boolea}n}\n         */\n        activity: Boolean,\n\n        /**\n         * Display the button as block width.\n         *\n         * @property {Boolea}n}\n         */\n        block: Boolean,\n\n        /**\n         * Make the button appear with the disabled state.\n         *\n         * @property {Boolea}n}\n         */\n        disabled: Boolean,\n\n        /**\n         * The button label. If not passed as a property, label must be passed\n         * inside the element's html.\n         *\n         * @property {String}\n         */\n        label: String,\n\n        /**\n         * The button icon\n         *\n         * @property {String}\n         */\n        icon: String,\n\n        /**\n         * The `type` attribute for the button element.\n         *\n         * @property {String}\n         */\n        type: String,\n\n        /**\n         * The size of the button.\n         *\n         * @property {String}\n         */\n        size: {\n            type: String,\n            default: 'md'\n        },\n\n        /**\n         * The variant of the button.\n         *\n         * @property {String}\n         */\n        variant: {\n            type: String,\n            default: 'primary'\n        },\n\n        /**\n         * The type of activity indicator inside the button.\n         *\n         * @property {String}\n         */\n        indicator: {\n            type: String,\n            default: 'spinner'\n        },\n\n        /**\n         * The orientation of the activity button inside the button.\n         *\n         * @property {String}\n         */\n        orientation: {\n            type: String,\n            default: 'right'\n        }\n    },\n\n    methods: {\n\n        /**\n         * Disable the button.\n         *\n         * @return void\n         */\n        disable() {\n            this.$el.disabled = true;\n        },\n\n        /**\n         * Enable the button.\n         *\n         * @return void\n         */\n        enable() {\n            this.$el.disabled = false;\n        },\n\n        /**\n         * Show the activity indicator inside the button.\n         *\n         * @return void\n         */\n        showActivity() {\n            this.disable();\n\n            animated(this.$el, () => {\n                this.$el.classList.add('btn-activity');\n                this.$emit('activity:show');\n            });\n        },\n\n        /**\n         * Hide the activity indicator inside the button.\n         *\n         * @return void\n         */\n        hideActivity() {\n            this.$el.classList.add('btn-hide-activity');\n\n            animated(this.$el, () => {\n                this.enable();\n                this.$el.classList.remove('btn-activity', 'btn-hide-activity');\n                this.$emit('activity:hide');\n            });\n        },\n\n        /**\n         * The click callback function\n         *\n         * @return void\n         */\n        onClick(event) {\n            this.$emit('click', event);\n        }\n\n    },\n\n    computed: {\n\n        /**\n         * An object of classes to append to the button.\n         *\n         * @return void\n         */\n        classes() {\n            const classes = {\n                'disabled': this.disabled,\n                'active': this.active,\n                'btn-block': this.block,\n                'btn-activity': this.activity\n            };\n\n            classes['btn-' + this.size.replace('btn-', '')] = !!this.size;\n            classes['btn-' + this.variant.replace('btn-', '')] = !!this.variant;\n            classes['btn-activity-' + this.orientation.replace('btn-activity-', '')] = !!this.orientation;\n            classes['btn-activity-indicator-' + this.indicator.replace('btn-activity-indicator-', '')] = !!this.indicator;\n\n            return classes;\n        }\n    },\n\n    watch: {\n\n        activity(value) {\n            if(value) {\n                this.showActivity();\n            }\n            else {\n                this.hideActivity();\n            }\n        }\n\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n@import './node_modules/bootstrap/scss/functions.scss';\n@import './node_modules/bootstrap/scss/variables.scss';\n\n// Activity Indicator variables\n$activity-indicator-animated-delay-in: 333ms;\n$activity-indicator-animated-delay-out: 333ms;\n\n$activity-indicator-spinner-size: $font-size-base * 2.25;\n$activity-indicator-spinner-width: 10%;\n$activity-indicator-spinner-height: 30%;\n$activity-indicator-spinner-delay: 1s;\n\n@keyframes btn-activity-in {\n    0%, 100% {\n        transform: scale(1);\n    } 30% {\n        transform: scale(.98);\n    }\n}\n\n@keyframes btn-activity-out {\n    0%, 100% {\n        transform: scale(1);\n    } 70% {\n        transform: scale(.98);\n    }\n}\n\n// Activity Indicator Button\n.btn-activity-top,\n.btn-activity-bottom,\n.btn-activity-left,\n.btn-activity-right {\n    position: relative;\n    transition: padding ($activity-indicator-animated-delay-in / 2) ease-in;\n\n    & .activity-indicator {\n        opacity: 0;\n        position: absolute;\n        visibility: hidden;\n        transition: opacity $activity-indicator-animated-delay-out ease-in;\n    }\n}\n\n.btn-activity-top .activity-indicator,\n.btn-activity-bottom .activity-indicator {\n    left: 50%;\n    margin-right: -50%;\n    transform: translateX(-50%);\n}\n.btn-activity-left .activity-indicator,\n.btn-activity-right .activity-indicator {\n    top: 50%;\n    margin-bottom: -50%;\n    transform: translateY(-50%);\n}\n\n.btn-activity:not(.btn-link) {\n    animation: btn-activity-in $activity-indicator-animated-delay-in;\n}\n.btn-hide-activity:not(.btn-link) {\n    animation: btn-activity-out $activity-indicator-animated-delay-out;\n}\n\n.btn-activity {\n\n    &.btn-hide-activity .activity-indicator {\n        opacity: 0;\n    }\n\n    & .activity-indicator {\n        opacity: 1;\n        visibility: visible;\n        position: absolute;\n    }\n\n    &.btn-outline-primary.btn-activity-indicator-spinner .activity-indicator > div:before {\n        background-color: $primary;\n    }\n    &.btn-outline-secondary.btn-activity-indicator-spinner .activity-indicator > div:before {\n        background-color: $success;\n    }\n    &.btn-outline-danger.btn-activity-indicator-spinner .activity-indicator > div:before {\n        background-color: $danger;\n    }\n    &.btn-outline-success.btn-activity-indicator-spinner .activity-indicator > div:before {\n        background-color: $success;\n    }\n    &.btn-outline-warning.btn-activity-indicator-spinner .activity-indicator > div:before {\n        background-color: $warning;\n    }\n    &.btn-outline-info.btn-activity-indicator-spinner .activity-indicator > div:before {\n        background-color: $info;\n    }\n    &.btn-outline-link.btn-activity-indicator-spinner .activity-indicator > div:before {\n        background-color: $link-color;\n    }\n\n    &.btn-xs {\n        &.btn-activity-top.btn-activity-indicator-dots {\n            padding-top: $font-size-base * 1.25;\n\n            & .activity-indicator {\n                top: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-bottom.btn-activity-indicator-dots {\n            padding-bottom: $font-size-base * 1.25;\n\n            & .activity-indicator {\n                bottom: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-left.btn-activity-indicator-dots {\n            padding-left: $font-size-base * 2.33;\n\n            & .activity-indicator {\n                left: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-right.btn-activity-indicator-dots {\n            padding-right: $font-size-base * 2.33;\n\n            & .activity-indicator {\n                right: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-indicator-dots .activity-indicator > div,\n        & .activity-indicator-dots > div {\n            width: $font-size-base / 3;\n            height: $font-size-base / 3;\n        }\n\n        &.btn-activity-top.btn-activity-indicator-spinner {\n            padding-top: $font-size-base * 1.66;\n\n            & .activity-indicator {\n                top: $font-size-base * .25;\n            }\n        }\n\n        &.btn-activity-bottom.btn-activity-indicator-spinner {\n            padding-bottom: $font-size-base * 1.66;\n\n            & .activity-indicator {\n                bottom: $font-size-base * .25;\n            }\n        }\n\n        &.btn-activity-left.btn-activity-indicator-spinner {\n            padding-left: $font-size-base * 1.66;\n\n            & .activity-indicator {\n                left: $font-size-base * .25;\n            }\n        }\n\n        &.btn-activity-right.btn-activity-indicator-spinner {\n            padding-right: $font-size-base * 1.66;\n\n            & .activity-indicator {\n                right: $font-size-base * .25;\n            }\n        }\n\n        &.btn-activity-indicator-spinner .activity-indicator,\n        & .activity-indicator-spinner {\n            width: $font-size-base * 1;\n            height: $font-size-base * 1;\n\n            & > div:before {\n                //width: $activity-indicator-spinner-width * .63;\n                //height: $activity-indicator-spinner-height * .66;\n                width: $activity-indicator-spinner-width * .84;\n                height: $activity-indicator-spinner-height * 1;\n            }\n        }\n    }\n\n    &.btn-sm {\n        &.btn-activity-top.btn-activity-indicator-dots {\n            padding-top: $font-size-base * 1.75;\n\n            & .activity-indicator {\n                top: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-bottom.btn-activity-indicator-dots {\n            padding-bottom: $font-size-base * 1.75;\n\n            & .activity-indicator {\n                bottom: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-left.btn-activity-indicator-dots {\n            padding-left: $font-size-base * 3;\n\n            & .activity-indicator {\n                left: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-right.btn-activity-indicator-dots {\n            padding-right: $font-size-base * 3;\n\n            & .activity-indicator {\n                right: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-indicator-dots .activity-indicator > div,\n        & .activity-indicator-dots > div {\n            width: $font-size-base / 2;\n            height: $font-size-base / 2;\n        }\n\n        &.btn-activity-top.btn-activity-indicator-spinner {\n            padding-top: $font-size-base * 2;\n\n            & .activity-indicator {\n                top: $font-size-base * .33;\n            }\n        }\n\n        &.btn-activity-bottom.btn-activity-indicator-spinner {\n            padding-bottom: $font-size-base * 2;\n\n            & .activity-indicator {\n                bottom: $font-size-base * .33;\n            }\n        }\n\n        &.btn-activity-left.btn-activity-indicator-spinner {\n            padding-left: $font-size-base * 2.5;\n\n            & .activity-indicator {\n                left: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-right.btn-activity-indicator-spinner {\n            padding-right: $font-size-base * 2.5;\n\n            & .activity-indicator {\n                right: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-indicator-spinner .activity-indicator,\n        & .activity-indicator-spinner {\n            width: $font-size-base * 1.5;\n            height: $font-size-base * 1.5;\n\n            & > div:before {\n                width: $activity-indicator-spinner-width * .56;\n                height: $activity-indicator-spinner-height;\n            }\n        }\n    }\n\n    &:not(.btn-xs):not(.btn-sm):not(.btn-md):not(.btn-lg):not(.btn-xl),\n    &.btn-md {\n        &.btn-activity-top.btn-activity-indicator-dots {\n            padding-top: $font-size-base * 2;\n\n            & .activity-indicator {\n                top: $font-size-base * .66;\n            }\n        }\n\n        &.btn-activity-bottom.btn-activity-indicator-dots {\n            padding-bottom: $font-size-base * 2;\n\n            & .activity-indicator {\n                bottom: $font-size-base * .66;\n            }\n        }\n\n        &.btn-activity-left.btn-activity-indicator-dots {\n            padding-left: $font-size-base * 4;\n\n            & .activity-indicator {\n                left: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-right.btn-activity-indicator-dots {\n            padding-right: $font-size-base * 4;\n\n            & .activity-indicator {\n                right: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-indicator-dots .activity-indicator > div,\n        & .activity-indicator-dots > div {\n            width: $font-size-base / 1.25;\n            height: $font-size-base / 1.25;\n        }\n\n        &.btn-activity-top.btn-activity-indicator-spinner {\n            padding-top: $font-size-base * 2.75;\n\n            & .activity-indicator {\n                top: $font-size-base * .33;\n            }\n        }\n\n        &.btn-activity-bottom.btn-activity-indicator-spinner {\n            padding-bottom: $font-size-base * 2.75;\n\n            & .activity-indicator {\n                bottom: $font-size-base * .33;\n            }\n        }\n\n        &.btn-activity-left.btn-activity-indicator-spinner {\n            padding-left: $font-size-base * 2.75;\n\n            & .activity-indicator {\n                left: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-right.btn-activity-indicator-spinner {\n            padding-right: $font-size-base * 2.75;\n\n            & .activity-indicator {\n                right: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-indicator-spinner .activity-indicator,\n        & .activity-indicator-spinner {\n            width: $font-size-base * 1.75;\n            height: $font-size-base * 1.75;\n\n            & > div:before {\n                width: $activity-indicator-spinner-width * .66;\n                height: $activity-indicator-spinner-height;\n            }\n        }\n    }\n\n    &.btn-lg {\n        &.btn-activity-top.btn-activity-indicator-dots {\n            padding-top: $font-size-base * 2.75;\n\n            & .activity-indicator {\n                top: $font-size-base * .66;\n            }\n        }\n\n        &.btn-activity-bottom.btn-activity-indicator-dots {\n            padding-bottom: $font-size-base * 2.75;\n\n            & .activity-indicator {\n                bottom: $font-size-base * .66;\n            }\n        }\n\n        &.btn-activity-left.btn-activity-indicator-dots {\n            padding-left: $font-size-base * 5;\n\n            & .activity-indicator {\n                left: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-right.btn-activity-indicator-dots {\n            padding-right: $font-size-base * 5;\n\n            & .activity-indicator {\n                right: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-indicator-dots .activity-indicator > div,\n        & .activity-indicator-dots > div {\n            width: $font-size-base * 1.1;\n            height: $font-size-base * 1.1;\n        }\n\n        &.btn-activity-top.btn-activity-indicator-spinner {\n            padding-top: $font-size-base * 3.5;\n\n            & .activity-indicator {\n                top: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-bottom.btn-activity-indicator-spinner {\n            padding-bottom: $font-size-base * 3.5;\n\n            & .activity-indicator {\n                bottom: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-left.btn-activity-indicator-spinner {\n            padding-left: $font-size-base * 3.25;\n\n            & .activity-indicator {\n                left: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-right.btn-activity-indicator-spinner {\n            padding-right: $font-size-base * 3.25;\n\n            & .activity-indicator {\n                right: $font-size-base * .5;\n            }\n        }\n\n        &.btn-activity-indicator-spinner .activity-indicator,\n        & .activity-indicator-spinner {\n            width: $font-size-base * 2.15;\n            height: $font-size-base * 2.15;\n\n            & > div:before {\n                width: $activity-indicator-spinner-width * .75;\n            }\n        }\n    }\n\n    &.btn-xl {\n        &.btn-activity-top.btn-activity-indicator-dots {\n            padding-top: $font-size-base * 3.75;\n\n            & .activity-indicator {\n                top: $font-size-base * 1;\n            }\n        }\n\n        &.btn-activity-bottom.btn-activity-indicator-dots {\n            padding-bottom: $font-size-base * 3.75;\n\n            & .activity-indicator {\n                bottom: $font-size-base * 1;\n            }\n        }\n\n        &.btn-activity-left.btn-activity-indicator-dots {\n            padding-left: $font-size-base * 6;\n\n            & .activity-indicator {\n                left: $font-size-base * .75;\n            }\n        }\n\n        &.btn-activity-right.btn-activity-indicator-dots {\n            padding-right: $font-size-base * 6;\n\n            & .activity-indicator {\n                right: $font-size-base * .75;\n            }\n        }\n\n        &.btn-activity-indicator-dots .activity-indicator > div,\n        & .activity-indicator-dots > div {\n            width: $font-size-base * 1.25;\n            height: $font-size-base * 1.25;\n        }\n\n        &.btn-activity-top.btn-activity-indicator-spinner {\n            padding-top: $font-size-base * 4.25;\n\n            & .activity-indicator {\n                top: $font-size-base * .66;\n            }\n        }\n\n        &.btn-activity-bottom.btn-activity-indicator-spinner {\n            padding-bottom: $font-size-base * 4.25;\n\n            & .activity-indicator {\n                bottom: $font-size-base * .66;\n            }\n        }\n\n        &.btn-activity-left.btn-activity-indicator-spinner {\n            padding-left: $font-size-base * 4;\n\n            & .activity-indicator {\n                left: $font-size-base * .75;\n            }\n        }\n\n        &.btn-activity-right.btn-activity-indicator-spinner {\n            padding-right: $font-size-base * 4;\n\n            & .activity-indicator {\n                right: $font-size-base * .75;\n            }\n        }\n\n        &.btn-activity-indicator-spinner .activity-indicator,\n        & .activity-indicator-spinner {\n            width: $font-size-base * 2.5;\n            height: $font-size-base * 2.5;\n\n            & > div:before {\n                width: $activity-indicator-spinner-width * .75;\n            }\n        }\n    }\n\n}\n</style>\n","export default {\n\n    props: {\n\n        /**\n         * Should show only for screenreaders\n         *\n         * @property Boolean\n         */\n        srOnly: Boolean,\n\n        /**\n         * Should be focusable for screenreaders\n         *\n         * @property Boolean\n         */\n        srOnlyFocusable: Boolean\n\n    },\n\n    computed: {\n        screenreaderClasses() {\n            return {\n                'sr-only': this.srOnly,\n                'sr-only-focusable': this.srOnlyFocusable\n            };\n        }\n    }\n\n};\n","<template>\n\n    <small class=\"form-text\" :class=\"classes\"><slot /></small>\n\n</template>\n\n<script>\nimport { extend } from '../../Helpers/Functions';\nimport Colorable from '../../Mixins/Colorable/Colorable';\nimport Screenreaders from '../../Mixins/Screenreaders/Screenreaders';\n\nexport default {\n\n    name: 'help-text',\n\n    mixins: [\n        Colorable,\n        Screenreaders\n    ],\n\n    computed: {\n        classes() {\n            return extend({}, this.screenreaderClasses, this.colorableClasses);\n        }\n    }\n\n};\n</script>\n","<template>\n\n    <div :class=\"{'form-group': group}\">\n        <slot/>\n    </div>\n\n</template>\n\n<script>\nexport default {\n\n    name: 'form-group',\n\n    props: {\n\n        group: {\n            type: Boolean,\n            default: true\n        }\n\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n.form-group {\n    &, .form-group-inner {\n        position: relative;\n    }\n\n    .activity-indicator {\n        position: absolute;\n        right: 0;\n        top: 50%;\n        transform: translate(-1rem, -50%);\n        transition: all .25s ease-in;\n    }\n}\n</style>\n","<template>\n\n    <label :class=\"classes\"><slot/></label>\n\n</template>\n\n<script>\nimport { extend } from '../../Helpers/Functions';\nimport Colorable from '../../Mixins/Colorable/Colorable';\nimport Screenreaders from '../../Mixins/Screenreaders/Screenreaders';\n\nexport default {\n\n    name: 'form-label',\n\n    mixins: [\n        Colorable,\n        Screenreaders\n    ],\n\n    computed: {\n        classes() {\n            return extend({}, this.screenreaderClasses, this.colorableClasses);\n        }\n    }\n\n};\n</script>\n","<template>\n\n    <div :class=\"{'invalid-feedback': invalid, 'valid-feedback': valid && !invalid}\">\n        <slot>{{label}}</slot>\n    </div>\n\n</template>\n\n<script>\nimport Colorable from '../../Mixins/Colorable/Colorable';\n\nexport default {\n\n    name: 'form-feedback',\n\n    mixins: [\n        Colorable\n    ],\n\n    props: {\n\n        /**\n         * The value of label element. If no value, no label will appear.\n         *\n         * @property String\n         */\n        label: String,\n\n        /**\n         * Should the feedback marked as invalid\n         *\n         * @property String\n         */\n        invalid: Boolean,\n\n        /**\n         * Should the feedback marked as invalid\n         *\n         * @property String\n         */\n        valid: Boolean\n\n    }\n\n};\n</script>\n","<template>\n    <component\n        v-bind=\"$attrs\"\n        v-model=\"testValue\"\n        :is=\"element\"\n        :aria-label=\"label || name || id\"\n        :aria-describedby=\"id || name\"\n        @input=\"$emit('input', $event.target.value)\">\n        <slot/>\n    </component>\n</div>\n\n</template>\n\n<script>\nimport Colorable from '../../Mixins/Colorable';\nimport FormControl from '../../Mixins/FormControl';\n\nexport default {\n\n    name: 'form-control',\n\n    mixins: [\n        Colorable,\n        FormControl\n    ],\n\n    props: {\n\n        element: {\n            type: String,\n            required: true\n        }\n\n    }\n\n};\n</script>\n","<template>\n\n    <form-group :group=\"group\" :class=\"formGroupClasses\">\n\n        <slot name=\"label\">\n            <form-label ref=\"label\" v-if=\"label || hasDefaultSlot\" :for=\"$attrs.id\" v-html=\"label\"/>\n        </slot>\n\n        <div class=\"form-group-inner\">\n            <slot name=\"control\">\n                <input\n                    v-bind-events\n                    v-bind=\"controlAttributes\"\n                    :value=\"value\"\n                    @input=\"$emit('input', $event.target.value)\"\n                />\n            </slot>\n\n            <slot name=\"activity\">\n                <transition name=\"slide-fade\">\n                    <activity-indicator key=\"test\" v-if=\"activity\" ref=\"activity\" type=\"dots\" :size=\"size\"/>\n                </transition>\n            </slot>\n        </div>\n\n        <slot name=\"feedback\">\n            <form-feedback v-if=\"validFeedback\" ref=\"feedback\" v-html=\"validFeedback\" valid />\n            <form-feedback v-else-if=\"invalidFeedback\" ref=\"feedback\" v-html=\"invalidFeedback\" invalid />\n        </slot>\n\n        <slot name=\"help\">\n            <help-text v-if=\"helpText\" ref=\"help\" v-html=\"helpText\" />\n        </slot>\n\n    </form-group>\n\n</template>\n\n<script>\nimport HelpText from '../HelpText';\nimport FormGroup from '../FormGroup';\nimport FormLabel from '../FormLabel';\nimport FormControl from '../FormControl';\nimport FormFeedback from '../FormFeedback';\nimport Colorable from '../../Mixins/Colorable';\nimport ActivityIndicator from '../ActivityIndicator';\nimport FormControlMixin from '../../Mixins/FormControl';\n\nexport default {\n\n    name: 'input-field',\n\n    mixins: [\n        Colorable,\n        FormControlMixin\n    ],\n\n    components: {\n        HelpText,\n        FormControl,\n        FormGroup,\n        FormLabel,\n        FormFeedback,\n        ActivityIndicator\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n.input-field {\n    .slide-fade-enter,\n    .slide-fade-leave-to {\n        opacity: 1;\n        transform: translate(25%, -50%);\n    }\n}\n</style>\n","<template>\n\n    <form-group :group=\"group\" :class=\"formGroupClasses\">\n\n        <slot name=\"label\">\n            <form-label v-if=\"label || hasDefaultSlot\" :for=\"$attrs.id\">\n                <slot>{{label}}</slot>\n            </form-label>\n        </slot>\n\n        <div class=\"custom-file\">\n\n            <slot name=\"placeholder\">\n                <form-label :class=\"mergeClasses(colorableClasses, 'custom-file-label')\" :for=\"$attrs.id\" v-html=\"placeholder || 'Choose file'\" />\n            </slot>\n\n            <input\n                v-bind-events\n                type=\"file\"\n                :class=\"controlClasses\"\n                :id=\"$attrs.id\"\n                :width=\"width\"\n                :height=\"height\"\n                :required=\"required\"\n                :multiple=\"multiple\"\n                :readonly=\"readonly\"\n                @change=\"$emit('change', $event.target.files)\">\n\n            <slot name=\"help\">\n                <help-text v-if=\"helpText\" v-html=\"helpText\" />\n            </slot>\n\n            <slot name=\"feedback\">\n                <form-feedback v-if=\"validFeedback\" v-html=\"validFeedback\" valid />\n                <form-feedback v-if=\"invalidFeedback\" v-html=\"invalidFeedback\" invalid />\n            </slot>\n\n        </div>\n\n    </form-group>\n\n</template>\n\n<script>\nimport HelpText from '../HelpText';\nimport FormGroup from '../FormGroup';\nimport FormLabel from '../FormLabel';\nimport FormFeedback from '../FormFeedback';\nimport InputField from '../InputField';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'file-field',\n\n    extends: InputField,\n\n    components: {\n        HelpText,\n        FormGroup,\n        FormLabel,\n        FormFeedback,\n        MergeClasses\n    },\n\n    model: {\n        event: 'change'\n    },\n\n    props: {\n\n        /**\n         * An array of event names that correlate with callback functions\n         *\n         * @property Function\n         */\n        bindEvents: {\n            type: Array,\n            default() {\n                return ['focus', 'blur', 'input', 'click', 'keyup', 'keydown', 'progress'];\n            }\n        },\n\n        /**\n         * The class name assigned to the control element\n         *\n         * @property String\n         */\n        defaultControlClass: {\n            type: String,\n            default: 'custom-file-input'\n        },\n\n        /**\n         * An array of valid extensions\n         *\n         * @property String\n         */\n        extensions: Array,\n\n        /**\n         * The type attribute\n         *\n         * @property String\n         */\n        multiple: Boolean,\n\n        /**\n         * The height attribute for the control element\n         *\n         * @property String\n         */\n        height: [Number, String],\n\n        /**\n         * The width attribute for the control element\n         *\n         * @property String\n         */\n        width: [Number, String]\n\n    }\n\n};\n</script>\n","<template>\n\n    <btn class=\"btn-file\" :type=\"type\" :variant=\"variant\" :block=\"block\" :size=\"size\" :disabled=\"disabled\" :active=\"active\">\n        <slot/>\n\n        <input\n            v-bind-events\n            type=\"file\"\n            :class=\"controlClasses\"\n            :id=\"$attrs.id\"\n            :width=\"width\"\n            :height=\"height\"\n            :required=\"required\"\n            :multiple=\"multiple\"\n            :readonly=\"readonly\"\n            v-on:change=\"$emit('change', multiple ? $event.target.files : $event.target.files[0])\">\n    </btn>\n\n</template>\n\n<script>\nimport Btn from '../Btn';\nimport FileField from '../FileField';\n\nexport default {\n\n    name: 'btn-file',\n\n    mixins: [\n        FileField\n    ],\n\n    components: {\n        Btn,\n        FileField\n    },\n\n    model: {\n        event: 'change'\n    },\n\n    props: {\n\n        /**\n         * The type attribute for the button. Not applied if an anchor\n         *\n         * @property String\n         */\n        type: {\n            type: String,\n            default: 'button'\n        }\n\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n.btn-file {\n    cursor: pointer;\n    position: relative;\n\n    input {\n        z-index: 1;\n        opacity: 0;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n    }\n}\n</style>\n","<template>\n    <div :class=\"classes\" :data-toggle=\"toggle ? 'buttons' : false\" role=\"group\">\n        <btn v-if=\"buttons\" v-for=\"(button, i) in buttons\" :key=\"i\" v-bind=\"button\" />\n        <slot/>\n    </div>\n</template>\n\n<script>\nimport Btn from '../Btn';\nimport Colorable from '../../Mixins/Colorable';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'btn-group',\n\n    components: {\n        Btn\n    },\n\n    mixins: [\n        Colorable,\n        MergeClasses\n    ],\n\n    props: {\n\n        /**\n         * An array of buttons\n         *\n         * @type {Array}\n         */\n        buttons: Array,\n\n        /**\n         * Denote the button group as toggle buttons\n         *\n         * @type {Boolean}\n         */\n        toggle: Boolean,\n\n        /**\n         * Display the buttons vertically\n         *\n         * @type {Boolean}\n         */\n        vertical: Boolean\n\n    },\n\n    computed: {\n\n        classes() {\n            return this.mergeClasses(\n                this.colorableClasses, {\n                    'btn-group': !this.vertical,\n                    'btn-group-toggle': this.toggle,\n                    'btn-group-vertical': this.vertical\n                }\n            );\n        }\n\n    }\n\n};\n</script>\n","<template>\n    <div class=\"btn-group-toggle\" data-toggle=\"buttons\">\n        <slot/>\n    </div>\n</template>\n\n<script>\nexport default {\n\n    name: 'btn-group-toggle'\n\n};\n</script>\n","<template>\n    <div class=\"btn-toolbar\" role=\"toolbar\">\n        <slot/>\n    </div>\n</template>\n\n<script>\nexport default {\n\n    name: 'btn-toolbar'\n\n};\n</script>\n","import { isFunction } from '../../Helpers/Functions';\n\nexport default {\n\n    methods: {\n        proxy(callback, event) {\n            if(isFunction(callback)) {\n                callback.apply(this, [].slice.call(arguments).splice(1));\n                event.preventDefault();\n            }\n        }\n    }\n\n};\n","<template>\n    <component\n        :is=\"component\"\n        :href=\"href || (component === 'a' ? '#' : false)\"\n        class=\"dropdown-item\"\n        :class=\"{'active': active}\"\n        :type=\"component === 'button' ? 'button' : false\"\n        @click=\"onClick\">\n        <i v-if=\"icon\" :class=\"icon\"/>\n        <slot>{{label}}</slot>\n    </component>\n</template>\n\n<script>\nimport Proxy from '../../Mixins/Proxy/Proxy';\n\nexport default {\n\n    mixins: [\n        Proxy\n    ],\n\n    props: {\n\n        /**\n         * Is the menu item active.\n         *\n         * @property Object\n         */\n        active: Boolean,\n\n        /**\n         * Is the menu item a button\n         *\n         * @property Object\n         */\n        button: Boolean,\n\n        /**\n         * The `element` attribute.\n         *\n         * @property Object\n         */\n        element: String,\n\n        /**\n         * The `href` attribute.\n         *\n         * @property Object\n         */\n        href: String,\n\n        /**\n         * The icon of the dropdown menu item.\n         *\n         * @property Object\n         */\n        icon: String,\n\n        /**\n         * The label of the dropdown menu item.\n         *\n         * @property Object\n         */\n        label: String\n\n    },\n\n    computed: {\n\n        component() {\n            return this.element || (this.button ? 'button' : 'a');\n        }\n\n    },\n\n    methods: {\n\n        /**\n         * A callback function for the `click` event.\n         *\n         * @property Object\n         */\n        onClick(event) {\n            this.$emit('click', event);\n        }\n\n    }\n\n};\n</script>\n","<template>\n    <h5 class=\"dropdown-header\">\n        <slot>{{header}}</slot>\n    </h5>\n</template>\n\n<script>\nexport default {\n\n    name: 'dropdown-menu-header',\n\n    props: {\n\n        /**\n         * The value of the header\n         *\n         * @property Object\n         */\n        header: String\n\n    }\n\n};\n</script>\n","<template>\n    <div class=\"dropdown-divider\"></div>\n</template>\n\n<script>\nexport default {\n\n    name: 'dropdown-menu-divider'\n\n};\n</script>\n","<template>\n    <div class=\"dropdown-menu\" :class=\"{'dropdown-menu-right': align === 'right', 'show': show}\" :aria-labelledby=\"id\" tabindex=\"-1\" @click=\"onClick\">\n        <template v-for=\"item in items\">\n            <component :is=\"prefix(item.type || 'item', 'dropdown-menu')\" v-bind=\"item\"/>\n        </template>\n        <slot/>\n    </div>\n</template>\n\n<script>\nimport uuid from '../../Helpers/Uuid';\nimport prefix from '../../Helpers/Prefix';\nimport { each } from '../../Helpers/Functions';\nimport DropdownMenuItem from './DropdownMenuItem';\nimport DropdownMenuHeader from './DropdownMenuHeader';\nimport DropdownMenuDivider from './DropdownMenuDivider';\n\nexport default {\n\n    components: {\n        DropdownMenuItem,\n        DropdownMenuHeader,\n        DropdownMenuDivider\n    },\n\n    props: {\n\n        /**\n         * The `id` attribute on the toggle button and aria label. If no `id` is\n         * defined, then a UUID will be generated instead.\n         *\n         * @property Object\n         */\n        id: {\n            type: String,\n            default: uuid\n        },\n\n        /**\n         * Display the dropdown menu aligned left or right\n         *\n         * @property String\n         */\n        align: {\n            type: String,\n            default: 'left',\n            validate(value) {\n                return ['left', 'right'].indexOf(value.toLowerCase()) !== -1;\n            }\n        },\n\n        /**\n         * The default visibility of the dropdown menu.\n         *\n         * @property Object\n         */\n        show: Boolean,\n\n        /**\n         * An array of dropdown items. If an key/value pair isn't defined, the\n         * default value will be used. If no items are defined, then the slot\n         * named \"items\" can be used to define the options with HTML.\n         *\n         * [{\n         *      type: 'item', // String [item|header|divider]\n         *      href: '#', // String\n         *      label: 'Some label', // String\n         *      onClick: (event) => {} // Function\n         * }]\n         *\n         * @property Array\n         */\n        items: Array\n\n    },\n\n    methods: {\n\n        prefix: prefix,\n\n        /**\n         * A callback function for the `click` event.\n         *\n         * @param Object event\n         * @param Object item\n         * @return void\n         */\n        onClick(event) {\n            this.$emit('click', event);\n        },\n\n        /**\n         * A callback function for the `click` event.\n         *\n         * @param Object event\n         * @param Object item\n         * @return void\n         */\n        onItemClick(event, item) {\n            this.$emit('item:click', event, item);\n        }\n\n    },\n\n    mounted() {\n        each(this.$children, child => {\n            child.$on('click', event => {\n                this.onItemClick(event, child);\n            });\n        });\n    }\n\n};\n</script>\n","<template>\n\n    <btn-group v-if=\"split\">\n        <template v-if=\"!dropleft\">\n            <a v-if=\"href\" :href=\"href\" :class=\"actionClasses\" @click=\"onClick\">\n                <slot name=\"label\"><i v-if=\"icon\" :class=\"icon\"/> {{label}}</slot>\n            </a>\n            <button v-else :type=\"type\" :class=\"actionClasses\" @click=\"onClick\">\n                <slot name=\"label-wrapper\"><i v-if=\"icon\" :class=\"icon\"/> <slot name=\"label\">{{label}}</slot></slot>\n            </button>\n        </template>\n        <btn-group :class=\"{'dropup': dropup, 'dropright': dropright, 'dropleft': dropleft}\">\n            <button type=\"button\" aria-haspopup=\"true\" :aria-expanded=\"isDropdownShowing\" :id=\"$attrs.id\" :class=\"toggleClasses\" @click.prevent=\"!isDropdownShowing ? show() : hide()\" @blur=\"onBlur\"></button>\n            <dropdown-menu\n                :id=\"$attrs.id\"\n                :align=\"align\"\n                :show.sync=\"isDropdownShowing\"\n                @click=\"onMenuClick\"\n                @item:click=\"onItemClick\">\n                <slot/>\n            </dropdown-menu>\n        </btn-group>\n        <template v-if=\"dropleft\">\n            <a v-if=\"href\" :href=\"href\" :class=\"actionClasses\" @click=\"onClick\">\n                <slot name=\"label\"><i v-if=\"icon\" :class=\"icon\"/> {{label}}</slot>\n            </a>\n            <button v-else :type=\"type\" :class=\"actionClasses\" @click=\"onClick\">\n                <slot name=\"label-wrapper\"><i v-if=\"icon\" :class=\"icon\"/> <slot name=\"label\">{{label}}</slot></slot>\n            </button>\n        </template>\n    </btn-group>\n\n    <btn-group v-else :class=\"{'dropup': dropup, 'dropright': dropright, 'dropleft': dropleft}\" @click=\"onClick\">\n        <button aria-haspopup=\"true\" :aria-expanded=\"isDropdownShowing\" :type=\"type\" :id=\"$attrs.id\" :class=\"toggleClasses\" @click.prevent=\"!isDropdownShowing ? show() : hide()\" @blur=\"onBlur\">\n            <slot name=\"label\"><i v-if=\"icon\" :class=\"icon\"/> {{label}}</slot>\n        </button>\n\n        <dropdown-menu\n            :id=\"$attrs.id\"\n            :align=\"align\"\n            :show.sync=\"isDropdownShowing\"\n            @click=\"onMenuClick\"\n            @item:click=\"onItemClick\">\n            <slot/>\n        </dropdown-menu>\n    </btn-group>\n\n</template>\n\n<script>\nimport Btn from '../Btn';\nimport Popper from 'popper.js';\nimport BtnGroup from '../BtnGroup';\nimport uuid from '../../Helpers/Uuid';\nimport prefix from '../../Helpers/Prefix';\nimport DropdownMenu from '../DropdownMenu';\nimport { each } from '../../Helpers/Functions';\n\nconst TAB_KEYCODE = 9;\nconst LEFT_ARROW_KEYCODE = 37;\nconst RIGHT_ARROW_KEYCODE = 39;\nconst UP_ARROW_KEYCODE = 38;\nconst DOWN_ARROW_KEYCODE = 40;\n\nlet ignoreBlurEvent = false;\n\nexport default {\n\n    name: 'btn-dropdown',\n\n    extends: Btn,\n\n    components: {\n        BtnGroup,\n        DropdownMenu\n    },\n\n    props: {\n\n        /**\n         * The button icon that appears before the label.\n         *\n         * @property String\n         */\n        autoclose: Boolean,\n\n        /**\n         * The button icon that appears before the label.\n         *\n         * @property String\n         */\n        icon: String,\n\n        /**\n         * The toggle button's label. If not defined as an attribute,\n         * you can override with the component's slot (inner html).\n         *\n         * @property String\n         */\n        label: String,\n\n        /**\n         * The `id` attribute on the toggle button and aria label. If no `id` is\n         * defined, then a UUID will be generated instead.\n         *\n         * @property String\n         */\n        id: {\n            type: String,\n            default: uuid\n        },\n\n        /**\n         * The button type attribute.\n         *\n         * @property String\n         */\n        type: {\n            type: String,\n            default: 'button'\n        },\n\n        /**\n         * Display the dropdown menu aligned left or right\n         *\n         * @property String\n         */\n        align: {\n            type: String,\n            default: 'left',\n            validate(value) {\n                return ['left', 'right'].indexOf(value.toLowerCase()) !== -1;\n            }\n        },\n\n        /**\n         * Display the dropdown button with a split toggle button.\n         *\n         * @property Boolean\n         */\n        split: {\n            type: Boolean,\n            default: false\n        },\n\n        /**\n         * Display as a dropup instead of a dropdown.\n         *\n         * @property Boolean\n         */\n        dropup: {\n            type: Boolean,\n            default: false\n        },\n\n        /**\n         * Display as a dropright instead of a dropdown.\n         *\n         * @property Boolean\n         */\n        dropright: {\n            type: Boolean,\n            default: false\n        },\n\n        /**\n         * Display as a dropleft instead of a dropdown.\n         *\n         * @property Boolean\n         */\n        dropleft: {\n            type: Boolean,\n            default: false\n        }\n\n    },\n\n    methods: {\n\n        /**\n         * Focus on the the dropdown toggle button\n         *\n         * @return void\n         */\n        focus() {\n            this.$el.querySelector('.dropdown-toggle').focus();\n        },\n\n        /**\n         * Focus on the the dropdown toggle button\n         *\n         * @return void\n         */\n        queryFocusable() {\n            return this.$el.querySelector('.dropdown-menu').querySelectorAll('label, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n        },\n\n        /**\n         * Method to check if the given element is focusable.\n         *\n         * @return void\n         */\n        isFocusable(element) {\n            const nodes = this.queryFocusable();\n\n            for(let i in nodes) {\n                if(element === nodes[i]) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Toggle the dropdown menu\n         *\n         * @return void\n         */\n        toggle() {\n            !this.isDropdownShowing ? this.show() : this.hide();\n        },\n\n        /**\n         * Show the dropdown menu\n         *\n         * @return void\n         */\n        show() {\n            this.isDropdownShowing = true;\n\n            this.$nextTick(() => {\n                let side = 'bottom';\n\n                if(this.dropup) {\n                    side = 'top';\n                }\n                else if(this.dropleft) {\n                    side = 'left';\n                }\n                else if(this.dropright) {\n                    side = 'right';\n                }\n\n                const menu = this.$el.querySelector('.dropdown-menu');\n                const toggle = this.$el.querySelector('.dropdown-toggle');\n                const position = [side, this.align === 'left' ? 'start' : 'end'];\n\n                this.$popper = new Popper(toggle, menu, {\n                    placement: position.join('-')\n                });\n\n                if(this.queryFocusable().item(0)) {\n                    this.$el.querySelector('input, select, textarea').focus();\n                }\n\n                this.$emit('show');\n            });\n        },\n\n        /**\n         * Hide the dropdown menu\n         *\n         * @return void\n         */\n        hide() {\n            this.$emit('toggle', this.isDropdownShowing = false);\n            this.$emit('hide');\n        },\n\n        /**\n         * A callback function for the `click` event for the action button\n         *\n         * @return void\n         */\n        onClick(event) {\n            this.hide();\n            this.$emit('click', event);\n        },\n\n        /**\n         * A callback function for the `blur` event for the action button\n         *\n         * @return void\n         */\n        onBlur(event) {\n            if(!this.$el.contains(event.relatedTarget)) {\n                this.hide();\n            }\n        },\n\n        /**\n         * A callback function for the `item:click` event for the action button\n         *\n         * @return void\n         */\n        onMenuClick(event, item) {\n            if(event.target === this.$el.querySelector('.dropdown-menu')) {\n                this.focus();\n            }\n        },\n\n        /**\n         * A callback function for the `item:click` event for the action button\n         *\n         * @return void\n         */\n        onItemClick(event, item) {\n            if(!this.isFocusable(event.target)) {\n                this.hide();\n            }\n\n            this.$emit('item:click', event, item);\n        }\n\n    },\n\n    computed: {\n\n        variantClassPrefix() {\n            return 'btn' + (this.outline ? '-outline' : '');\n        },\n\n        sizeableClassPrefix() {\n            return 'btn';\n        },\n\n        actionClasses() {\n            return [\n                'btn',\n                prefix(this.size, 'btn'),\n                prefix(this.variant, 'btn')\n            ].join(' ');\n        },\n\n        toggleClasses() {\n            return [\n                'btn',\n                'dropdown-toggle',\n                this.variantClass,\n                this.sizeableClass,\n                this.active ? 'active' : '',\n                this.block ? 'btn-block' : '',\n                (this.split ? 'dropdown-toggle-split' : '')\n            ].join(' ');\n        }\n    },\n\n    data() {\n        return {\n            isDropdownShowing: false\n        };\n    },\n\n    mounted() {\n        each(this.$el.querySelectorAll('[type=submit], input, select, textarea, [tabindex]:not([tabindex=\"-1\"]'), el => {\n            const keydown = event => {\n                const ignore = [\n                    LEFT_ARROW_KEYCODE,\n                    RIGHT_ARROW_KEYCODE,\n                    UP_ARROW_KEYCODE,\n                    DOWN_ARROW_KEYCODE,\n                    TAB_KEYCODE\n                ];\n\n                if(ignore.indexOf(event.keyCode) !== -1) {\n                    ignoreBlurEvent = true;\n                }\n            };\n\n            const blur = event => {\n                if(!ignoreBlurEvent) {\n                    this.focus();\n                }\n\n                ignoreBlurEvent = false;\n            };\n\n            const focus = event => {\n                ignoreBlurEvent = false;\n            };\n\n            const mousedown = event => {\n                ignoreBlurEvent = true;\n            };\n\n            el.addEventListener('blur', blur);\n            el.addEventListener('focus', focus);\n            el.addEventListener('keydown', keydown);\n            el.addEventListener('mousedown', mousedown);\n        });\n    }\n\n};\n</script>\n","export default {\n\n    methods: {\n\n        getSlot(slot) {\n            return this.$slots[slot];\n        },\n\n        hasSlot(slot) {\n            return !!this.$slots[slot];\n        },\n\n        hasSlots(slots) {\n            for(let i in slots) {\n                if(!this.hasSlot(slots[i])) {\n                    return false;\n                }\n            }\n        }\n\n    },\n\n    computed: {\n\n        hasDefaultSlot() {\n            return this.hasSlot('default');\n        }\n\n    }\n\n};\n","<template>\n\n    <div :class=\"mergeClasses(className, colorableClasses)\">\n        <slot/>\n    </div>\n\n</template>\n\n<script>\nimport HasSlots from '../../Mixins/HasSlots';\nimport Colorable from '../../Mixins/Colorable';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'card',\n\n    mixins: [\n        HasSlots,\n        Colorable,\n        MergeClasses\n    ],\n\n    computed: {\n\n        className() {\n            return this.$options.name;\n        }\n\n    }\n\n};\n</script>\n","<template>\n\n    <btn-group class=\"card-btn-group\">\n        <slot/>\n    </btn-group>\n\n</template>\n\n<script>\nimport Card from './Card';\n\nexport default {\n\n    name: 'card-btn-group',\n\n    extends: Card\n\n};\n</script>\n\n<style lang=\"scss\">\n@import './node_modules/bootstrap/scss/functions.scss';\n@import './node_modules/bootstrap/scss/variables.scss';\n\n.card {\n    .card-btn-group,\n    .btn-group.card-btn-group {\n        flex: 1;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n\n        & > .btn {\n            flex: 1;\n            width: 100%;\n            text-align: center;\n            border-radius: 0;\n\n            &:not(:last-child)::after {\n                content: '';\n                position: absolute;\n                top: 50%;\n                right: 0;\n                padding: $font-size-base;\n                transform: translateY(-50%);\n                border-right: 1px solid $card-border-color;\n            }\n        }\n    }\n}\n</style>\n","<template>\n\n    <div class=\"card-deck\">\n        <slot/>\n    </div>\n\n</template>\n\n<script>\nexport default {\n\n    name: 'card-deck'\n\n};\n</script>\n","<template>\n\n    <component :is=\"tag\" :class=\"mergeClasses(className, colorableClasses)\">\n        <slot/>\n    </component>\n\n</template>\n\n<script>\nimport Card from './Card';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'card-header',\n\n    extends: Card,\n\n    mixins: [\n        MergeClasses\n    ],\n\n    props: {\n\n        /**\n         * The component's HTML tag name\n         *\n         * @property String\n         */\n        tag: {\n            type: String,\n            default: 'h5'\n        }\n\n    }\n\n};\n</script>\n","<template>\n\n    <div :class=\"mergeClasses(className)\" class=\"d-flex justify-content-center align-items-center\" :style=\"{height: unit(height)}\">\n        <div v-if=\"background\" class=\"card-img-bg\" :style=\"{background: background ? `url(${this.src})` : null, overflow: blur ? 'hidden' : 'inherit', filter: blur ? `blur(${unit(blur)})` : null}\"/>\n        <img v-if=\"!background && src\" :src=\"src\" :alt=\"alt\" class=\"img-fluid\"/>\n        <div class=\"card-img-content\" :class=\"{'text-truncate': textTruncate}\">\n            <slot/>\n        </div>\n    </div>\n\n</template>\n\n<script>\nimport Card from './Card';\nimport unit from '../../Helpers/Unit';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'card-img',\n\n    extends: Card,\n\n    mixins: [\n        MergeClasses\n    ],\n\n    props: {\n\n        /**\n         * The alt attribute\n         *\n         * @property String\n         */\n        alt: String,\n\n        /**\n         * Display the image as a background image fit with CSS cover.\n         *\n         * @property String\n         */\n        background: Boolean,\n\n        /**\n         * The amount to blur the background image.\n         *\n         * @property String\n         */\n        blur: [Number, String],\n\n        /**\n         * The height attribute\n         *\n         * @property String\n         */\n        height: [Number, String],\n\n        /**\n         * Truncate the text in the content\n         *\n         * @property String\n         */\n        textTruncate: Boolean,\n\n        /**\n         * The src attribute\n         *\n         * @property String\n         */\n        src: String\n\n    },\n\n    methods: {\n\n        unit(value) {\n            return unit(value);\n        }\n\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n.card-img,\n.card-img-top,\n.card-img-bottom {\n    color: white;\n    position: relative;\n    text-shadow: 0 0 20px rgba(0, 0, 0, .5);\n\n    .card-img-bg {\n        z-index: 0;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-size: cover !important;\n        background-position: center !important;\n        background-repeat: no-repeat !important;\n\n        & > img:first-child {\n            position: absolute;\n        }\n    }\n\n    .card-img-content {\n        flex: 1;\n        z-index: 1;\n        position: relative;\n    }\n\n    /*\n    & > :not(img) {\n        position: absolute;\n    }\n    */\n}\n</style>\n","<template>\n\n    <router-link :to=\"href\" :class=\"mergeClasses(className, colorableClasses)\" @click=\"onClick\">\n        <slot/>\n    </router-link>\n\n</template>\n\n<script>\nimport Card from './Card';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'card-link',\n\n    extends: Card,\n\n    mixins: [\n        MergeClasses\n    ],\n\n    props: {\n\n        /**\n         * The alt attribute\n         *\n         * @property String\n         */\n        alt: String,\n\n        /**\n         * The href attribute\n         *\n         * @property String\n         */\n        href: String,\n\n        /**\n         * The to attribute\n         *\n         * @property String\n         */\n        to: [Object, String]\n\n    },\n\n    methods: {\n\n        onClick(event) {\n            this.$emit('click', event);\n        }\n\n    }\n\n};\n</script>\n","<template>\n\n    <h6 :class=\"mergeClasses(className, colorableClasses)\">\n        <slot/>\n    </h6>\n\n</template>\n\n<script>\nimport Card from './Card';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'card-subtitle',\n\n    extends: Card,\n\n    mixins: [\n        MergeClasses\n    ]\n\n};\n</script>\n","<template>\n\n    <h5 :class=\"mergeClasses(className, colorableClasses)\">\n        <slot/>\n    </h5>\n\n</template>\n\n<script>\nimport Card from './Card';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'card-title',\n\n    mixins: [\n        Card,\n        MergeClasses\n    ]\n\n};\n</script>\n","<template>\n\n    <div :class=\"mergeClasses(this.custom ? 'custom-radio' : '', controlClass, inline ? inlineClass : '')\">\n\n        <input\n            v-bind-events\n            v-bind=\"controlAttributes\"\n            type=\"radio\"\n            :id=\"$attrs.id || hash\"\n            :value=\"value\"\n            :checked=\"checkedValue === value\"\n            @change=\"update\"\n        />\n\n        <label :for=\"$attrs.id || hash\" :class=\"mergeClasses(labelClass)\">\n            <slot>{{label}}</slot>\n            <slot name=\"feedback\">\n                <form-feedback v-if=\"validFeedback\" v-html=\"validFeedback\" valid />\n                <form-feedback v-if=\"invalidFeedback\" v-html=\"invalidFeedback\" invalid />\n            </slot>\n        </label>\n\n        <slot name=\"help\">\n            <help-text v-if=\"helpText\" v-html=\"helpText\" />\n        </slot>\n    </div>\n\n</template>\n\n<script>\nimport HelpText from '../HelpText';\nimport hash from '../../Helpers/Hash';\nimport FormFeedback from '../FormFeedback';\nimport prefix from '../../Helpers/Prefix';\nimport Colorable from '../../Mixins/Colorable';\nimport FormControl from '../../Mixins/FormControl';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'radio-field',\n\n    components: {\n        HelpText,\n        FormFeedback\n    },\n\n    mixins: [\n        Colorable,\n        FormControl,\n        MergeClasses\n    ],\n\n    model: {\n        prop: 'checkedValue',\n        event: 'change'\n    },\n\n    props: {\n\n        /**\n         * An array of event names that correlate with callback functions\n         *\n         * @property Function\n         */\n        bindEvents: {\n            type: Array,\n            default() {\n                return ['focus', 'blur', 'input', 'click', 'keyup', 'keydown', 'progress'];\n            }\n        },\n\n        /**\n         * The checked values\n         *\n         * @property String\n         */\n        checked: Boolean,\n\n        /**\n         * The checked value\n         *\n         * @property String\n         */\n        checkedValue: [Boolean, Number, String, Object],\n\n        /**\n         * The class name assigned to the control element\n         *\n         * @property String\n         */\n        defaultControlClass: {\n            type: String,\n            default: 'form-check'\n        },\n\n        /**\n         * Display the form field and label inline\n         *\n         * @property Function\n         */\n        inline: Boolean\n\n    },\n\n    computed: {\n\n        controlClasses() {\n            return this.mergeClasses(\n                (this.spacing || ''),\n                this.inputClass,\n                ((this.valid || this.validFeedback) ? 'is-valid' : ''),\n                ((this.invalid || this.invalidFeedback) ? 'is-invalid' : '')\n            );\n        },\n\n        hash() {\n            return hash(this._uid.toString());\n        },\n\n        labelClass() {\n            return prefix('label', this.controlClass);\n        },\n\n        inputClass() {\n            return prefix('input', this.controlClass);\n        },\n\n        inlineClass() {\n            return this.inline ? prefix('inline', this.controlClass) : '';\n        }\n\n    },\n\n    methods: {\n\n        update(event) {\n            this.$emit('change', event.target.value);\n            this.$emit('input', event);\n        }\n\n    }\n\n};\n</script>\n","<template>\n\n    <div :class=\"mergeClasses(this.custom ? 'custom-checkbox' : '', controlClass, inline ? inlineClass : '')\">\n\n        <input\n            v-bind-events\n            v-bind=\"controlAttributes\"\n            type=\"checkbox\"\n            :id=\"$attrs.id || hash\"\n            :value=\"value\"\n            :checked=\"checkedValues.indexOf(value) !== -1\"\n            @input=\"update\"/>\n\n        <label :for=\"$attrs.id || hash\" :class=\"mergeClasses(labelClass)\">\n            <slot>{{label}}</slot>\n            <slot name=\"feedback\">\n                <form-feedback v-if=\"validFeedback\" v-html=\"validFeedback\" valid />\n                <form-feedback v-if=\"invalidFeedback\" v-html=\"invalidFeedback\" invalid />\n            </slot>\n        </label>\n\n        <slot name=\"help\">\n            <help-text v-if=\"helpText\" v-html=\"helpText\" />\n        </slot>\n    </div>\n</template>\n\n<script>\nimport RadioField from '../RadioField';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'checkbox-field',\n\n    extends: RadioField,\n\n    mixins: [\n        MergeClasses\n    ],\n\n    model: {\n        prop: 'checkedValues',\n        event: 'change'\n    },\n\n    props: {\n\n        /**\n         * The checked values\n         *\n         * @property String\n         */\n        checkedValues: {\n            type: Array,\n            default() {\n                return [];\n            }\n        }\n\n    },\n\n    methods: {\n\n        update(event) {\n            const value = event.target.value;\n            const checked = this.checkedValues.slice(0);\n            const index = this.checkedValues.indexOf(value);\n\n            if(index === -1) {\n                checked.push(value);\n            }\n            else {\n                checked.splice(index, 1);\n            }\n\n            this.$emit('change', checked);\n            this.$emit('input', event);\n        }\n\n    }\n};\n</script>\n","<template>\n\n    <div class=\"container\"><slot/></div>\n\n</template>\n\n<script>\nexport default {\n\n    name: 'container'\n\n};\n</script>\n","<template>\n\n    <div class=\"dropzone\" :class=\"{'is-dragging': isDragging}\" @drop.prevent=\"onDrop\" @dragover.prevent=\"onDragover\" @dragenter.prevent=\"onDragenter\" @dragleave.prevent=\"onDragleave\">\n        <slot name=\"placeholder\">\n            <div class=\"dropzone-placeholder text-center\">\n                <card>\n                    <card-body>\n                        <h1 class=\"mt-4\">Drag & Drop</h1>\n                        <p>Drag and drop your files here to upload them!</p>\n                        <div class=\"mt-3\"><i class=\"fa fa-image\"/></div>\n                    </card-body>\n                </card>\n            </div>\n        </slot>\n        <slot/>\n    </div>\n\n</template>\n\n<script>\nimport Card from '../Card';\nimport CardBody from '../Card/CardBody';\n\nexport default {\n\n    name: 'dropzone',\n\n    components: {\n        Card,\n        CardBody\n    },\n\n    methods: {\n\n        onDrop(event) {\n            this.isDragging = false;\n            this.$emit('drop', event);\n        },\n\n        onDragover(event) {\n            this.isDragging = true;\n            this.$emit('dragover', event);\n        },\n\n        onDragenter(event) {\n            this.isDragging = true;\n            this.$emit('dragenter', event);\n            this.onDragover(event);\n        },\n\n        onDragleave(event) {\n            this.isDragging = false;\n            this.$emit('dragleave', event);\n        }\n\n    },\n\n    data() {\n        return {\n            files: null,\n            isDragging: false\n        };\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n.dropzone {\n    position: relative;\n\n    p {\n        font-size: 18px;\n    }\n\n    .fa-image {\n        font-size: 100px;\n    }\n\n    .dropzone-placeholder {\n        display: none;\n        position: absolute;\n        top: 0;\n        left: 0;\n        z-index: 2;\n        width: 100%;\n        height: 100%;\n        background: white;\n    }\n\n    &.is-dragging .dropzone-placeholder {\n        display: block;\n    }\n}\n</style>\n","<template>\n\n    <div class=\"file-preview\" :class=\"{'has-image': !!image}\">\n\n        <div class=\"file-preview-inner\">\n\n            <a v-if=\"!hideClose\" href=\"#\" class=\"file-preview-close\" @click.prevent=\"$emit('close', file)\">\n                <i class=\"fa fa-times-circle\"/>\n            </a>\n\n            <div v-if=\"!!poster || isImage\" class=\"file-preview-image\">\n                <img v-if=\"!!poster || !!image\" :src=\"poster || image\" class=\"file-preview-thumbnail\" @load=\"onLoad\"/>\n            </div>\n\n            <div v-else v-ready=\"() => this.$emit('loaded')\" class=\"file-preview-icon\">\n                <i class=\"fa\" :class=\"{'fa-file-video-o': isVideo, 'fa-file-o': !isVideo}\"/>\n            </div>\n\n            <progress-bar\n                v-if=\"progress || isImage && loaded !== false\"\n                v-ready=\"readFile\"\n                :value=\"progress || loaded || 0\"\n                :height=\"10\"\n                class=\"mt-3\"/>\n\n            <div class=\"file-preview-filename\" v-html=\"name\"/>\n            <div class=\"file-preview-filesize\">({{size}})</div>\n        </div>\n\n    </div>\n\n</template>\n\n<script>\nimport moment from 'moment';\nimport ProgressBar from '../ProgressBar';\nimport { isFunction } from '../../Helpers/Functions';\nimport readFile from '../../Helpers/ReadFile/ReadFile';\n\nexport default {\n\n    name: 'file-preview',\n\n    components: {\n        ProgressBar\n    },\n\n    directives: {\n        ready: {\n            inserted(el, binding, vnode) {\n                if(isFunction(binding.value)) {\n                    vnode.context.$nextTick(binding.value);\n                }\n            }\n        }\n    },\n\n    props: {\n\n        /**\n         * Hide the close button for the preview\n         *\n         * @property Object\n         */\n        hideClose: Boolean,\n\n        /**\n         * The uploaded File object\n         *\n         * @property Object\n         */\n        file: {\n            type: [Object, File],\n            required: true\n        },\n\n        /**\n         * An image URL to instead of using the file reader.\n         * @property {String}\n         */\n        poster: String,\n\n        /**\n         * Progress that can be passed from a parent comparent, for instance\n         * use to show an ajax request with a single progress bar. If a progress\n         * value is passed, even a 0, the progress bar will not be used to show\n         * the progress of the file reader.\n         * @property {Number}\n         */\n        progress: {\n            type: Number,\n            default: undefined\n        }\n\n    },\n\n    computed: {\n\n        /**\n         * Get the file name\n         *\n         * @property String\n         */\n        name() {\n            return this.file instanceof File ? this.file.name : this.file.orig_filename;\n        },\n\n        /**\n         * Get the file extension\n         *\n         * @property String\n         */\n        extension() {\n            return this.file instanceof File ? this.file.name.split('.').pop().toLowerCase() : this.file.extension;\n        },\n\n        /**\n         * Get the file formatted size\n         *\n         * @property String\n         */\n        size() {\n            return this.bytesToSize(this.file.size);\n        },\n\n        /**\n         * Get the file type\n         *\n         * @property String\n         */\n        type() {\n            return this.file instanceof File ? this.file.type : this.file.mime;\n        },\n\n        /**\n         * Check to see if the file is an image.\n         *\n         * @property String\n         */\n        isImage() {\n            return !!this.type.match(/^image/);\n        },\n\n        /**\n         * Check to see if the file is a video.\n         *\n         * @property String\n         */\n        isVideo() {\n            return !!this.type.match(/^video/);\n        },\n\n        /**\n         * Get the last time the file was modified (as timestamp)\n         *\n         * @property String\n         */\n        lastModified() {\n            return this.file instanceof File ? this.file.lastModified : null;\n        },\n\n        /**\n         * Get the last time the file was modified (as Date)\n         *\n         * @property String\n         */\n        lastModifiedDate() {\n            return this.file instanceof File ? this.file.lastModifiedDate : null;\n        }\n\n    },\n\n    methods: {\n\n        readFile() {\n            if(this.file instanceof File) {\n                const start = moment();\n\n                this.loaded = 0;\n\n                this.$nextTick(() => {\n                    readFile(this.file, e => {\n                        if(e.lengthComputable) {\n                            this.$emit('progress', this.loaded = parseInt((e.loaded / e.total) * 100, 10));\n                        }\n                    }).then(event => {\n                        this.$emit('read', event);\n\n                        setTimeout(() => {\n                            this.image = event.target.result;\n                            this.$nextTick(() => {\n                                this.loaded = false;\n                            });\n                        }, 500 - moment().diff(start));\n                    }, error => {\n                        this.$emit('error', error);\n                    });\n                });\n            }\n        },\n\n        bytesToSize(bytes) {\n            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n            if(bytes === 0) return '0 Byte';\n            var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n            return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\n        },\n\n        onLoad(event) {\n            this.$emit('loaded');\n        }\n\n    },\n\n    data() {\n        return {\n            image: this.file.url,\n            loaded: this.file instanceof File ? 0 : false\n        };\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n$file-preview-close-width: 1rem * 2;\n$file-preview-close-height: 1rem * 2;\n\n.file-preview {\n    width: 100%;\n\n    .file-preview-inner {\n        position: relative;\n    }\n\n    .file-preview-close {\n        top: 0;\n        right: 0;\n        padding: 0;\n        width: 24px;\n        height: 24px;\n        background: white;\n        position: absolute;\n        border-radius: 100%;\n        transform: translate(33%, -33%);\n\n        i {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            font-size: 24px;\n            text-align: center;\n        }\n    }\n\n    .file-preview-icon {\n        text-align: center;\n        font-size: 60px;\n        padding: 1rem;\n    }\n\n    .file-preview-thumbnail {\n        width: 100%;\n        max-width: 100%;\n    }\n\n    .file-preview-filename {\n        overflow: hidden;\n        text-align: center;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    }\n\n    .file-preview-filename,\n    .file-preview-filesize {\n        text-align: center;\n    }\n\n}\n\n</style>\n","<template>\n    <div class=\"infinite-scrolling\" :style=\"{height: heightUnit, background: background}\">\n        <activity-indicator v-if=\"activity\" :size=\"size\" :type=\"type\" center/>\n    </div>\n</template>\n\n<script>\nimport unit from '../../Helpers/Unit';\nimport ActivityIndicator from '../ActivityIndicator';\n\nexport default {\n\n    name: 'infinite-scrolling',\n\n    components: {\n        ActivityIndicator\n    },\n\n    props: {\n\n        /**\n         * Is the activity indicator showing\n         *\n         * @property String\n         */\n        activity: Boolean,\n\n        /**\n         * The activity indicator background style\n         *\n         * @property String\n         */\n        background: String,\n\n        /**\n         * The activity indicator size\n         *\n         * @property String\n         */\n        height: {\n            type: Number,\n            default: 100\n        },\n\n        /**\n         * The activity indicator size\n         *\n         * @property String\n         */\n        size: String,\n\n        /**\n         * The activity indicator type\n         *\n         * @property String\n         */\n        type: String,\n\n        /**\n         * The scroll observer threshold for when an element is considered\n         * into view. Must be a validate between 0 and 1, and is a percentage.\n         *\n         * @property Number\n         */\n        threshold: {\n            type: Number,\n            default: 0.75,\n            validate(value) {\n                return value >= 0 && value <= 1;\n            }\n        }\n\n    },\n\n    methods: {\n\n        scrollIntoViewport(entry) {\n            this.$emit('scroll:in', entry);\n\n            if(!this.activity) {\n                this.$emit('load', entry);\n            }\n        },\n\n        scrollOutViewport(entry) {\n            this.$emit('scroll:out', entry);\n        }\n\n    },\n\n    computed: {\n\n        heightUnit() {\n            return unit(this.height);\n        }\n\n    },\n\n    mounted() {\n        this.$nextTick(() => {\n            new IntersectionObserver((entries, observer) => {\n                entries.forEach(entry => {\n                    if(entry.isIntersecting && !this.hasScrolledIntoViewport) {\n                        this.scrollIntoViewport(entry, observer);\n                        this.hasScrolledIntoViewport = true;\n                    }\n                    else if(this.hasScrolledIntoViewport) {\n                        this.scrollOutViewport(entry, observer);\n                        this.hasScrolledIntoViewport = false;\n                    }\n                });\n            }, {\n                threshold: this.threshold\n            }).observe(this.$el);\n        });\n    },\n\n    data() {\n        return {\n            hasScrolledIntoViewport: false\n        };\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n.infinite-scrolling {\n    position: relative;\n\n}\n</style>\n","<template>\n\n    <span class=\"input-group-text\">\n        <slot/>\n    </span>\n\n</template>\n\n<script>\nexport default {\n\n    name: 'input-group-text'\n\n};\n</script>\n","<template>\n\n    <div class=\"input-group-append\">\n        <input-group-text v-if=\"text\">\n            <slot/>\n        </input-group-text>\n        <slot v-else/>\n    </div>\n\n</template>\n\n<script>\nimport InputGroupText from './InputGroupText';\n\nexport default {\n\n    name: 'input-group-append',\n\n    components: {\n        InputGroupText\n    },\n\n    props: {\n\n        /**\n         * The type attribute\n         *\n         * @property String\n         */\n        text: Boolean\n\n    }\n\n};\n</script>\n","<template>\n\n    <div class=\"input-group-prepend\">\n        <input-group-text v-if=\"text\">\n            <slot/>\n        </input-group-text>\n        <slot v-else/>\n    </div>\n\n</template>\n\n<script>\nimport InputGroupText from './InputGroupText';\n\nexport default {\n\n    name: 'input-group-prepend',\n\n    components: {\n        InputGroupText\n    },\n\n    props: {\n\n        /**\n         * The type attribute\n         *\n         * @property String\n         */\n        text: Boolean\n\n    }\n\n};\n</script>\n","<template>\n\n    <div class=\"input-group\" :class=\"mergeClasses(colorableClasses, sizeableClass)\">\n\n        <slot name=\"prepend\">\n            <template v-if=\"prepend instanceof Array\">\n                <input-group-prepend>\n                    <input-group-text v-for=\"value in prepend\" :key=\"value\" v-html=\"value\"/>\n                </input-group-prepend>\n            </template>\n            <template v-else-if=\"prepend\">\n                <input-group-prepend text>{{prepend}}</input-group-prepend>\n            </template>\n        </slot>\n\n        <slot/>\n\n        <slot name=\"append\">\n            <template v-if=\"append instanceof Array\">\n                <input-group-append>\n                    <input-group-text v-for=\"value in append\" :key=\"value\" v-html=\"value\"/>\n                </input-group-append>\n            </template>\n            <template v-else-if=\"append\">\n                <input-group-append text>{{append}}</input-group-append>\n            </template>\n        </slot>\n    </div>\n\n</template>\n\n<script>\nimport HasSlots from '../../Mixins/HasSlots';\nimport Sizeable from '../../Mixins/Sizeable';\nimport InputGroupText from './InputGroupText';\nimport Colorable from '../../Mixins/Colorable';\nimport InputGroupAppend from './InputGroupAppend';\nimport InputGroupPrepend from './InputGroupPrepend';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'input-group',\n\n    components: {\n        InputGroupText,\n        InputGroupAppend,\n        InputGroupPrepend\n    },\n\n    mixins: [\n        HasSlots,\n        Sizeable,\n        Colorable,\n        MergeClasses\n    ],\n\n    props: {\n\n        append: [Array, Number, String],\n\n        prepend: [Array, Number, String]\n\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n.input-group > div:not(:first-child) .form-control,\n.input-group > div:not(:first-child) .custom-control,\n.input-group > div:not(:first-child) .custom-select {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n}\n.input-group > div:not(:last-child) .form-control,\n.input-group > div:not(:last-child) .custom-control,\n.input-group > div:not(:last-child) .custom-select, {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n}\n</style>\n","<template>\n\n    <form-group :group=\"group\" :class=\"formGroupClasses\">\n\n        <slot name=\"label\">\n            <form-label v-if=\"label\" :for=\"$attrs.id\" v-html=\"label\" />\n        </slot>\n\n        <div :class=\"controlClasses\" tabindex=\"0\" @click=\"toggle()\" @keyup.32=\"toggle()\" @keyup.37=\"toggle(offValue)\" @keyup.39=\"toggle(onValue)\">\n            <div class=\"light-switch-handle\"></div>\n        \t<div class=\"light-switch-container\">\n        \t\t<div class=\"light-switch-label on-value\"></div>\n        \t\t<div class=\"light-switch-label off-value\"></div>\n        \t</div>\n        </div>\n\n        <form-control :name=\"name\" :value=\"value\" :id=\"$attrs.id\" class=\"d-none\"/>\n\n        <slot name=\"feedback\">\n            <form-feedback v-if=\"validFeedback\" v-html=\"validFeedback\" valid />\n            <form-feedback v-if=\"invalidFeedback\" v-html=\"invalidFeedback\" invalid />\n        </slot>\n\n        <slot name=\"help\">\n            <help-text v-if=\"helpText\" v-html=\"helpText\" />\n        </slot>\n\n    </form-group>\n\n</template>\n\n<script>\nimport HelpText from '../HelpText';\nimport FormGroup from '../FormGroup';\nimport FormLabel from '../FormLabel';\nimport FormFeedback from '../FormFeedback';\nimport { isUndefined } from '../../Helpers/Functions';\nimport FormControl from '../FormControl';\nimport FormControlMixin from '../../Mixins/FormControl';\n\nexport default {\n\n    name: 'light-switch-field',\n\n    components: {\n        HelpText,\n        FormGroup,\n        FormLabel,\n        FormControl,\n        FormFeedback\n    },\n\n    mixins: [\n        FormControlMixin\n    ],\n\n    props: {\n\n        /**\n         * The class name assigned to the control element\n         *\n         * @property String\n         */\n        defaultControlClass: {\n            type: String,\n            default: 'form-control light-switch'\n        },\n\n        /**\n         * The class name assigned to the control element\n         *\n         * @property String\n         */\n        activeClass: {\n            type: String,\n            default: 'on'\n        },\n\n        /**\n         * The class name assigned to the control element\n         *\n         * @property String\n         */\n        onValue: {\n            default: 1\n        },\n\n        /**\n         * The class name assigned to the control element\n         *\n         * @property String\n         */\n        offValue: {\n            default: 0\n        }\n\n    },\n\n    computed: {\n\n        isActive: function() {\n            return this.value === this.onValue;\n        },\n\n        controlClasses() {\n            return [\n                this.controlClass,\n                this.controlSizeClass,\n                (this.spacing || ''),\n                (this.invalidFeedback ? 'is-invalid' : ''),\n                (this.dragging ? 'is-dragging' : ''),\n                (this.isActive ? 'is-active' : '')\n            ].join(' ');\n        }\n\n    },\n\n    methods: {\n\n        getTransitionInMilliseconds() {\n            const duration = getComputedStyle(this.$el.querySelector('.light-switch-handle')).transitionDuration;\n            const numeric = parseFloat(duration, 10);\n            const unit = duration.match(/m?s/);\n\n            switch (unit[0]) {\n            case 's':\n                return numeric * 1000;\n            case 'ms':\n                return numeric;\n            }\n\n            throw new Error(`\"${unit[0]}\" is not a valid unit of measure. Unit must be \"s\" (seconds) or \"ms\" (milliseconds).`);\n        },\n\n        toggle(value) {\n            this.$emit('input', !isUndefined(value) ? value : (this.isActive ? this.offValue : this.onValue));\n        }\n\n    },\n\n    watch: {\n        value() {\n            this.dragging = true;\n\n            setTimeout(() => {\n                this.dragging = false;\n            }, this.getTransitionInMilliseconds());\n        }\n    },\n\n    data() {\n        return {\n            dragging: false\n        };\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n@import './node_modules/bootstrap/scss/functions.scss';\n@import './node_modules/bootstrap/scss/variables.scss';\n@import './node_modules/bootstrap/scss/mixins.scss';\n\n$light-switch-animation-easing: ease;\n$light-switch-animation-length: 1s / 3;\n$light-switch-handle-width: $font-size-base * 2;\n$light-switch-handle-height: $light-switch-handle-width;\n$light-switch-size-width: $light-switch-handle-width * 1.5;\n$light-switch-size-height: $light-switch-handle-height;\n$light-switch-label-width: $light-switch-handle-width;\n$light-switch-label-height: $light-switch-handle-height;\n\n@mixin light-switch-size($size, $modifier) {\n    $handle-width: $light-switch-handle-width * $modifier;\n    $handle-height: $handle-width;\n    $size-width: $handle-width * 1.5;\n    $size-height: $handle-height;\n    $label-width: $handle-width;\n    $label-height: $handle-height;\n\n    &.light-switch-#{$size} {\n        padding: 0;\n    \twidth: $size-width;\n    \theight: $handle-height;\n    \tborder-radius: $handle-width;\n\n        .light-switch-handle {\n            width: $handle-width;\n            height: $handle-height;\n        }\n\n        .light-switch-container {\n            left: -$handle-width / 2;\n            width: $label-width * 2;\n            height: $label-height;\n        }\n\n        &.is-active {\n            .light-switch-handle {\n                left: $handle-width / 2;\n            }\n        }\n\n        .light-switch-label {\n            width: $label-width;\n            height: $label-height;\n\n            &.on-value {\n                //border-radius: $handle-width 0 0 $handle-width;\n            }\n\n            &.off-value {\n                //border-radius: 0 $handle-width $handle-width 0;\n            }\n        }\n    }\n}\n\n.light-switch {\n    padding: 0;\n\tposition: relative;\n\tborder: none;\n\twidth: $light-switch-size-width;\n\theight: $light-switch-handle-height;\n\tborder-radius: $light-switch-handle-width;\n\toverflow: hidden;\n\tcursor: pointer;\n\t-webkit-user-select: none;\n\t-moz-user-select: none;\n\t-ms-user-select: none;\n\toverflow: hidden;\n\n    @include light-switch-size('xs', .5);\n    @include light-switch-size('sm', .75);\n    @include light-switch-size('md', 1);\n    @include light-switch-size('lg', 1.5);\n    @include light-switch-size('xl', 2);\n\n    @include form-validation-state(\"valid\", $form-feedback-valid-color);\n    @include form-validation-state(\"invalid\", $form-feedback-invalid-color);\n\n    &.is-invalid {\n        border: 1px solid $form-feedback-invalid-color;\n\n        & .light-switch-handle {\n\n\n        }\n\n        &:not(.is-active) .light-switch-handle {\n            background: $form-feedback-invalid-color;\n        }\n\n        .light-switch-label {\n            &.on-value {\n                left: 0;\n            }\n            &.off-value {\n                right: 0;\n            }\n        }\n    }\n\n    .light-switch-handle {\n        top: 0;\n        left: 0;\n        z-index: 1;\n        position: absolute;\n        border-radius: 100%;\n        transition: left $light-switch-animation-length $light-switch-animation-easing;\n        width: $light-switch-handle-width;\n        height: $light-switch-handle-height;\n        background: white;\n        background-image: radial-gradient(white, rgb(250, 250, 250) 50%, white 75%);\n        box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(0, 0, 0, 0.1);\n    }\n\n    .light-switch-container {\n        position: relative;\n        left: -$light-switch-handle-width / 2;\n        top: ($light-switch-handle-height -  $light-switch-label-height) / 2;\n        width: $light-switch-label-width * 2;\n        height: $light-switch-label-height;\n        transition: left $light-switch-animation-length $light-switch-animation-easing;\n    }\n\n    &:not(.is-active) {\n        &:not(.is-dragging) .on-value {\n            visibility: hidden;\n        }\n    }\n\n    &.is-active {\n        &:not(.is-dragging) .off-value {\n            visibility: hidden;\n        }\n\n        .light-switch-handle {\n            left: $light-switch-handle-width / 2;\n        }\n\n        .light-switch-container {\n            left: 0;\n        }\n    }\n\n    .light-switch-label {\n        position: absolute;\n        width: $light-switch-label-width;\n        height: $light-switch-label-height;\n        //box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1);\n\n        &.on-value {\n            left: 0;\n            background: #00b007;\n            //border-radius: $light-switch-handle-width 0 0 $light-switch-handle-width;\n        }\n\n        &.off-value {\n            right: 0;\n            background: #ebedef;\n            //border-radius: 0 $light-switch-handle-width $light-switch-handle-width 0;\n        }\n    }\n\n\n}\n\n</style>\n","<template>\n    <router-link v-if=\"to\" :to=\"to\" :class=\"classes\" @click=\"$emit('click', $event)\">\n        <slot>{{label}}</slot> <badge v-if=\"badge\" v-bind=\"badgeOptions\"></badge>\n    </router-link>\n    <a v-else-if=\"href\" :href=\"href\" :class=\"classes\" @click=\"$emit('click', $event)\">\n        <slot>{{label}}</slot> <badge v-if=\"badge\" v-bind=\"badgeOptions\"></badge>\n    </a>\n    <button v-else-if=\"action\" type=\"button\" :class=\"classes\" @click.prevent=\"$emit('click', $event)\">\n        <slot>{{label}}</slot> <badge v-if=\"badge\" v-bind=\"badgeOptions\"></badge>\n    </button>\n    <div v-else :class=\"classes\" @click=\"$emit('click', $event)\">\n        <slot>{{label}}</slot> <badge v-if=\"badge\" v-bind=\"badgeOptions\"></badge>\n    </div>\n</template>\n\n<script>\nimport Badge from '../Badge';\nimport prefix from '../../Helpers/Prefix/Prefix';\nimport { isObject } from '../../Helpers/Functions';\n\nexport default {\n\n    components: {\n        Badge\n    },\n\n    props: {\n\n        /**\n         * The badge label (if number or string) or object of options to pass to\n         * the component.\n         *\n         * @property String|Object\n         */\n        badge: [Number, String, Object],\n\n        /**\n         * The list group item href attribute.\n         *\n         * @property String\n         */\n        href: String,\n\n        /**\n         * The list group item variant.\n         *\n         * @property String\n         */\n        variant: String,\n\n        /**\n         * Optionally pass the item as a object to use programmatically later.\n         *\n         * @property String\n         */\n        item: Object,\n\n        /**\n         * The list group item an action, or clickable item.\n         *\n         * @property Boolean\n         */\n        action: {\n            type: Boolean,\n            default: false\n        },\n\n        /**\n         * The list group item active.\n         *\n         * @property Boolean\n         */\n        active: {\n            type: Boolean,\n            default: false\n        },\n\n        /**\n         * The list group item disabled.\n         *\n         * @property Boolean\n         */\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n\n        /**\n         * The list item label.\n         *\n         * @property Object\n         */\n        label: {\n            type: [Number, String],\n            value: null\n        },\n\n        /**\n         * The to attribute to be passed to a <router-link> component.\n         *\n         * @property String\n         */\n        to: [String, Object]\n\n    },\n\n    computed: {\n\n        classes() {\n            const classes = prefix({\n                'action': this.action\n            }, 'list-group-item');\n\n            classes['list-group-item'] = true;\n            classes['active'] = this.active;\n            classes['disabled'] = this.disabled;\n\n            if(this.variant) {\n                classes[prefix(this.variant, 'list-group-item')] = true;\n            }\n\n            return classes;\n        },\n\n        badgeOptions() {\n            return isObject(this.badge) ? this.badge : {\n                label: this.badge\n            };\n        }\n\n    },\n\n    watch: {\n\n        active(value, prevValue) {\n            this.$emit('toggle', value);\n            this.$emit(value ? 'activate' : 'deactivate');\n        }\n\n    }\n\n};\n</script>\n","<template>\n    <div class=\"list-group\" :class=\"classes\">\n        <slot/>\n    </div>\n</template>\n\n<script>\nimport { each } from '../../Helpers/Functions';\nimport ListGroupItem from './ListGroupItem';\nimport prefix from '../../Helpers/Prefix/Prefix';\n\nexport default {\n\n    components: {\n        ListGroupItem\n    },\n\n    props: {\n\n        /**\n         * The list group appear flush (without some borders).\n         *\n         * @property Boolean\n         */\n        flush: {\n            type: Boolean,\n            default: false\n        },\n\n        /**\n         * Can activate multiple list items\n         *\n         * @property Boolean\n         */\n        multiple: {\n            type: Boolean,\n            default: false\n        }\n\n    },\n\n    computed: {\n        classes() {\n            return prefix({\n                'flush': this.flush\n            }, 'list-group');\n        }\n    },\n\n    methods: {\n\n        bindEventsToChildren() {\n            each(this.$children, child => {\n                child.$off('click', event => this.onClickItem(event, child));\n                child.$on('click', event => this.onClickItem(event, child));\n            });\n        },\n\n        /**\n         * The callback function for the `click` event.\n         *\n         * @return void\n         */\n        onClick(event) {\n            this.$emit('click', event);\n        },\n\n        /**\n         * The callback function for the child `click` events.\n         *\n         * @return void\n         */\n        onClickItem(event, child) {\n            this.$emit('item:click', event, child);\n        }\n\n    },\n\n    mounted() {\n        this.bindEventsToChildren();\n    },\n\n    updated() {\n        this.bindEventsToChildren();\n    }\n\n};\n</script>\n","<template>\n    <div class=\"modal-body\"><slot/></div>\n</template>\n\n<script>\nexport default {\n\n    name: 'modal-body'\n\n};\n</script>\n","<template>\n    <div class=\"modal-dialog\" role=\"document\"><slot/></div>\n</template>\n\n<script>\nexport default {\n\n    name: 'modal-dialog'\n\n};\n</script>\n","<template>\n    <h5 class=\"modal-title\"><slot/></h5>\n</template>\n\n<script>\nexport default {\n\n    name: 'modal-title'\n\n};\n</script>\n","<template>\n    <div class=\"modal-header\">\n        <slot name=\"title\">\n            <modal-title><slot/></modal-title>\n        </slot>\n\n        <slot name=\"close-button\">\n            <button v-if=\"closeable\" type=\"button\" class=\"close\" aria-label=\"ariaLabel\" @click=\"$emit('close')\">\n                <span aria-hidden=\"true\">&times;</span>\n            </button>\n        </slot>\n    </div>\n</template>\n\n<script>\nimport ModalTitle from './ModalTitle';\n\nexport default {\n\n    name: 'modal-header',\n\n    components: {\n        ModalTitle\n    },\n\n    props: {\n\n        ariaLabel: {\n            type: String,\n            default: 'Close'\n        },\n\n        closeable: {\n            type: Boolean,\n            default: true\n        }\n\n    }\n\n};\n</script>\n","<template>\n    <div class=\"modal-footer\"><slot/></div>\n</template>\n\n<script>\nexport default {\n\n    name: 'modal-footer'\n\n};\n</script>\n","<template>\n    <div class=\"modal-content\"><slot/></div>\n</template>\n\n<script>\nexport default {\n\n    name: 'modal-content'\n\n};\n</script>\n","<template>\n    <div class=\"modal-backdrop\" :class=\"{'fade': fade, 'show': show}\">\n        <slot/>\n    </div>\n</template>\n\n<script>\nexport default {\n\n    name: 'modal-backdrop',\n\n    props: {\n\n        /**\n         * Show the modal with a fade effect.\n         *\n         * @property Boolean\n         */\n        fade: {\n            type: Boolean,\n            default: true\n        },\n\n        /**\n         * Is the modal showing.\n         *\n         * @property Boolean\n         */\n        show: {\n            type: Boolean,\n            default: true\n        }\n\n    }\n\n};\n</script>\n","import { each, isString } from '../../Helpers/Functions';\nimport transition from '../../Helpers/Transition';\n\nexport default {\n\n    props: {\n\n        /**\n         * Show the triggerable element with a animated fade effect.\n         *\n         * @type {Boolean}\n         */\n        animation: {\n            type: Boolean,\n            default: true\n        },\n\n        /**\n         * Is the triggerable element showing.\n         *\n         * @property Boolean\n         */\n        show: {\n            type: Boolean,\n            defaut: false\n        },\n\n        /**\n         * The target element used to position the popover.\n         *\n         * @type {String|Element|Boolean}\n         */\n        target: {\n            type: [String, Element, Boolean],\n            default: false\n        },\n\n        /**\n         * How the modal is triggered - click | hover | focus | manual. You may\n         * pass multiple triggers; separate them with a space. `manual` cannot\n         * be combined with any other trigger.\n         *\n         * @type {String}\n         */\n        trigger: {\n            type: [String, Array],\n            default: 'click'\n        }\n\n    },\n\n    methods: {\n\n        /**\n         * Initialize the trigger event for the specified elements\n         *\n         * @param  {Element} el\n         * @return {void}\n         */\n        initializeTrigger(el) {\n            each(isString(this.trigger) ? this.trigger.split(' ') : this.trigger, trigger => {\n                el.addEventListener(trigger, event => {\n                    this.toggle();\n                });\n            });\n        },\n\n        /**\n         * Initialize the event triggers\n         *\n         * @return void\n         */\n        initializeTriggers() {\n            if(this.target && this.trigger !== 'manual') {\n                if(this.target instanceof Element) {\n                    this.initializeTrigger(this.target);\n                }\n                else {\n                    document.querySelectorAll(this.target).forEach(el => {\n                        this.initializeTrigger(el);\n                    });\n                }\n            }\n\n            if(this.show || !this.target) {\n                this.$nextTick(() => {\n                    this.isShowing = true;\n                });\n            }\n        },\n\n        /**\n         * Focus on the first field in the modal (if exists).\n         *\n         * @return this\n         */\n        focus() {\n            this.$nextTick(() => {\n                const el = this.$el.querySelector('.form-control, input, select, textarea');\n\n                if(el) {\n                    el.focus();\n                }\n                else {\n                    this.$el.focus();\n                }\n            });\n\n            return this;\n        },\n\n        /**\n         * Open the triggereable element\n         *\n         * @return this\n         */\n        open() {\n            this.isDisplaying = true;\n\n            this.$nextTick(() => {\n                transition(this.$el).then(delay => {\n                    this.isShowing = true;\n                    this.$emit('open');\n                });\n            });\n\n            return this;\n        },\n\n        /**\n         * Close the triggereable element\n         *\n         * @return this\n         */\n        close(event) {\n            transition(this.$el).then(delay => {\n                this.isDisplaying = false;\n                this.$emit('close', event);\n            });\n\n            this.isShowing = false;\n\n            return this;\n        },\n\n        /**\n         * Toggle the triggereable element's open/close method.\n         *\n         * @return this\n         */\n        toggle() {\n            if(!this.isShowing) {\n                this.open();\n            }\n            else {\n                this.close();\n            }\n\n            return this;\n        }\n\n    },\n\n    computed: {\n\n        triggerableClasses() {\n            return {\n                'fade': this.animation,\n                'show': this.isShowing\n            };\n        }\n\n    },\n\n    watch: {\n\n        isShowing(value) {\n            if(value) {\n                this.focus();\n            }\n        },\n\n        show(value) {\n            this.isShowing = value;\n        }\n\n    },\n\n    mounted() {\n        this.initializeTriggers();\n    },\n\n    data() {\n        return {\n            isDisplaying: this.show || !this.target,\n            isShowing: false\n        };\n    }\n\n};\n","<template>\n\n    <div class=\"modal\" :class=\"triggerableClasses\" :style=\"{display: isDisplaying ? 'block' : 'none'}\" tabindex=\"-1\" role=\"dialog\" @keydown.esc=\"cancel\">\n\n        <modal-backdrop v-if=\"backdrop\" ref=\"backdrop\"/>\n\n        <modal-dialog :class=\"{'modal-dialog-centered': center}\">\n\n            <modal-content>\n\n                <slot name=\"header\">\n                    <modal-header v-if=\"title\" @close=\"cancel\">{{title}}</modal-header>\n                </slot>\n\n                <slot name=\"body\">\n                    <component :is=\"!flush ? 'modal-body' : 'div'\" class=\"child-component\">\n                        <slot/>\n                    </component>\n                </slot>\n\n                <slot name=\"footer\">\n                    <modal-footer v-if=\"type\">\n                        <template v-if=\"type === 'alert'\">\n                            <btn-activity :activity=\"activity\" variant=\"primary\" @click=\"confirm\">{{okLabel}}</btn-activity>\n                        </template>\n                        <template v-else>\n                            <btn type=\"button\" variant=\"secondary\" @click=\"cancel\" v-html=\"cancelLabel\"/>\n                            <btn-activity :activity=\"activity\" variant=\"primary\" @click=\"confirm\">{{okLabel}}</btn-activity>\n                        </template>\n                    </modal-footer>\n                </slot>\n\n            </modal-content>\n\n        </modal-dialog>\n\n    </div>\n\n</template>\n\n<script>\nimport Btn from '../Btn';\nimport ModalBody from './ModalBody';\nimport ModalDialog from './ModalDialog';\nimport ModalHeader from './ModalHeader';\nimport ModalFooter from './ModalFooter';\nimport BtnActivity from '../BtnActivity';\nimport ModalContent from './ModalContent';\nimport ModalBackdrop from './ModalBackdrop';\nimport Triggerable from '../../Mixins/Triggerable';\n\nexport default {\n\n    name: 'modal',\n\n    components: {\n        Btn,\n        BtnActivity,\n        ModalBody,\n        ModalBackdrop,\n        ModalContent,\n        ModalDialog,\n        ModalHeader,\n        ModalFooter\n    },\n\n    mixins: [\n        Triggerable\n    ],\n\n    props: {\n\n        /**\n         * Show the modal activity indicator.\n         *\n         * @type {Boolean}\n         */\n        activity: Boolean,\n\n        /**\n         * Show the modal with a backdrop.\n         *\n         * @type {Boolean}\n         */\n        backdrop: {\n            type: Boolean,\n            default: true\n        },\n\n        /**\n         * Is the modal centered in the screen.\n         *\n         * @type {Boolean}\n         */\n        center: Boolean,\n\n        /**\n         * Is the modal content fixed position\n         *\n         * @type {Boolean}\n         */\n        closeable: {\n            type: Boolean,\n            default: true\n        },\n\n        /**\n         * Is the modal content flush with the modal edges? If true, no modal-body\n         * will be used to wrap the content.\n         *\n         * @type {Boolean}\n         */\n        flush: Boolean,\n\n        /**\n         * The ok label text.\n         *\n         * @type {String}\n         */\n        okLabel: {\n            type: String,\n            default: 'Ok'\n        },\n\n        /**\n         * The cancel label text.\n         *\n         * @type {String}\n         */\n        cancelLabel: {\n            type: String,\n            default: 'Cancel'\n        },\n\n        /**\n         * The modal title.\n         *\n         * @type {String}\n         */\n        title: String,\n\n        /**\n         * Is the modal type.\n         *\n         * @type {Boolean}\n         */\n        type: {\n            type: [Boolean, String],\n            default: false,\n            validate(value) {\n                return ['alert', 'confirm', 'prompt'].indexOf(value) !== -1;\n            }\n        }\n\n    },\n\n    methods: {\n\n        /**\n         * Mount the backdrop to the document body.\n         *\n         * @return {void}\n        mountBackdrop() {\n            if(!this.backdropComponent) {\n                this.backdropComponent = this.$refs.backdrop.$mount(\n                    document.body.appendChild(document.createElement('div'))\n                );\n            }\n        },\n        */\n\n        /**\n         * Unmount the backdrop from the document body.\n         *\n         * @return {void}\n        unmountBackdrop() {\n            if(this.backdropComponent) {\n                this.backdropComponent.$destroy();\n                this.backdropComponent.$el.remove();\n                this.backdropComponent = null;\n            }\n        },\n        */\n\n        /**\n         * Cancel the modal\n         *\n         * @return {void}\n         */\n        cancel(event) {\n            this.$emit('cancel', event);\n            this.close(event);\n        },\n\n        /**\n         * Confirm the modal\n         *\n         * @return {void}\n         */\n        confirm(event) {\n            this.$emit('confirm', event);\n        },\n\n        /**\n         * A callback for the escape function.\n         *\n         * @return {void}\n         */\n        onEsc(event) {\n            (this.type === 'confirm' || this.type === 'prompt') ? this.cancel(event) : this.close(event);\n        }\n\n    },\n\n    watch: {\n\n        isShowing(value) {\n            if(value) {\n                document.querySelector('body').classList.add('modal-open');\n                // this.mountBackdrop();\n            }\n            else {\n                document.querySelector('body').classList.remove('modal-open');\n                // this.unmountBackdrop();\n            }\n\n            this.$emit('update:show', value);\n        }\n\n    },\n\n    data() {\n        return {\n            backdropComponent: null,\n            isDisplaying: this.show || !this.target,\n            isShowing: false\n        };\n    },\n\n    mounted() {\n        this.initializeTriggers();\n    },\n\n    beforeRouteLeave(to, from, next) {\n        this.close();\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n.modal {\n    .modal-backdrop + .modal-dialog {\n        z-index: 1050;\n    }\n}\n</style>\n","<template>\n    <component class=\"navbar-brand\" :class=\"{'h1': h1}\" :is=\"component\" :to=\"to\" :href=\"href || to ? '#' : null\">\n        <img v-if=\"src\" class=\"d-inline-block align-center\" :src=\"src\" :width=\"unit(width)\" :height=\"unit(height)\" :alt=\"alt\"/>\n        <slot/>\n    </component>\n</template>\n\n<script>\nimport unit from '../../Helpers/Unit';\n\nexport default {\n\n    props: {\n\n        /**\n         * The img `alt` attribute. `src` must be define before this prop has\n         * any affect.\n         *\n         * @property Object\n         */\n        alt: String,\n\n        /**\n         * The HTML wrapping tag.\n         *\n         * @property Object\n         */\n        tag: String,\n\n        /**\n         * The img `width` attribute. `src` must be define before this prop has\n         * any affect.\n         *\n         * @property Object\n         */\n        width: [Number, String],\n\n        /**\n         * The img `height` attribute. `src` must be define before this prop has\n         * any affect.\n         *\n         * @property Object\n         */\n        height: [Number, String],\n\n        /**\n         * The `to` attribute that is passed to the component.\n         *\n         * @property Object\n         */\n        to: [Object, String],\n\n        /**\n         * The `href` attribute that is passed to the component.\n         *\n         * @property Object\n         */\n        href: String,\n\n        /**\n         * Append the `h1` class to increase the display size\n         *\n         * @property Object\n         */\n        h1: Boolean,\n\n        /**\n         * If a `src` attribute is passed, then use it to add an img tag\n         *\n         * @property Object\n         */\n        src: String\n\n    },\n\n    computed: {\n\n        component() {\n            return this.tag || (this.to ? 'router-link' : (this.href ? 'a' : 'span'));\n        }\n\n    },\n\n    methods: {\n        unit(value) {\n            return unit(value);\n        }\n    }\n\n};\n</script>\n","<template>\n    <div class=\"navbar-collapse\" id=\"navbarCollapse\" :class=\"{'collapse': collapse}\">\n        <slot/>\n    </div>\n</template>\n\n<script>\nexport default {\n\n    name: 'navbar-collapse',\n\n    props: {\n\n        collapse: {\n            type: Boolean,\n            default: true\n        }\n\n    }\n\n};\n</script>\n","<template>\n    <span class=\"navbar-text\">\n        <slot/>\n    </span>\n</template>\n\n<script>\nexport default {\n\n    name: 'navbar-text'\n\n};\n</script>\n","<template>\n    <span class=\"navbar-toggler-icon\">\n        <slot/>\n    </span>\n</template>\n\n<script>\nexport default {\n\n    name: 'navbar-toggler-icon'\n\n};\n</script>\n","<template>\n    <button\n        type=\"button\"\n        class=\"navbar-toggler\"\n        data-toggle=\"collapse\"\n        :data-target=\"target\"\n        :aria-controls=\"target\"\n        :aria-expanded=\"expanded\"\n        :aria-label=\"label\"\n        @click=\"onClick\">\n        <slot><navbar-toggler-icon/></slot>\n    </button>\n</template>\n\n<script>\nimport NavbarTogglerIcon from './NavbarTogglerIcon';\n\nexport default {\n\n    name: 'navbar-toggler',\n\n    components: {\n        NavbarTogglerIcon\n    },\n\n    props: {\n\n        expanded: Boolean,\n\n        label: {\n            type: String,\n            default: 'Toggle navigation'\n        },\n\n        target: {\n            type: String,\n            default: '.navbar-collapse'\n        }\n\n    },\n\n    methods: {\n\n        onClick(event) {\n            this.$emit('click', event);\n        }\n\n    }\n\n};\n</script>\n","<template>\n    <nav :class=\"classes\">\n        <slot/>\n    </nav>\n</template>\n\n<script>\nimport prefix from '../../Helpers/Prefix';\nimport Variant from '../../Mixins/Variant';\nimport Colorable from '../../Mixins/Colorable';\nimport NavbarBrand from './NavbarBrand';\nimport NavbarCollapse from './NavbarCollapse';\nimport NavbarText from './NavbarText';\nimport NavbarToggler from './NavbarToggler';\nimport NavbarTogglerIcon from './NavbarTogglerIcon';\nimport MergeClasses from '../../Mixins/MergeClasses';\nimport { isBoolean } from '../../Helpers/Functions';\n\nexport default {\n\n    name: 'navbar',\n\n    components: {\n        NavbarBrand,\n        NavbarCollapse,\n        NavbarText,\n        NavbarToggler,\n        NavbarTogglerIcon\n    },\n\n    mixins: [\n        Variant,\n        Colorable,\n        MergeClasses\n    ],\n\n    props: {\n\n        /**\n         * Expand the navbar. If true, applies to all size, otherwise pass a string.\n         *\n         * @property Object\n         */\n        expand: {\n            type: [Boolean, String],\n            default: 'lg',\n            validate(value) {\n                ['xs', 'sm', 'md', 'lg', 'xl'].indexOf(value) !== -1 || isBoolean(value);\n            }\n        },\n\n        /**\n         * The should the navbar be fixed at the top.\n         *\n         * @property String\n         */\n        fixed: {\n            type: [String, Boolean],\n            validate(value) {\n                ['top', 'bottom'].indexOf(value) !== -1 || isBoolean(value);\n            }\n        },\n\n        /**\n         * The should the navbar be stickied at the top.\n         *\n         * @property String\n         */\n        sticky: {\n            type: [String, Boolean],\n            validate(value) {\n                ['top', 'bottom'].indexOf(value) !== -1 || isBoolean(value);\n            }\n        },\n\n        /**\n         * The variant attribute\n         *\n         * @property String\n         */\n        variant: {\n            type: String,\n            default: 'light',\n            validate(value) {\n                return ['light', 'dark'].indexOf(value) !== -1;\n            }\n        }\n\n    },\n\n    computed: {\n\n        expandedClass() {\n            if(isBoolean(this.expand)) {\n                return this.expand;\n            }\n\n            return prefix(prefix(this.expand, 'expand'), 'navbar');\n        },\n\n        classes() {\n            return this.mergeClasses(\n                'navbar',\n                prefix(this.sticky === true ? 'top' : this.sticky, 'sticky'),\n                prefix(this.fixed === true ? 'top' : this.fixed, 'fixed'),\n                this.expandedClass,\n                this.variantClass,\n                this.colorableClasses\n            );\n        }\n    },\n\n    data() {\n        return {};\n    }\n\n};\n</script>\n","<template>\n    <span class=\"navigation-error fa-stack fa-md\" :title=\"error\">\n        <i class=\"fa fa-stack-2x fa-certificate\"/>\n        <i class=\"fa fa-stack-1x fa-exclamation fa-inverse\"/>\n    </span>\n</template>\n\n<script>\nexport default {\n\n    name: 'navigation-error',\n\n    props: {\n\n        error: {\n            type: String,\n            required: true\n        }\n\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n@import './node_modules/bootstrap/scss/_functions.scss';\n@import './node_modules/bootstrap/scss/_variables.scss';\n\n.navigation-error {\n    color: $danger;\n}\n</style>\n","<template>\n    <component :is=\"component\" :href=\"href || (to ? '#' : null)\" :to=\"to\" :class=\"classes\" @click=\"$emit('click', $event)\">\n        <slot />\n        <navigation-error v-if=\"error\" :error=\"error\"/>\n    </component>\n</template>\n\n<script>\nimport NavigationError from './NavigationError';\n\nexport default {\n\n    name: 'navigation-link',\n\n    components: {\n        NavigationError\n    },\n\n    props: {\n\n        /**\n         * Is the navigation item active\n         *\n         * @prop {Boolean}\n         */\n        active: Boolean,\n\n        /**\n         * Is the navigation item disabled\n         *\n         * @prop {Boolean}\n         */\n        disabled: Boolean,\n\n        /**\n         * The error string.\n         *\n         * @prop {String}\n         */\n        error: String,\n\n        /**\n         * The href attribute\n         *\n         * @prop {String}\n         */\n        href: String,\n\n        /**\n         * The component HTML tag\n         *\n         * @prop {String}\n         */\n        tag: String,\n\n        /**\n         * The to attribute, will be passed to router-link.\n         *\n         * @prop {String}\n         */\n        to: [Object, String],\n\n        /**\n         * Add the nav-item class to the link\n         *\n         * @prop {Boolean}\n         */\n        item: {\n            type: Boolean,\n            default: true\n        }\n\n    },\n\n    computed: {\n\n        component() {\n            return this.tag || (this.to ? 'router-link' : 'a');\n        },\n\n        classes() {\n            this.$nextTick(() => {\n                if(!this.isItem) {\n                    this.isItem = !this.$parent.$el.classList.contains('nav-item');\n                }\n            });\n\n            return {\n                'nav-link': !!this.href || !!this.to,\n                'nav-item': !!this.item,\n                'active': this.active,\n                'disabled': this.disabled\n            };\n        }\n\n    }\n\n};\n</script>\n","<template>\n    <component :is=\"component\" :class=\"classes\" @click=\"$emit('click', $event)\">\n        <slot />\n    </component>\n</template>\n\n<script>\nimport NavigationLink from './NavigationLink';\n\nexport default {\n\n    name: 'navigation-item',\n\n    extends: NavigationLink,\n\n    props: {\n\n        /**\n         * The HTML element\n         *\n         * @prop {String}\n         */\n        element: String,\n\n        /**\n         * Is the component a list element\n         *\n         * @prop {Boolean}\n         */\n        list: Boolean,\n\n        /**\n         * Add the nav-item class to the link\n         *\n         * @prop {Boolean}\n         */\n        item: {\n            type: Boolean,\n            default: true\n        }\n\n    },\n\n    computed: {\n\n        component() {\n            if(this.element) {\n                return this.element;\n            }\n            else if(this.href) {\n                return 'a';\n            }\n            else if(this.list) {\n                return 'li';\n            }\n\n            return 'div';\n        }\n\n    }\n\n};\n</script>\n","<template>\n    <nav class=\"nav\" :class=\"classes\" :role=\"role\">\n        <slot/>\n    </nav>\n</template>\n\n<script>\nimport NavigationItem from './NavigationItem';\nimport prefix from '../../Helpers/Prefix';\nimport Colorable from '../../Mixins/Colorable';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'navigation',\n\n    components: {\n        NavigationItem\n    },\n\n    mixins: [\n        Colorable,\n        MergeClasses\n    ],\n\n    props: {\n\n        /**\n         * Helper to add the justify-content-X class.\n         *\n         * @prop {Array}\n         */\n        align: String,\n\n        /**\n         * An array of buttons\n         *\n         * @prop {Array}\n         */\n        buttons: Array,\n\n        /**\n         * The navigation inside a card\n         *\n         * @prop {Boolean}\n         */\n        card: Boolean,\n\n        /**\n         * Justify nav items to fill the width equally (using flex).\n         *\n         * @prop {Array}\n         */\n        fill: Boolean,\n\n        /**\n         * Add `nav-justified` class to the component.\n         *\n         * @prop {Array}\n         */\n        justified: Boolean,\n\n        /**\n         * Display items as pill shapes\n         *\n         * @prop {Array}\n         */\n        pills: Boolean,\n\n        /**\n         * Display items as tab shapes\n         *\n         * @prop {Array}\n         */\n        tabs: Boolean,\n\n        /**\n         * Display the buttons vertically\n         *\n         * @prop {Boolean}\n         */\n        vertical: Boolean,\n\n        /**\n         * The role attribute\n         *\n         * @prop {String}\n         */\n        role: String\n\n    },\n\n    computed: {\n\n        classes() {\n            this.$nextTick(() => {\n                if(!this.isCard) {\n                    this.isCard = this.$parent.$el.classList.contains('card-header');\n                }\n            });\n\n            return this.mergeClasses(\n                prefix(this.align, 'justify-content'),\n                this.colorableClasses, {\n                    'card-header-tabs': this.isCard && this.tabs,\n                    'card-header-pills': this.isCard && this.pills,\n                    'nav-justified': this.justified,\n                    'nav-fill': this.fill,\n                    'nav-pills': this.pills,\n                    'nav-tabs': this.tabs,\n                    'flex-column': this.vertical\n                }\n            );\n        }\n\n    },\n\n    data() {\n        return {\n            isCard: this.card\n        };\n    }\n\n};\n</script>\n","<template>\n\n    <navigation-item class=\"dropdown\">\n\n        <slot name=\"toggle-button\">\n            <navigation-link\n                href=\"#\"\n                class=\"dropdown-toggle\"\n                data-toggle=\"dropdown\"\n                role=\"button\"\n                aria-haspopup=\"true\"\n                :aria-expanded=\"isDropdownShowing\"\n                @click.native.prevent=\"toggle()\"\n                @blur=\"onBlur\">\n                {{label}}\n            </navigation-link>\n        </slot>\n\n        <slot name=\"dropdown-menu\">\n            <dropdown-menu\n                :id=\"$attrs.id\"\n                :items=\"items\"\n                :align=\"align\"\n                :show.sync=\"isDropdownShowing\"\n                @item:click=\"onItemClick\">\n                <slot/>\n            </dropdown-menu>\n        </slot>\n\n    </navigation-item>\n\n</template>\n\n<script>\nimport NavigationItem from './NavigationItem';\nimport NavigationLink from './NavigationLink';\nimport DropdownMenu from '../DropdownMenu';\nimport BtnDropdown from '../BtnDropdown';\n\nexport default {\n\n    name: 'navigation-dropdown',\n\n    extends: BtnDropdown,\n\n    components: {\n        BtnDropdown,\n        DropdownMenu,\n        NavigationItem,\n        NavigationLink\n    }\n\n};\n</script>\n","<template>\n    <ul class=\"navbar-nav\" :class=\"classes\" :role=\"role\">\n        <slot/>\n    </ul>\n</template>\n\n<script>\nimport Navigation from '../Navigation';\n\nexport default {\n\n    name: 'navbar-nav',\n\n    components: {\n        Navigation\n    }\n\n};\n</script>\n","<template>\n    <div class=\"overlay-body\"><slot/></div>\n</template>\n\n<script>\nexport default {\n\n    name: 'overlay-body'\n\n};\n</script>\n","<template>\n    <container class=\"overlay-content\">\n        <slot/>\n    </container>\n</template>\n\n<script>\nimport Container from '../Container';\n\nexport default {\n\n    name: 'overlay-content',\n\n    components: {\n        Container\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n@import './node_modules/bootstrap/scss/functions.scss';\n@import './node_modules/bootstrap/scss/variables.scss';\n\n.overlay-content {\n    margin: 0 auto;\n    overflow-y: auto;\n    position: relative;\n\n    /*\n    &.overlay-content-center {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n\n        .overlay-body {\n            flex: 1;\n        }\n    }\n    */\n\n    &.overlay-content-fixed {\n        top: 0;\n        left: 0;\n        padding: 0;\n        height: 100%;\n        position: fixed;\n        max-width: none;\n    }\n\n    .overlay-controls {\n        float: right;\n        position: relative;\n        top: 4px;\n        padding-right: 0;\n        padding-bottom: $font-size-base;\n\n        &.left {\n            left: 0;\n        }\n        &.right {\n            right: 0;\n        }\n\n        & + * {\n            clear: both;\n        }\n    }\n}\n</style>\n","<template>\n    <nav aria-label=\"Page navigation example\">\n        <ul class=\"pagination\" :class=\"classes\">\n        \t<li class=\"page-item\" :class=\"{'disabled': currentPage === 1}\">\n        \t\t<a href=\"#\" class=\"page-link\" aria-label=\"Previous\" @click.prevent=\"prev($event)\">\n        \t\t\t<span aria-hidden=\"true\">&laquo;</span>\n        \t\t</a>\n        \t</li>\n            <li v-for=\"item in pages\" :data-page=\"item.page\" class=\"page-item\" :class=\"{'active': item.page === currentPage, 'disabled': !!item.divider}\">\n                <slot :item=\"item\">\n                    <a v-if=\"item.divider\" class=\"page-link\">&hellip;</a>\n                \t<a v-else href=\"#\" class=\"page-link\" :class=\"item.class\" :data-label=\"item.label\" @click.prevent=\"paginate(item.page, $event)\">\n                \t\t<span v-if=\"item.label\" aria-hidden=\"true\" v-html=\"item.label\"></span>\n                \t\t<span v-if=\"item.page\" aria-hidden=\"true\" v-html=\"item.page\"></span>\n                \t</a>\n                </slot>\n            </li>\n        \t<li class=\"page-item\" :class=\"{'disabled': currentPage >= totalPages}\">\n        \t\t<a href=\"#\" class=\"page-link\" aria-label=\"Next\" @click.prevent=\"next($event)\">\n        \t\t\t<span aria-hidden=\"true\">&raquo;</span>\n        \t\t</a>\n            </li>\n        </ul>\n    </nav>\n\n</template>\n\n<script>\nexport default {\n\n    name: 'pagination',\n\n    props: {\n        /**\n         * The alignment of the pagination component.\n         *\n         * @prop String\n         */\n        align: {\n            type: String,\n            validate: value => {\n                return ['start', 'end', 'center'].indexOf(value) !== -1;\n            }\n        },\n\n        /**\n         * The page on which the paginator should start.\n         *\n         * @prop String\n         */\n        page: {\n            type: Number,\n            default: 1\n        },\n\n        /**\n         * The total number of pages in the paginator.\n         *\n         * @prop String\n         */\n        totalPages: {\n            type: Number,\n            default: 1\n        },\n\n        /**\n         * The number of pages to show when the total number of pages is\n         * greater than the number of pages that should be shown.\n         *\n         * @prop String\n         */\n        showPages: {\n            type: Number,\n            default: 6\n        }\n\n    },\n\n    methods: {\n\n        next(event) {\n            this.paginate(this.currentPage >= this.totalPages ? this.currentPage : this.currentPage + 1, event);\n        },\n\n        prev(event) {\n            this.paginate(this.currentPage <= 1 ? this.currentPage : this.currentPage - 1, event);\n        },\n\n        paginate(page, event) {\n            if(event.currentTarget.parentNode.classList.contains('disabled')) {\n                return;\n            }\n\n            this.setActivePage(page);\n\n            this.$emit('paginate', page, event);\n        },\n\n        setActivePage(page) {\n            if(this.currentPage !== page) {\n                this.currentPage = page;\n            }\n        },\n\n        generate() {\n            const pages = [];\n            const showPages = this.showPages % 2 ? this.showPages + 1 : this.showPages;\n\n            let startPage = (this.currentPage >= showPages) ? this.currentPage - (showPages / 2) : 1;\n            const startOffset = showPages + startPage;\n            const endPage = (this.totalPages < startOffset) ? this.totalPages : startOffset;\n            const diff = startPage - endPage + showPages;\n\n            startPage -= (startPage - diff > 0) ? diff : 0;\n\n            if(startPage > 1) {\n                pages.push({ page: 1 });\n            }\n\n            if(startPage > 2) {\n                pages.push({ divider: true });\n            }\n\n            for(let i = startPage; i < endPage; i++) {\n                pages.push({ page: i });\n            }\n\n            if(endPage <= this.totalPages) {\n                if(this.totalPages - 1 > endPage) {\n                    pages.push({ divider: true });\n                }\n\n                pages.push({ page: this.totalPages });\n            }\n\n            return pages;\n        }\n\n    },\n\n    computed: {\n\n        pages() {\n            return this.generate();\n        },\n\n        classes() {\n            const classes = {};\n\n            classes['justify-content-' + this.align] = true;\n\n            return classes;\n        }\n\n    },\n\n    data() {\n        return {\n            currentPage: this.page\n        };\n    }\n\n};\n</script>\n","<template>\n    <div v-show=\"isDisplaying\" class=\"popover\" :class=\"mergeClasses(triggerableClasses, classes)\" role=\"tooltip\">\n        <div class=\"arrow\"></div>\n        <popover-header v-if=\"title\" v-html=\"title\"/>\n        <popover-body>\n            <slot/>\n        </popover-body>\n    </div>\n</template>\n\n<script>\nimport Popper from 'popper.js';\nimport prefix from '../../Helpers/Prefix';\nimport Triggerable from '../../Mixins/Triggerable';\nimport MergeClasses from '../../Mixins/MergeClasses';\nimport { each, isString } from '../../Helpers/Functions';\n\nexport default {\n\n    name: 'popover',\n\n    mixins: [\n        Triggerable,\n        MergeClasses\n    ],\n\n    props: {\n\n        /**\n         * Apply a CSS fade transition to the popover\n         *\n         * @type {Boolean}\n         */\n        animation: {\n            type: Boolean,\n            default: true\n        },\n\n        /**\n         * Overflow constraint boundary of the popover. Accepts the values of\n         * 'viewport', 'window', 'scrollParent', or an HTMLElement reference\n         * (JavaScript only). For more information refer to Popper.js's\n         * preventOverflow docs.\n         *\n         * @type {Object}\n         */\n        boundary: {\n            type: [String, Array],\n            default: 'scrollParent',\n            validate(value) {\n                return ['viewport', 'window', 'viewport'].indexOf(value) !== -1;\n            }\n        },\n\n        /**\n         * Appends the popover to a specific element.\n         *\n         * Example: container: 'body'.\n         *\n         * This option is particularly useful in that it allows you to position\n         * the popover in the flow of the document near the triggering element -\n         * which will prevent the popover from floating away from thetriggering\n         * element during a window resize.\n         *\n         * @type {String|Element|Boolean}\n         */\n        container: {\n            type: [String, Element, Boolean],\n            default: false\n        },\n\n        /**\n         * Delay closeing and hiding the popover (ms) - does not apply to manual trigger type\n         *\n         * If a number is supplied, delay is applied to both open/close\n         *\n         * Object structure is: delay: { \"close\": 500, \"open\": 100 }\n         *\n         * @type {Number|Object}\n         */\n        delay: {\n            type: [Number, Object],\n            default: 0\n        },\n\n        /**\n         * Allow to specify which position Popper will use on fallback. For more\n         * information refer to Popper.js's behavior docs\n         *\n         * @type {String|Array}\n         */\n        fallbackPlacement: {\n            type: [String, Array],\n            default: 'flip'\n        },\n\n        /**\n         * Offset of the popover relative to its target. For more information\n         * refer to Popper.js's offset docs.\n         *\n         * @type {Number|String}\n         */\n        offset: {\n            type: [Number, String],\n            default: 0\n        },\n\n        /**\n         * How to position the popover - auto | top | bottom | left | right.\n         *\n         * When auto is specified, it will dynamically reorient the popover.\n         *\n         * When a function is used to determine the placement, it is called with\n         * the popover DOM node as its first argument and the triggering element\n         * DOM node as its second. The this context is set to the popover\n         * instance.\n         *\n         * @type {String|Function}\n         */\n        placement: {\n            type: [String, Function],\n            default: 'top',\n            validate(value) {\n                return ['auto', 'top', 'bottom', 'left', 'right'].indexOf(value) !== -1;\n            }\n        },\n\n        /**\n         * If this property is passed, it will force the popover to be visible\n         * by default.\n         *\n         * @type {Boolean}\n         */\n        show: Boolean,\n\n        /**\n         * If a selector is provided, popover objects will be delegated to the\n         * specified targets. In practice, this is used to enable dynamic HTML\n         * content to have popovers added. See this and an informative example.\n         *\n         * @type {Boolean|String}\n         */\n        selector: {\n            type: [Boolean, String],\n            default: false\n        },\n\n        /**\n         * The target element used to position the popover.\n         *\n         * @type {String|Element|Boolean}\n         */\n        target: {\n            type: [String, Element, Boolean],\n            default: false\n        },\n\n        /**\n         * The popover title\n         *\n         * @type {String}\n         */\n        title: String,\n\n        /**\n         * How popover is triggered - click | hover | focus | manual. You may\n         * pass multiple triggers; separate them with a space. `manual` cannot\n         * be combined with any other trigger.\n         *\n         * @type {String}\n         */\n        trigger: {\n            type: [String, Array],\n            default: 'click'\n        }\n\n    },\n\n    methods: {\n\n        align() {\n            each(this.$poppers, el => {\n                el.popper.update();\n            });\n        },\n\n        createPopper(el) {\n            return new Popper(el, this.$el, {\n                offset: this.offset,\n                placement: this.placement,\n                modifiers: {\n                    flip: {\n                        boundariesElement: this.container,\n                        behavior: this.fallbackPlacement\n                    },\n                    offset: {\n                        enabled: !!this.offset,\n                        offset: this.offset\n                    },\n                    arrow: {\n                        enable: true,\n                        element: this.$el.querySelector('.arrow')\n                    }\n                }\n            });\n        },\n\n        getArrowElement() {\n            return this.$el.querySelector('.arrow');\n        },\n\n        /**\n         * Initialize the trigger event for the specified elements\n         *\n         * @param  {Element} el\n         * @return {void}\n         */\n        initializeTrigger(el) {\n            this.$poppers[el] = {\n                trigger: isString(this.trigger) ? this.trigger.split(' ') : this.trigger,\n                popper: this.createPopper(el),\n                event: (event) => {\n                    this.toggle();\n                    this.$poppers[el].popper.update();\n                }\n            };\n\n            each(this.$poppers[el].trigger, trigger => {\n                el.addEventListener(trigger, this.$poppers[el].event);\n            });\n        }\n    },\n\n    watch: {\n\n        isShowing(value) {\n            this.$nextTick(() => {\n                this.align();\n\n                if(value) {\n                    this.focus();\n                }\n            });\n        }\n\n    },\n\n    computed: {\n\n        classes() {\n            return prefix({\n                'top': this.placement === 'top',\n                'bottom': this.placement === 'bottom',\n                'left': this.placement === 'left',\n                'right': this.placement === 'right'\n            }, 'bs-popover');\n        }\n\n    },\n\n    beforeCreate() {\n        if(!this.$poppers) {\n            this.$poppers = {};\n        }\n    }\n\n};\n</script>\n","<template>\n    <div class=\"popover-body\">\n        <slot/>\n    </div>\n</template>\n\n<script>\nexport default {\n\n    name: 'popover-body'\n\n};\n</script>\n","<template>\n    <component :is=\"tag\" class=\"popover-header\">\n        <slot/>\n    </component>\n</template>\n\n<script>\nexport default {\n\n    name: 'popover-header',\n\n    props: {\n\n        /**\n         * The component HTML element\n         *\n         * @type {String}\n         */\n        tag: {\n            type: String,\n            default: 'h3'\n        }\n\n    }\n\n};\n</script>\n","<template>\n\n    <form-group :group=\"group\" :class=\"formGroupClasses\">\n\n        <slot name=\"label\">\n            <form-label v-if=\"label\" :for=\"$attrs.id\" v-html=\"label\"/>\n        </slot>\n\n        <div class=\"form-group-inner\">\n            <slot name=\"control\">\n                <select\n                    v-bind-events\n                    v-bind=\"controlAttributes\"\n                    :value=\"value\"\n                    @input=\"$emit('input', $event.target.value)\">\n                    <slot/>\n                </select>\n            </slot>\n\n            <slot name=\"activity\">\n                <transition name=\"slide-fade\">\n                    <activity-indicator key=\"test\" v-if=\"activity\" ref=\"activity\" type=\"dots\" :size=\"size\"/>\n                </transition>\n            </slot>\n        </div>\n\n        <slot name=\"feedback\">\n            <form-feedback v-if=\"validFeedback\" v-html=\"validFeedback\" valid />\n            <form-feedback v-if=\"invalidFeedback\" v-html=\"invalidFeedback\" invalid />\n        </slot>\n\n        <slot name=\"help\">\n            <help-text v-if=\"helpText\" v-html=\"helpText\" />\n        </slot>\n\n    </form-group>\n\n</template>\n\n<script>\nimport HelpText from '../HelpText';\nimport FormGroup from '../FormGroup';\nimport FormLabel from '../FormLabel';\nimport FormControl from '../FormControl';\nimport FormFeedback from '../FormFeedback';\nimport Colorable from '../../Mixins/Colorable';\nimport ActivityIndicator from '../ActivityIndicator';\nimport MergeClasses from '../../Mixins/MergeClasses';\nimport FormControlMixin from '../../Mixins/FormControl';\n\nconst CUSTOM_SELECT_PREFIX = 'custom-select-';\n\nexport default {\n\n    name: 'select-field',\n\n    components: {\n        ActivityIndicator,\n        HelpText,\n        FormControl,\n        FormGroup,\n        FormLabel,\n        FormFeedback\n    },\n\n    mixins: [\n        Colorable,\n        MergeClasses,\n        FormControlMixin\n    ],\n\n    computed: {\n\n        controlClass() {\n            const controlClass = this.custom ? 'custom-select' : this.defaultControlClass;\n            return this.plaintext ? `${controlClass}-plaintext` : controlClass;\n        },\n\n        customSelectClasses() {\n            return [\n                CUSTOM_SELECT_PREFIX.replace(/-$/, '') + (this.plaintext ? '-plaintext' : ''),\n                this.customSelectSizeClass,\n                (this.spacing || '')\n            ].join(' ');\n        }\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n.has-activity {\n    select {\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n    }\n\n    /* For IE10 */\n    select::-ms-expand {\n        display: none;\n    }\n}\n</style>\n","<template>\n    <!-- TODO: Add tooltip with slide name/key to the control once the tooltip directive has been written. -->\n    <div class=\"slide-deck-controls\">\n        <a v-for=\"slide in slides\" href=\"#\" @click.prevent=\"onClick($event, slide)\" class=\"slide-deck-control-icon\" :class=\"{'is-active': (slide.data ? slide.data.key : slide.key) === active}\">\n            <i class=\"fa fa-circle\"/>\n        </a>\n    </div>\n</template>\n\n<script>\nexport default {\n\n    name: 'slide-deck-controls',\n\n    props: {\n\n        /**\n         * The slide key or index that should show.\n         *\n         * @type {Number}\n         */\n        active: {\n            type: [String, Number],\n            default: 0\n        },\n\n        /**\n         * An array of slide vnodes\n         *\n         * @type {Number}\n         */\n        slides: {\n            type: Array,\n            required: true\n        }\n\n    },\n\n    methods: {\n\n        onClick(event, slide) {\n            this.$emit('click', event, slide);\n        }\n\n    },\n\n    computed: {\n\n    },\n\n    data() {\n        return {};\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n@import './node_modules/bootstrap/scss/functions.scss';\n@import './node_modules/bootstrap/scss/variables.scss';\n\n.slide-deck-controls {\n    .slide-deck-control-icon {\n        color: $white;\n        font-size: $font-size-base;\n\n        &:not(:last-child) {\n            margin-right: $font-size-base / 2;\n        }\n    }\n\n    .slide-deck-control-icon.is-active {\n        color: $primary;\n    }\n}\n</style>\n","<template>\n\n\t<th scope=\"col\">\n\t    <template v-if=\"id && request\">\n\t\t\t<a href=\"#\"\n                class=\"sort\"\n                :data-id=\"id\"\n                @click.prevent=\"$emit('order', id)\">\n                <template v-if=\"!$slots.default\">\n                    {{ label || name || id }}\n                </template>\n                <slot/>\n            </a>\n\t\t\t<i v-if=\"request.params.order === id && request.params.sort === 'asc'\" class=\"sort-icon fa fa-sort-asc\"/>\n\t\t\t<i v-if=\"request.params.order === id && request.params.sort === 'desc'\" class=\"sort-icon fa fa-sort-desc\"/>\n\t\t</template>\n        <template v-else>\n            <template v-if=\"!$slots.default\">\n                {{ label || name || id }}\n            </template>\n            <slot/>\n        </template>\n\t</th>\n\n</template>\n\n<script>\nexport default {\n\n    name: 'table-view-header',\n\n    props: {\n\n        id: [Number, String],\n\n        label: [Number, String],\n\n        name: [Number, String],\n\n        request: Object\n\n    }\n\n};\n</script>\n","<template>\n\n    <table class=\"table\" :class=\"{'table-hover': hover && !loading && data.length}\">\n\n        <thead slot=\"thead\">\n            <tr v-if=\"columns.length || $slots.columns\" slot=\"columns\">\n                <table-view-header\n                    v-for=\"(column, key) in tableColumns\"\n                    v-bind=\"column.props || column\"\n                    v-on=\"column.events\"\n                    :request=\"request\"\n                    :key=\"key\"\n                    @order=\"id => $emit('order', id)\"\n                />\n            </tr>\n        </thead>\n\n        <tbody>\n            <tr v-if=\"loading\">\n                <td :colspan=\"tableColumns.length\" class=\"position-relative\" :style=\"{'height': height(minHeight)}\">\n                    <activity-indicator :center=\"true\"></activity-indicator>\n                </td>\n            </tr>\n\n            <tr v-else-if=\"!data.length\">\n                <td :colspan=\"tableColumns.length\" class=\"position-relative\">\n                    <alert variant=\"warning\" class=\"my-3\">\n                        <i class=\"fa fa-warning\"/> There are no results found.\n                    </alert>\n                </td>\n            </tr>\n\n            <slot v-else :data=\"data\" :columns=\"tableColumns\">\n                <tr v-for=\"(row, i) in data\">\n                    <td v-for=\"column in tableColumns\" v-html=\"row[column.id] || row[column.name]\"></td>\n                </tr>\n            </slot>\n        </tbody>\n\n        <slot name=\"tfoot\">\n            <tfoot v-if=\"paginate && response\">\n                <td :colspan=\"tableColumns.length || 1\" class=\"table-view-footer\">\n                    <slot name=\"pagination\">\n                        <pagination\n                            align=\"center\"\n                            :page=\"response.current_page\"\n                            :total-pages=\"response.last_page\"\n                            @paginate=\"$emit('paginate')\"\n                        />\n                    </slot>\n                </td>\n            </tfoot>\n        </slot>\n\n    </table>\n\n</template>\n\n<script>\nimport Alert from '../Alert';\nimport unit from '../../Helpers/Unit';\nimport Pagination from '../Pagination';\nimport TableViewHeader from './TableViewHeader';\nimport ActivityIndicator from '../ActivityIndicator';\nimport { each, isObject } from '../../Helpers/Functions';\n\nexport default {\n\n    components: {\n        Alert,\n        Pagination,\n        TableViewHeader,\n        ActivityIndicator\n    },\n\n    props: {\n\n        // (array) An array of table column\n        // [{id: 'database_id', name: 'Database id', width: '20%'}]\n        columns: {\n            type: Array,\n            default: () => {\n                return [];\n            }\n        },\n\n        data: {\n            type: Array,\n            required: true\n        },\n\n        // (string) Add table-hover to the table element\n        hover: {\n            type: Boolean,\n            default: true\n        },\n\n        loading: Boolean,\n\n        // (integer) The minimum height of the row when loading data\n        minHeight: {\n            type: Number,\n            default: 400\n        },\n\n        // (bool) Should show the pagination for this table\n        paginate: {\n            type: Boolean,\n            default: true\n        }\n\n    },\n\n    methods: {\n\n        height(min) {\n            const elements = [\n                // this.$el.querySelector('thead'),\n                this.$el.querySelector('tbody')\n            ];\n\n            let height = 0;\n\n            each(elements, el => {\n                height += el.getBoundingClientRect().height;\n            });\n\n            return unit(Math.max(min, height));\n        }\n\n    },\n\n    computed: {\n        tableColumns() {\n            let columns = this.columns;\n\n            if(!columns || !columns.length) {\n                columns = Object.keys(this.data[0]);\n            }\n\n            return columns.map(column => {\n                return isObject(column) ? column : {\n                    name: column\n                };\n            });\n        }\n    }\n\n};\n</script>\n","import { each, isArray, isObject } from '../../Helpers/Functions';\n\nexport default class Transformer {\n    /**\n     * Initialize the transformer instance using an HTTP response object.\n     *\n     * @param data object\n     * @return void\n     */\n    constructor(response) {\n        if(!isObject(this.$originalResponse = response)) {\n            throw new Error('The transformer must be instantiated with a response object.');\n        }\n\n        if(!isArray(this.$required = this.required()) || !this.$required.length) {\n            throw new Error('A transformer must have at least one required property.');\n        }\n\n        this.$transformedResponse = this.transform(response);\n        this.validate();\n        this.initialize();\n    }\n\n    /**\n     * A method to override to perform logic to finished initializing.\n     *\n     * @return void\n     */\n    initialize() {\n        //\n    }\n\n    /**\n     * Define an array of required properties with at least one value.\n     *\n     * @return void\n     */\n    required() {\n        //\n    }\n\n    /**\n     * Tranform the Response object\n     *\n     * @property String\n     */\n    transform(response) {\n        return response.data;\n    }\n\n    /**\n     * Get the tranformed response\n     *\n     * @property String\n     */\n    response() {\n        return this.$transformedResponse;\n    }\n\n    /**\n     * Validate the tranformed response.\n     *\n     * @return void\n     */\n    validate() {\n        if(!isObject(this.$transformedResponse)) {\n            throw new Error('The transformed response must be an object.');\n        }\n\n        each(this.$required, key => {\n            if(!(key in this.$transformedResponse)) {\n                throw new Error(`\"${key}\" is a required property and does not exist in the tranformed response.`);\n            }\n        });\n    }\n}\n","import { isArray } from '../../Helpers/Functions';\nimport Transformer from '../Transformer';\n\nexport default class TableViewTransformer extends Transformer {\n    required() {\n        return [\n            // The end of the count of the paginated list.\n            'to',\n\n            // The start of the count of the paginated list.\n            'from',\n\n            // The total number of items (not just included in the pagination)\n            'total',\n\n            // The number of items per page\n            'per_page',\n\n            // The last page number (or total pages)\n            'last_page',\n\n            // The current page number\n            'current_page',\n\n            // The actual response data to appear in the table\n            'data'\n        ];\n    }\n\n    data() {\n        return this.$transformedResponse.data;\n    }\n\n    initialize() {\n        if(!isArray(this.data())) {\n            throw new Error('The data property must be an array.');\n        }\n    }\n}\n","<template>\n\n    <div class=\"table-view\">\n\n        <div v-if=\"heading || description || $slots.buttons\" class=\"d-flex justify-content-between align-items-center\">\n            <slot name=\"heading\"><h2 v-if=\"heading\" v-html=\"heading\"/></slot>\n            <slot name=\"description\"><p v-if=\"description\" v-html=\"description\"/></slot>\n\n            <div v-if=\"$slots.buttons\" class=\"ml-auto my-3\">\n                <slot name=\"buttons\"/>\n            </div>\n        </div>\n\n        <card v-if=\"card\">\n            <data-table\n                :columns=\"columns\"\n                :data=\"data\"\n                :hover=\"hover\"\n                :loading=\"loading\"\n                :min-height=\"minHeight\"\n                :paginate=\"paginate\"\n                @paginate=\"onPaginate\"\n                @order=\"id => orderBy(id)\">\n                <slot :data=\"data\" :columns=\"columns\"/>\n            </data-table/>\n        </card>\n        <data-table\n            v-else\n            :columns=\"columns\"\n            :data=\"data\"\n            :hover=\"hover\"\n            :loading=\"loading\"\n            :min-height=\"minHeight\"\n            :paginate=\"paginate\"\n            @paginate=\"onPaginate\"\n            @order=\"id => orderBy(id)\">\n            <slot :data=\"data\" :columns=\"columns\"/>\n        </data-table/>\n\n    </div>\n\n</template>\n\n<script>\nimport Card from '../Card';\nimport BaseTable from './Table';\nimport Proxy from '../../Mixins/Proxy';\nimport Request from '../../Http/Request';\nimport TableViewHeader from './TableViewHeader';\nimport { extend } from '../../Helpers/Functions';\nimport TableViewTransformer from '../../Http/TableViewTransformer';\n\nexport default {\n    name: 'table-view',\n\n    mixins: [Proxy],\n\n    components: {\n        Card,\n        BaseTable,\n        TableViewHeader\n    },\n\n    props: {\n\n        // (boolean) Show the table in a card.\n        card: Boolean,\n\n        // (string) A relative or absolute endpoint URL used to fetch data\n        url: {\n            type: String,\n            required: true\n        },\n\n        // (integer) The starting page of the table\n        page: {\n            type: Number,\n            default: 1\n        },\n\n        // (integer) The total number of results per page\n        limit: {\n            type: Number,\n            default: 20\n        },\n\n        // (string) The column used to order the data\n        order: String,\n\n        // (string) The sort direction (asc|desc)\n        sort: {\n            type: String,\n            validate: (value) => {\n                return ['asc', 'desc'].indexOf(value) !== -1;\n            }\n        },\n\n        // (integer) The minimum height of the row when loading data\n        minHeight: {\n            type: Number,\n            default: 400\n        },\n\n        // (array) An array of button objects\n        // [{href: 'test-123', label: 'Test 123'}]\n        buttons: {\n            type: Array,\n            default: () => {\n                return [];\n            }\n        },\n\n        // (array) An array of table column\n        // [{id: 'database_id', name: 'Database id', width: '20%'}]\n        columns: {\n            type: Array,\n            default: () => {\n                return [];\n            }\n        },\n\n        // (string) The table heading\n        heading: String,\n\n        // (string) Add table-hover to the table element\n        hover: {\n            type: Boolean,\n            default: true\n        },\n\n        // (string) The table description\n        description: String,\n\n        // (bool) Should show the pagination for this table\n        paginate: {\n            type: Boolean,\n            default: true\n        },\n\n        // (object) The HTTP response transformer instance\n        transformer: {\n            type: Object,\n            validate: (value) => {\n                return value instanceof TableViewTransformer;\n            }\n        }\n    },\n\n    methods: {\n\n        orderBy(order) {\n            const defaultSort = 'desc';\n            const currentSort = this.getRequestParam('sort');\n            const currentOrder = this.getRequestParam('order');\n\n            this.addRequestParam('order', order);\n            this.addRequestParam('sort',\n                currentOrder !== order || !currentSort ? defaultSort : (\n                    currentSort === defaultSort ? 'asc' : null\n                )\n            );\n\n            this.fetch();\n        },\n\n        getRequestHeader(key, value) {\n            return this.request.headers[key] || value;\n        },\n\n        addRequestHeader(key, value) {\n            if(!this.request.headers) {\n                this.request.headers = {};\n            }\n\n            this.request.headers[key] = value;\n        },\n\n        getRequestParam(key, value) {\n            return this.request.params[key] || value;\n        },\n\n        addRequestParam(key, value) {\n            if(!this.request.params) {\n                this.request.params = {};\n            }\n\n            this.request.params[key] = value;\n        },\n\n        fetch() {\n            this.loading = true;\n\n            return Request.get(this.url, this.request).then(response => {\n                const transformer = this.transformer || new TableViewTransformer(response);\n                this.response = transformer.response();\n                this.data = transformer.data();\n                this.loading = false;\n            }, errors => {\n                this.loading = false;\n            });\n        },\n\n        onPaginate(page, event) {\n            if(!this.request.params) {\n                this.request.params = {};\n            }\n\n            this.request.params.page = page;\n            this.fetch();\n        }\n    },\n\n    data() {\n        return {\n            // (array) The dataset for the table\n            data: this.$attrs.data || [],\n\n            // (bool) Is the table currently loading data\n            loading: false,\n\n            // (null|object) The response object\n            response: null,\n\n            // (object) The HTTP request object\n            request: extend({\n                headers: {},\n                params: {\n                    page: this.page,\n                    limit: this.limit,\n                    order: this.order,\n                    sort: this.sort\n                }\n            }, this.$attrs.request)\n        };\n    },\n\n    mounted() {\n        this.fetch();\n    },\n\n    beforeDestroy() {\n        this.$off();\n    }\n};\n</script>\n\n<style lang=\"scss\">\n.card > .table {\n    margin-bottom: 0;\n\n    thead th {\n        border-top: 0;\n        border-bottom: 0;\n    }\n\n    tfoot .pagination {\n        margin-bottom: 0;\n    }\n}\n</style>\n","<template>\n\n    <form-group :group=\"group\" :class=\"formGroupClasses\">\n\n        <slot name=\"label\">\n            <form-label v-if=\"label || hasDefaultSlot\" :for=\"$attrs.id\">\n                <slot>{{label}}</slot>\n            </form-label>\n        </slot>\n\n        <slot name=\"control\">\n            <div class=\"position-relative\">\n                <textarea\n                    v-bind-events\n                    v-bind=\"controlAttributes\"\n                    v-autogrow=\"autogrow\"\n                    :value=\"value\"\n                    @input=\"$emit('input', $event.target.value)\"\n                />\n                <slot name=\"feedback\">\n                    <form-feedback v-if=\"validFeedback\" v-html=\"validFeedback\" valid />\n                    <form-feedback v-if=\"invalidFeedback\" v-html=\"invalidFeedback\" invalid />\n                </slot>\n            </div>\n        </slot>\n\n        <slot name=\"help\">\n            <help-text v-if=\"helpText\" v-html=\"helpText\" />\n        </slot>\n\n    </form-group>\n\n</template>\n\n<script>\nimport HelpText from '../HelpText';\nimport FormGroup from '../FormGroup';\nimport FormLabel from '../FormLabel';\nimport FormFeedback from '../FormFeedback';\nimport Colorable from '../../Mixins/Colorable';\nimport FormControl from '../../Mixins/FormControl';\nimport MergeClasses from '../../Mixins/MergeClasses';\n\nexport default {\n\n    name: 'textarea-field',\n\n    components: {\n        HelpText,\n        FormGroup,\n        FormLabel,\n        FormFeedback\n    },\n\n    mixins: [\n        Colorable,\n        FormControl,\n        MergeClasses\n    ],\n\n    props: {\n        /**\n         * The type attribute\n         *\n         * @property String\n         */\n        type: {\n            type: String,\n            default: 'text'\n        },\n\n        /**\n         * The rows attribute\n         *\n         * @property String\n         */\n        rows: [Number, String]\n    }\n\n};\n</script>\n","<template>\n    <div class=\"thumbnail-list-item\" :style=\"{height: unit(height), width: unit(width), minHeight: unit(minHeight), maxHeight: unit(maxHeight), minWidth: unit(minWidth), maxWidth: unit(maxWidth)}\">\n        <img v-if=\"src\" :src=\"src\" :alt=\"alt\" :class=\"{'img-fluid': fluid}\" />\n        <slot/>\n    </div>\n</template>\n\n<script>\nimport unit from '../../Helpers/Unit';\n\nexport default {\n\n    props: {\n\n        alt: String,\n\n        src: String,\n\n        width: [String, Number],\n\n        height: [String, Number],\n\n        minHeight: [String, Number],\n\n        maxHeight: [String, Number],\n\n        minWidth: [String, Number],\n\n        maxWidth: [String, Number],\n\n        fluid: {\n            type: Boolean,\n            default: true\n        }\n\n    },\n\n    methods: {\n\n        unit: unit\n\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n.thumbnail-list-item {\n    max-width: 100%;\n    max-height: 100%;\n\n    & > img {\n        max-width: 100%;\n\n        &.img-fluid {\n            width: 100%;\n        }\n    }\n\n    /*\n    &:not(:only-child) {\n        margin-right: 10px;\n        margin-bottom: 10px;\n    }\n\n    &:nth-child(2n) {\n        opacity: .25;\n    }\n    */\n}\n</style>\n","<template>\n    <div class=\"thumbnail-list\" :class=\"classes\">\n        <thumbnail-list-item v-if=\"!!images\" v-for=\"image in images\" :key=\"image\" :src=\"image\" :width=\"width\" />\n        <slot/>\n    </div>\n</template>\n\n<script>\nimport ThumbnailListItem from './ThumbnailListItem';\n\nexport default {\n\n    components: {\n        ThumbnailListItem\n    },\n\n    props: {\n\n        fill: Boolean,\n\n        flex: Boolean,\n\n        noFlex: Boolean,\n\n        grid: Boolean,\n\n        wrap: Boolean,\n\n        images: Array,\n\n        width: {\n            type: [String, Number],\n            default: 75\n        }\n\n    },\n\n    computed: {\n\n        classes() {\n            return {\n                'thumbnail-list-fill': this.fill,\n                'thumbnail-list-flex': this.flex,\n                'thumbnail-list-noflex': this.noFlex,\n                'thumbnail-list-grid': this.grid,\n                'thumbnail-list-wrap': this.wrap\n            };\n        }\n\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n.thumbnail-list {\n    width: 100%;\n    display: flex;\n\n    &:not(.thumbnail-list-grid) > *:not {\n        padding-right: 10px;\n        padding-bottom: 10px;\n    }\n\n    &:not(.thumbnail-list-grid) > *:first-child:last-child {\n        padding: 0;\n    }\n\n    &.thumbnail-list-fill,\n    &.thumbnail-list-wrap {\n        flex-flow: row wrap;\n    }\n\n    &.thumbnail-list-noflex > * {\n        flex: 0;\n    }\n\n    &.thumbnail-list-fill > * {\n        flex: 1 0 auto;\n    }\n\n    &.thumbnail-list-wrap > * {\n        flex: 0 0 auto;\n    }\n\n    &.thumbnail-list-flex > * {\n        flex: 1;\n    }\n\n}\n</style>\n","<template>\n\n    <form-group :group=\"group\" class=\"upload-field\" :class=\"{'enable-dropzone': dropzone, 'enable-multiple': multiple}\">\n\n        <dropzone @drop=\"onDrop\">\n\n            <file-field\n                v-if=\"multiple && (!maxUploads || maxUploads > value.length) || !multiple && !value\"\n                :name=\"name\"\n                :label=\"label\"\n                :placeholder=\"placeholder\"\n                :help-text=\"helpText\"\n                :multiple=\"multiple\"\n                :errors=\"errors\"\n                @change=\"onChange\"\n            />\n\n            <thumbnail-list v-if=\"files && files.length\" class=\"mt-4\" wrap>\n                <thumbnail-list-item\n                    v-for=\"(file, key) in files\"\n                    :key=\"file.lastModified + '-' + file.lastModifiedDate + '-' + file.size + '-' + file.type + '-' + file.name\"\n                    :width=\"width\"\n                    :min-width=\"minWidth\"\n                    :max-width=\"maxWidth\"\n                    :height=\"height\"\n                    :min-height=\"minHeight\"\n                    :max-height=\"maxHeight\"\n                    :class=\"{'uploading': !!progressBars[key]}\">\n                    <file-preview :file=\"file\" :progress=\"progressBars[key] || 0\" @loaded=\"onLoadedPreview\" @close=\"removeFile(file)\"/>\n                    <slot :file=\"file\"/>\n                </thumbnail-list-item>\n            </thumbnail-list>\n\n            <div v-if=\"showDropElement\" class=\"upload-field-dropzone\" :style=\"{'min-height': dropzoneMinHeight}\" @drop.prevent=\"onDrop\">\n                <i class=\"fa fa-cloud-upload\"/>\n                <div>Drag and drop files to upload</div>\n            </div>\n\n        </dropzone>\n\n    </form-group>\n\n</template>\n\n<script>\nimport FormGroup from '../FormGroup';\nimport Model from '../../Http/Model';\nimport Dropzone from '../Dropzone/Dropzone';\nimport FormControl from '../../Mixins/FormControl/FormControl';\nimport FileField from '../FileField/FileField';\nimport FilePreview from '../FilePreview/FilePreview';\nimport ThumbnailList from '../ThumbnailList/ThumbnailList';\nimport ThumbnailListItem from '../ThumbnailList/ThumbnailListItem';\nimport { each, extend, remove, isArray, isUndefined } from '../../Helpers/Functions';\n\nexport default {\n\n    name: 'upload-field',\n\n    mixins: [FormControl],\n\n    components: {\n        Dropzone,\n        FormGroup,\n        FileField,\n        FilePreview,\n        ThumbnailList,\n        ThumbnailListItem\n    },\n\n    model: {\n        prop: 'value',\n        event: 'change'\n    },\n\n    props: {\n\n        /**\n         * Can user upload multiple files\n         *\n         * @property String\n         */\n        multiple: Boolean,\n\n        /**\n         * The maximum number of files that a user can upload\n         *\n         * @property String\n         */\n        maxUploads: Number,\n\n        /**\n         * The height attribute for the control element\n         *\n         * @property String\n         */\n        height: [Number, String],\n\n        /**\n         * The minimum height attribute for the control element\n         *\n         * @property String\n         */\n        minHeight: [Number, String],\n\n        /**\n         * The maximum height attribute for the control element\n         *\n         * @property String\n         */\n        maxHeight: [Number, String],\n\n        /**\n         * The width attribute for the control element\n         *\n         * @property String\n         */\n        width: [Number, String],\n\n        /**\n         * The minimum width attribute for the control element\n         *\n         * @property String\n         */\n        minWidth: [Number, String],\n\n        /**\n         * The maximum width attribute for the control element\n         *\n         * @property String\n         */\n        maxWidth: [Number, String],\n\n        /**\n         * Can user drag/drop files into browser to upload them.\n         *\n         * @property String\n         */\n        dropzoneMinHeight: [Number, String],\n\n        /**\n         * Is the user dragging a file over the dropzone\n         *\n         * @property String\n         */\n        dragging: {\n            type: [String, Boolean],\n            default() {\n                return undefined;\n            }\n        },\n\n        /**\n         * Can user drag/drop files into browser to upload them.\n         *\n         * @property String\n         */\n        dropzone: {\n            type: Boolean,\n            default: true\n        },\n\n        /**\n         * The data attribute\n         *\n         * @property File|FileList|Array\n         */\n        value: {\n            type: [Object, File, FileList, Array],\n            default() {\n                return !this.multiple ? null : [];\n            }\n        },\n\n        /**\n         * An HTTP Model used to send the request\n         *\n         * @type Model\n         */\n        model: [Model, Function],\n\n        request: Object\n\n    },\n\n    methods: {\n\n        removeFile(data) {\n            if(this.multiple) {\n                const files = isArray(this.value) ? this.value.slice(0) : [];\n\n                if(data instanceof File) {\n                    if(data.request && data.request.cancel) {\n                        data.request.cancel();\n                    }\n\n                    remove(files, {\n                        name: data.name,\n                        size: data.size,\n                        lastModified: data.lastModified\n                    });\n                }\n                else {\n                    remove(files, data);\n                }\n\n                this.$emit('change', files);\n            }\n            else {\n                if(data.request && data.request.cancel) {\n                    data.request.cancel();\n                }\n\n                this.$emit('change', null);\n            }\n        },\n\n        addFile(file, subject) {\n            const data = {\n                name: file.name,\n                lastModified: file.lastModified,\n                lastModifiedDate: file.lastModifiedDate,\n                size: file.size,\n                type: file.type\n            };\n\n            if(this.multiple) {\n                const files = subject || (isArray(this.value) ? this.value.slice(0) : []);\n\n                if((!this.maxUploads || this.maxUploads > files.length) && files.indexOf(data) === -1) {\n                    files.push(file);\n\n                    this.$emit('change', files);\n                    this.upload(file);\n                }\n            }\n            else {\n                this.$emit('change', file);\n                this.upload(file);\n            }\n        },\n\n        addFiles(files) {\n            const subject = isArray(this.value) ? this.value.slice(0) : [];\n\n            each(files, file => {\n                this.addFile(file, subject);\n            });\n\n            event.target.value = null;\n        },\n\n        /**\n         * Upload function that handles auto-uploading fields asynchronously.\n         * This is designed to work with REST API's and replace the file Object\n         * with the RESTful returned by the server.\n         *\n         * @type Object\n         */\n        upload(file) {\n            // Stop upload silently if no model is defined.\n            if(!this.model) {\n                return Promise.resolve();\n            }\n\n            let model = this.model;\n\n            if(!(this.model instanceof Model)) {\n                const Model = this.model;\n\n                model = new Model();\n            }\n\n            if(this.$attrs.name) {\n                model.set(this.$attrs.name, file);\n            }\n\n            this.$emit('uploading', model);\n            this.$set(this.progressBars, this.multiple ? (this.value ? this.value.length : 0) : 0, 0);\n\n            return model.save(null, extend({\n                onUploadProgress: e => {\n                    if(!file.index) {\n                        file.index = this.files.indexOf(file);\n                    }\n\n                    if(!file.request) {\n                        file.request = model.getRequest();\n                    }\n\n                    this.$set(this.progressBars, file.index, parseInt((e.loaded / e.total) * 100, 10));\n                    this.$emit('progress', model, this.progressBars[file.index]);\n                }\n            }, this.request))\n                .then(response => {\n                    this.$nextTick(() => {\n                        this.$emit('upload', model);\n                        this.progressBars[file.index] = false;\n                    });\n\n                    return response;\n                });\n        },\n\n        /**\n         * The `change` event callback.\n         *\n         * @type Object\n         */\n        onChange(files) {\n            if(files instanceof FileList) {\n                this.addFiles(files);\n            }\n            else {\n                this.addFile(files);\n            }\n        },\n\n        /**\n         * The `dragover` event callback.\n         *\n         * @type Object\n         */\n        onDragOver(event) {\n            this.isDraggingInside = true;\n            this.$emit('update:dragging', true);\n            this.$emit('drag:over', event);\n        },\n\n        /**\n         * The `dragover` event callback.\n         *\n         * @type Object\n         */\n        onDragEnter(event) {\n            this.isDraggingInside = true;\n            this.$emit('update:dragging', true);\n            this.$emit('drag:enter', event);\n        },\n\n        /**\n         * The `dragleave` event callback.\n         *\n         * @type Object\n         */\n        onDragLeave(event) {\n            this.isDraggingInside = false;\n            this.$emit('update:dragging', false);\n            this.$emit('drag:leave', event);\n        },\n\n        /**\n         * The `drop` event callback.\n         *\n         * @property String\n         */\n        onDrop(event) {\n            this.isDraggingInside = false;\n            this.addFiles(event.dataTransfer.files);\n            this.$emit('update:dragging', false);\n            this.$emit('drop', event);\n        },\n\n        /**\n         * The `loaded` event callback.\n         *\n         * @type Object\n         */\n        onLoadedPreview(event) {\n            this.$emit('loaded', event);\n        }\n    },\n\n    computed: {\n\n        files() {\n            return this.multiple ? this.value : (this.value ? [this.value] : []);\n        },\n\n        showDropElement() {\n            return !isUndefined(this.dragging) ? this.dragging : this.isDraggingInside;\n        }\n\n    },\n\n    data() {\n        return {\n            progressBars: {},\n            isDraggingInside: false\n        };\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n\n.upload-field {\n     .file-preview {\n        min-width: 100px;\n        min-height: 100px;\n\n        .uploading .file-preview {\n            opacity: .5;\n        }\n    }\n}\n</style>\n","<template>\n    <div class=\"wizard-buttons\">\n        <btn-group ref=\"left\" class=\"wizard-buttons-left\">\n            <slot name=\"buttons-left\"/>\n            <btn type=\"button\" variant=\"secondary\" ref=\"back\" :disabled=\"backButton === false || (active === 0 && backButton !== true)\" :size=\"sizeableClass\" @click=\"onClickBack\">\n                <i class=\"fa fa-long-arrow-left\"/> Back\n            </btn>\n        </btn-group>\n        <btn-group ref=\"right\" class=\"wizard-buttons-right\">\n            <slot name=\"buttons-right\"/>\n            <btn-activity v-if=\"active === steps.length - 1\" ref=\"finish\" :activity=\"activity\" :size=\"sizeableClass\" :disabled=\"finishButton === false\" type=\"button\" variant=\"success\" @click=\"onClickFinish\">\n                Finish\n            </btn-activity>\n            <btn-activity v-if=\"active < steps.length - 1\" ref=\"next\" :activity=\"activity\" :size=\"sizeableClass\" :disabled=\"nextButton === false\" type=\"button\" variant=\"primary\" @click=\"onClickNext\">\n                Next <i class=\"fa fa-long-arrow-right\"/>\n            </btn-activity>\n        </btn-group>\n    </div>\n</template>\n\n<script>\nimport Btn from '../Btn';\nimport BtnGroup from '../BtnGroup';\nimport BtnActivity from '../BtnActivity';\nimport Sizeable from '../../Mixins/Sizeable';\n\nexport default {\n\n    name: 'wizard-buttons',\n\n    mixins: [\n        Sizeable\n    ],\n\n    components: {\n        Btn,\n        BtnGroup,\n        BtnActivity\n    },\n\n    props: {\n\n        /**\n         * The index or key of the active step.\n         *\n         * @type {String|Number}\n         */\n        active: {\n            type: [String, Number],\n            default: 0\n        },\n\n        /**\n         * Show the activity indicator in the next or finish button.\n         *\n         * @type {Boolean}\n         */\n        activity: Boolean,\n\n        /**\n         * Show should the \"Back\" button.\n         *\n         * @type {Boolean}\n         */\n        backButton: Boolean,\n\n        /**\n         * Show should the \"Finish\" button.\n         *\n         * @type {Boolean}\n         */\n        finishButton: Boolean,\n\n        /**\n         * Show should the \"Next\" button.\n         *\n         * @type {Boolean}\n         */\n        nextButton: Boolean,\n\n        /**\n         * An array of steps passed from the parent.\n         *\n         * @type {Array}\n         */\n        steps: {\n            type: Array,\n            required: true\n        }\n\n    },\n\n    computed: {\n\n        /**\n         * Override the class prefix with an empty string...\n         * @return {String}\n         */\n        sizeableClassPrefix() {\n            return '';\n        }\n\n    },\n\n    methods: {\n\n        onClickBack(event) {\n            if(this.backButton !== false) {\n                this.$emit('click:back', event);\n            }\n        },\n\n        onClickFinish(event) {\n            if(this.finishButton !== false) {\n                this.$emit('click:finish', event);\n            }\n        },\n\n        onClickNext(event) {\n            if(this.nextButton !== false) {\n                this.$emit('click:next', event);\n            }\n        }\n\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n.wizard-buttons {\n    display: flex;\n    justify-content: space-between;\n}\n</style>\n","<template>\n    <div class=\"wizard-error\">\n        <div v-if=\"icon\" class=\"wizard-error-icon\">\n            <i :class=\"icon\"/>\n        </div>\n\n        <h3 v-if=\"title\" class=\"wizard-error-title\" v-html=\"title\"/>\n\n        <slot/>\n\n        <div class=\"row justify-content-center\">\n            <div class=\"col-sm-6\">\n                <div v-if=\"errors\" class=\"my-5\">\n                    <ul class=\"mb-0 text-left\">\n                        <li v-for=\"(error, i) in errors\" :key=\"i\">\n                            {{ error[0] }}\n                        </li>\n                    </ul>\n                </div>\n\n                <btn size=\"lg\" variant=\"danger\" block @click=\"$emit('back')\">\n                    <i class=\"fa fa-long-arrow-left\"/> Go Back\n                </btn>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Btn from '../Btn';\nimport WizardStep from './WizardStep';\n\nexport default {\n\n    name: 'wizard-error',\n\n    extends: WizardStep,\n\n    components: {\n        Btn\n    },\n\n    props: {\n\n        icon: {\n            type: String,\n            default: 'fa fa-3x fa-check'\n        },\n\n        title: {\n            type: String,\n            default: 'Error!'\n        },\n\n        errors: [Array, Object]\n\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n@import './node_modules/bootstrap/scss/functions.scss';\n@import './node_modules/bootstrap/scss/variables.scss';\n\n$wizard-error-color: #b10805;\n\n.wizard-error {\n    text-align: center;\n    font-size: $font-size-lg;\n    padding: $font-size-lg * 4 $font-size-lg;\n\n    .wizard-error-title {\n        font-size: $font-size-lg * 1.5;\n        color: $wizard-error-color;\n    }\n\n    .wizard-error-icon {\n        color: $wizard-error-color;\n        font-size: $font-size-lg;\n        border: 5px solid $wizard-error-color;\n        border-radius: 100%;\n        text-align: center;\n        width: $font-size-lg * 6;\n        height: $font-size-lg * 6;\n        margin: $font-size-lg auto;\n        position: relative;\n\n        i {\n            position: absolute;\n            width: 100%;\n            top: 50%;\n            left: 0;\n            line-height: 0;\n        }\n    }\n}\n</style>\n","<template>\n    <component :is=\"tag\" class=\"wizard-header\" :class=\"{'text-center': center}\">\n        <slot/>\n    </component>\n</template>\n\n<script>\nexport default {\n\n    name: 'wizard-header',\n\n    props: {\n\n        center: {\n            type: Boolean,\n            default: true\n        },\n\n        /**\n         * The HTML tag\n         *\n         * @type {String}\n         */\n        tag: {\n            type: String,\n            default: 'h2'\n        }\n\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n.card > .wizard {\n    .wizard-header {\n        margin-top: 1rem;\n    }\n}\n</style>\n","<template>\n    <div class=\"wizard-progress\">\n        <a\n            href=\"#\"\n            v-for=\"(step, i) in steps\"\n            class=\"wizard-step\"\n            :class=\"{'active': i === active, 'disabled': i > highestStep, 'complete': i + 1 <= highestStep}\"\n            :data-step=\"i\"\n            :title=\"step.label || step.title\"\n            :style=\"{width: `${100 / steps.length}%`}\"\n            @click.prevent=\"onClick($event, step)\">\n            <span v-if=\"step.componentOptions && step.componentOptions.propsData.label\" class=\"wizard-step-label\" v-html=\"step.componentOptions.propsData.label\"/>\n            <span v-else-if=\"step.componentOptions && step.componentOptions.propsData.title\" class=\"wizard-step-label\" v-html=\"step.componentOptions.propsData.title\"/>\n        </a>\n    </div>\n</template>\n\n<script>\nexport default {\n\n    name: 'wizard-progress',\n\n    props: {\n\n        /**\n         * The index or key of the active step.\n         *\n         * @type {String|Number}\n         */\n        active: {\n            type: [String, Number],\n            default: 0\n        },\n\n        /**\n         * The wizard highest available to the user.\n         *\n         * @type {Array}\n         */\n        highestStep: {\n            type: Number,\n            required: true\n        },\n\n        /**\n         * The wizard steps\n         *\n         * @type {Array}\n         */\n        steps: {\n            type: Array,\n            required: true\n        }\n\n    },\n\n    methods: {\n\n        onClick(event, step) {\n            if(!event.target.classList.contains('disabled')) {\n                this.$emit('click', event, step);\n            }\n        }\n\n    },\n\n    data() {\n        return {\n            isActive: false\n        };\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n@import './node_modules/bootstrap/scss/functions.scss';\n@import './node_modules/bootstrap/scss/variables.scss';\n\n.wizard-progress {\n    justify-content: space-between;\n    align-items: center;\n    padding: 30px 0;\n    counter-reset: step;\n}\n\n/*\n.wizard-progress-wrapper {\n    width: 100%;\n    padding: 30px 0;\n\n    &:after {\n        visibility: hidden;\n        display: block;\n        font-size: 0;\n        content: \" \";\n        clear: both;\n        height: 0;\n    }\n}\n*/\n\n.wizard-step {\n    cursor: default;\n    display: inline-block;\n    list-style-type: none;\n    font-size: $font-size-base;\n    position: relative;\n    text-align: center;\n    text-transform: uppercase;\n\n    &:before {\n        width: 40px;\n        height: 40px;\n        content: counter(step);\n        counter-increment: step;\n        line-height: 36px;\n        font-size: 15px;\n        display: block;\n        text-align: center;\n        margin: 0 auto 10px auto;\n        border-radius: 50%;\n        background-color: white;\n        position: relative;\n        z-index: 1;\n        border: 2px solid #008cc0;\n        color: #008cc0;\n    }\n\n    &:after {\n        width: 100%;\n        height: 2px;\n        content: '';\n        position: absolute;\n        background-color: #7d7d7d;\n        top: 20px;\n        left: -50%;\n    }\n\n    &:first-child:after {\n        content: none;\n    }\n\n    &, &:hover {\n        color: #7d7d7d;\n        text-decoration: none;\n\n        &:not(.disabled) {\n            cursor: pointer;\n        }\n    }\n\n    .wizard-step-label {\n       color: #008cc0;\n    }\n\n    &.disabled {\n        cursor: default;\n\n        &:before {\n            color: #7d7d7d;\n            border-color: #7d7d7d;\n        }\n\n        .wizard-step-label {\n            color: #7d7d7d;\n        }\n    }\n\n    &.complete {\n        &:before {\n            border-color: #55b776;\n            color: #55b776;\n        }\n\n        &:before {\n            font-family: FontAwesome;\n            content: \"\\f00c\";\n            line-height: 40px;\n        }\n\n        & + .wizard-step:after {\n            background-color: #55b776;\n        }\n\n        .wizard-step-label {\n            color: #55b776;\n        }\n    }\n\n    &.active {\n        &:before {\n            border-color: #b10805;\n            color: #b10805;\n        }\n\n        .wizard-step-label {\n            color: #b10805;\n        }\n    }\n\n    .wizard:not(.wizard-finished) &.active:hover:before,\n    .wizard:not(.wizard-finished) &.complete:hover:before {\n        border-color: #b10805;\n        color: #b10805;\n    }\n\n    .wizard:not(.wizard-finished) &.complete:hover + .wizard-step:after {\n        background-color: #b10805;\n    }\n}\n\n</style>\n","<template>\n    <div class=\"wizard-success\">\n        <div v-if=\"icon\" class=\"wizard-success-icon\">\n            <i :class=\"icon\"/>\n        </div>\n\n        <h3 v-if=\"title\" class=\"wizard-success-title\" v-html=\"title\"/>\n\n        <slot/>\n    </div>\n</template>\n\n<script>\nimport WizardStep from './WizardStep';\n\nexport default {\n\n    name: 'wizard-success',\n\n    extends: WizardStep,\n\n    props: {\n\n        icon: {\n            type: String,\n            default: 'fa fa-check'\n        },\n\n        title: {\n            type: String,\n            default: 'Success!'\n        }\n\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n@import './node_modules/bootstrap/scss/functions.scss';\n@import './node_modules/bootstrap/scss/variables.scss';\n\n$wizard-success-color: #55b776;\n\n.wizard-success {\n    text-align: center;\n    font-size: $font-size-lg;\n    padding: $font-size-lg * 4 $font-size-lg;\n\n    .wizard-success-title {\n        font-size: $font-size-lg * 1.5;\n        color: $wizard-success-color;\n    }\n\n    .wizard-success-icon {\n        color: $wizard-success-color;\n        font-size: $font-size-lg * 2.5;\n        border: 5px solid $wizard-success-color;\n        border-radius: 100%;\n        text-align: center;\n        width: $font-size-lg * 6;\n        height: $font-size-lg * 6;\n        margin: $font-size-lg auto;\n        position: relative;\n\n        i {\n            position: absolute;\n            width: 100%;\n            top: 50%;\n            left: 0;\n            line-height: 0;\n        }\n    }\n}\n</style>\n","<template>\n    <div class=\"wizard\">\n\n        <wizard-header v-if=\"header && !isFinished\" ref=\"header\" v-html=\"header\"/>\n\n        <wizard-progress\n            v-if=\"!isFinished\"\n            ref=\"progress\"\n            :active=\"currentStep\"\n            :highest-step=\"highestStep\"\n            :steps=\"steps\"\n            @click=\"onProgressClick\"\n        />\n\n        <div class=\"wizard-content\" ref=\"content\">\n            <slot v-if=\"!isFinished\" name=\"content\"/>\n\n            <slide-deck\n                v-if=\"!isFinished\"\n                ref=\"slideDeck\"\n                :active=\"currentStep\"\n                :resize-model=\"resizeMode\"\n                @before-enter=\"onBeforeEnter\"\n                @enter=\"onEnter\"\n                @leave=\"onLeave\">\n                <slot />\n            </slide-deck>\n\n            <slot v-else-if=\"isFinished && !hasFailed\" name=\"success\">\n                <wizard-success ref=\"success\"/>\n            </slot>\n\n            <slot v-else-if=\"isFinished && hasFailed\" name=\"error\">\n                <wizard-error ref=\"error\" :errors=\"errors\" @back=\"onClickTest\"/>\n            </slot>\n        </div>\n\n        <slot v-if=\"!isFinished\" name=\"buttons\">\n            <hr>\n\n            <wizard-buttons\n                ref=\"buttons\"\n                size=\"lg\"\n                :steps=\"steps\"\n                :active=\"currentStep\"\n                :activity=\"activity\"\n                :back-button=\"!isBackButtonDisabled\"\n                :next-button=\"!isNextButtonDisabled\"\n                :finish-button=\"!isFinishButtonDisabled\"\n                @click:back=\"onClickBack\"\n                @click:finish=\"onClickFinish\"\n                @click:next=\"onClickNext\"\n            />\n        </slot>\n    </div>\n</template>\n\n<script>\nimport SlideDeck from '../SlideDeck';\nimport WizardButtons from './WizardButtons';\nimport WizardError from './WizardError';\nimport WizardHeader from './WizardHeader';\nimport WizardProgress from './WizardProgress';\nimport WizardSuccess from './WizardSuccess';\nimport { find } from '../../Helpers/Functions';\n\nexport default {\n\n    name: 'wizard',\n\n    components: {\n        SlideDeck,\n        WizardButtons,\n        WizardError,\n        WizardHeader,\n        WizardProgress,\n        WizardSuccess\n    },\n\n    props: {\n\n        /**\n         * The index or key of the active step.\n         *\n         * @type {String|Number}\n         */\n        active: {\n            type: [String, Number],\n            default: 0\n        },\n\n        /**\n         * The the index or key of the max completed step.\n         *\n         * @type {String|Number}\n         */\n        completed: [String, Number],\n\n        /**\n         * Show the activity indicator in the next or finish button.\n         *\n         * @type {Boolean}\n         */\n        activity: Boolean,\n\n        /**\n         * Show should the \"Back\" button.\n         *\n         * @type {Boolean}\n         */\n        backButton: {\n            type: [Function, Boolean],\n            default() {\n                return this.currentStep > 0;\n            }\n        },\n\n        /**\n         * Show should the \"Finish\" button.\n         *\n         * @type {Boolean}\n         */\n        finishButton: {\n            type: Boolean,\n            default: true\n        },\n\n        /**\n         * Pass a header as a string.\n         *\n         * @type {String}\n         */\n        header: String,\n\n        /**\n         * Show should the \"Next\" button.\n         *\n         * @type {Boolean}\n         */\n        nextButton: {\n            type: Boolean,\n            default: true\n        },\n\n        /**\n         * The mode determines how the popover content will flex based on the\n         * varying heights of the slides.\n         *\n         * @type Boolean\n         */\n        resizeMode: {\n            type: [Function, Boolean, String],\n            default: 'auto',\n            validate(value) {\n                return ['auto', 'initial', 'inherit'].indexOf(value) !== 1;\n            }\n        },\n\n        /**\n         * Validate if the data input for the step is valid. Required Boolean\n         * or a predicate function.\n         *\n         * @type {Function|Boolean}\n         */\n        validate: {\n            type: [Function, Boolean],\n            default() {\n                return true;\n            }\n        }\n\n    },\n\n    watch: {\n\n        active() {\n            this.currentStep = this.index();\n        }\n\n    },\n\n    methods: {\n\n        back() {\n            this.$emit('update:step', this.currentStep = Math.max(this.currentStep - 1, 0));\n        },\n\n        disableButtons() {\n            this.isBackButtonDisabled = true;\n            this.isFinishButtonDisabled = true;\n            this.isNextButtonDisabled = true;\n        },\n\n        disableBackButton() {\n            this.isBackButtonDisabled = true;\n        },\n\n        disableFinishButton() {\n            this.isFinishButtonDisabled = true;\n        },\n\n        disableNextButton() {\n            this.isNextButtonDisabled = true;\n        },\n\n        emitBubbleEvent(key, ...args) {\n            this.$refs.slideDeck.slide(this.currentStep).componentInstance.$emit.apply(\n                this.$refs.slideDeck.slide(this.currentStep).componentInstance, args = [key].concat(args)\n            );\n\n            this.$emit.apply(this, args);\n        },\n\n        enableButtons() {\n            this.isBackButtonDisabled = false;\n            this.isFinishButtonDisabled = false;\n            this.isNextButtonDisabled = false;\n        },\n\n        enableBackButton() {\n            this.isBackButtonDisabled = false;\n        },\n\n        enableFinishButton() {\n            this.isFinishButtonDisabled = false;\n        },\n\n        enableNextButton() {\n            this.isNextButtonDisabled = false;\n        },\n\n        finish(status, errors = null) {\n            this.errors = errors;\n            this.hasFailed = status === false;\n            this.isFinished = true;\n        },\n\n        index(key = null) {\n            return Math.max(0, this.$slots.default.indexOf(\n                find(this.$slots.default, ['key', key || this.active]) || this.$slots.default[key || this.active]\n            ));\n        },\n\n        next() {\n            this.$emit('update:step', this.currentStep = Math.min(this.currentStep + 1, this.$refs.slideDeck.slides().length - 1));\n        },\n\n        onBeforeEnter(slide, prev) {\n            slide.context.$emit('before-enter', slide, prev);\n            this.$emit('before-enter', slide, prev);\n        },\n\n        onClickTest(event) {\n            this.isFinished = false;\n        },\n\n        onClickBack(event) {\n            this.emitBubbleEvent('back', event);\n\n            if(event.defaultPrevented !== true) {\n                this.back();\n            }\n        },\n\n        onClickFinish(event) {\n            this.emitBubbleEvent('finish', event);\n\n            if(event.defaultPrevented !== true) {\n                this.finish(true);\n            }\n        },\n\n        onClickNext(event) {\n            this.emitBubbleEvent('next', event);\n\n            if(event.defaultPrevented !== true) {\n                this.next();\n            }\n        },\n\n        onEnter(slide, prev) {\n            this.highestStep = Math.max(this.highestStep, this.$refs.slideDeck.$refs.slides.getSlideIndex(slide));\n            slide.componentInstance.$refs.wizard = this;\n            slide.context.$emit('enter', slide, prev);\n            this.$emit('enter', slide, prev);\n        },\n\n        onLeave(slide, prev) {\n            slide.context.$emit('leave', slide, prev);\n            this.$emit('leave', slide, prev);\n        },\n\n        onProgressClick(event, slide) {\n            if(this.$refs.slideDeck) {\n                this.currentStep = this.$refs.slideDeck.$refs.slides.getSlideIndex(slide);\n            }\n            else {\n                this.isFinished = false;\n                this.currentStep = this.index(slide.key);\n            }\n        }\n\n    },\n\n    mounted() {\n        const slide = this.$refs.slideDeck.slide(this.currentStep);\n\n        if(slide) {\n            (slide.componentInstance || slide.context).$refs.wizard = this;\n            (slide.componentInstance || slide.context).$emit('enter');\n            this.$emit('enter', slide);\n        }\n\n        this.steps = this.$refs.slideDeck.slides();\n    },\n\n    data() {\n        return {\n            steps: [],\n            errors: null,\n            hasFailed: false,\n            isFinished: false,\n            currentStep: this.index(),\n            highestStep: this.index(this.completed),\n            isBackButtonDisabled: this.backButton === false,\n            isNextButtonDisabled: this.nextButton === false,\n            isFinishButtonDisabled: this.finishButton === false\n        };\n    }\n\n};\n</script>\n\n<style lang=\"scss\">\n@import './node_modules/bootstrap/scss/functions.scss';\n@import './node_modules/bootstrap/scss/variables.scss';\n\n.wizard {\n    .slide-deck-content {\n        margin: 1rem;\n    }\n\n    .wizard-content {\n        overflow: hidden;\n        padding: .5rem;\n\n        & + hr {\n            margin-bottom: 0;\n        }\n    }\n\n    .wizard-buttons {\n        padding: 1rem;\n    }\n}\n\n</style>\n","import { get, kebabCase } from '../../Helpers/Functions';\n\nexport default {\n\n    inserted(el, binding, vnode) {\n        const input = el.querySelector('input, textarea') || el;\n        const value = get(vnode.context, binding.expression);\n\n        let editable = !input.value;\n\n        const update = value => {\n            if(editable) {\n                input.value = kebabCase(value);\n                input.dispatchEvent(new Event('input'));\n            }\n        };\n\n        vnode.context.$watch(binding.expression, update);\n\n        input.addEventListener('keyup', event => {\n            input.value = kebabCase(event.target.value) + (\n                event.target.value.match(/\\s$/) ? ' ' : ''\n            );\n        });\n\n        input.addEventListener('input', event => {\n            if(event instanceof InputEvent) {\n                editable = !event.target.value;\n            }\n        });\n\n        input.addEventListener('blur', event => {\n            input.value = kebabCase(event.target.value || binding.expression.split('.').reduce((o, i) => o[i], vnode.context));\n            input.dispatchEvent(new Event('input'));\n        });\n\n        !input.value && update(value);\n    }\n\n};\n","import { each } from './Helpers/Functions';\nimport * as components from './Components';\nimport * as directives from './Directives';\nimport * as plugins from './Plugins';\n\nconst Vue = window.Vue;\n\nif(!Vue) {\n    throw Error(`\n        Vue must be installed before you can install Vue Interface. Be sure to\n        include the following before install.js script tag:\n\n        <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    `);\n}\n\neach(components, (component, key) => {\n    Vue.component(key, component);\n});\n\neach(directives, (directive, key) => {\n    Vue.directive(key, directive);\n});\n\neach(plugins, plugin => {\n    Vue.use(plugin);\n});\n"],"names":["extend","args","Object","assign","isNull","value","isArray","Array","isObject","deepExtend","target","sources","length","source","shift","key","isNumber","toString","isNumeric","match","parseFloat","each","subject","fn","i","first","array","undefined","matches","properties","isString","get","object","path","split","reduce","a","b","property","isFunction","Function","matchesProperty","predicate","find","filter","findIndex","isBoolean","isUndefined","isEmpty","keys","kebabCase","str","replace","toLowerCase","mapKeys","mapped","pickBy","remove","indexes","push","indexOf","height","isFinite","normalizeComponent","compiledTemplate","injectStyle","defaultExport","scopeId","isFunctionalTemplate","moduleIdentifier","isShadowMode","createInjector","createInjectorSSR","createInjectorShadow","options","render","staticRenderFns","_compiled","functional","_scopeId","hook","context","this","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","call","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","originalRender","h","existing","beforeCreate","concat","prefix","delimeter","prefixer","string","RegExp","join","duration","el","getComputedStyle","transitionDuration","numeric","transition","Promise","resolve","reject","delay","setTimeout","e","addClass","vnode","css","$el","classList","removeClass","addEmptyClass","tagName","selectedIndex","emptyClass","uuid","c","r","Math","random","v","hash","pow","charCodeAt","readFile","file","progress","File","Error","reader","FileReader","onprogress","onload","onerror","onabort","readAsDataURL","int","parseInt","input","div","innerHTML","getBoundingClientRect","style","attr","window","resize","minHeight","maxHeight","dynamicHeight","max","mimic","document","createElement","styles","STYLE_ATTRIBUTES","position","bottom","zIndex","visibility","init","addEventListener","event","body","appendChild","show","$collapsedHeight","$nextTick","then","hide","instantiate","Vue","Component","text","_v","prototype","$modal","instance","Modal","modal","$content","content","$slots","default","$mount","_vnode","$alert","title","propsData","type","$on","close","$confirm","$prompt","succeed","fail","$overlay","Overlay","overlay","open","$popover","Popover","popover","props","variant","String","computed","variantClassPrefix","name","variantClass","methods","mergeClasses","classes","slice","arguments","arg","BaseClass","constructor","attributes","setAttribute","getAttribute","hasOwnProperty","getAttributes","getOwnPropertyNames","forEach","getPublicAttributes","obj","setAttributes","values","Response","data","date","Date","$data","$error","$request","$date","status","success","DEFAULTS","transformRequest","transformResponse","Request","method","url","headers","params","send","sentAt","axios","response","error","$cancel","cancelToken","CancelToken","cancel","$response","request","make","Model","$key","$files","files","$properties","initialize","$exists","$changed","$attributes","fill","$initialized","endpoint","uri","exists","id","set","getChangedAttributes","getOriginalValue","getRequest","getUnchangedAttributes","handleAttributeChange","revert","hasChanged","hasFiles","count","total","carry","FileList","toJSON","handlePrimaryKeyChange","save","config","toFormData","delete","form","FormData","item","JSON","stringify","append","toJson","model","errors","size","validate","sizeableClassPrefix","sizeableClass","colorableClasses","$attrs","srOnly","Boolean","srOnlyFocusable","screenreaderClasses","inheritAttrs","mixins","Colorable","MergeClasses","activity","custom","label","Number","group","feedback","bindEvents","defaultControlClass","hideLabel","invalid","valid","spacing","inline","helpText","maxlength","directives","bind","binding","contains","$emit","inserted","update","blur","getInputField","focus","querySelector","getFieldErrors","controlAttributes","controlClasses","controlClass","customControlClass","plaintext","controlSizeClass","formGroupClasses","validFeedback","invalidFeedback","hasDefaultSlot","proxy","callback","apply","splice","preventDefault","getSlot","slot","hasSlot","hasSlots","slots","animation","defaut","Element","trigger","initializeTrigger","toggle","initializeTriggers","querySelectorAll","isShowing","isDisplaying","triggerableClasses","watch","mounted","Transformer","$originalResponse","$required","required","$transformedResponse","transform","TableViewTransformer","elements","element","expression","editable","dispatchEvent","Event","$watch","InputEvent","o","components","component","directive","plugins","plugin","use"],"mappings":"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"}